/* Generated by Cython 0.25.2 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "rocksdb/cpp/comparator_wrapper.hpp", 
            "rocksdb/cpp/filter_policy_wrapper.hpp", 
            "rocksdb/cpp/memtable_factories.hpp", 
            "rocksdb/cpp/merge_operator_wrapper.hpp", 
            "rocksdb/cpp/slice_transform_wrapper.hpp", 
            "rocksdb/cpp/utils.hpp", 
            "rocksdb/cpp/write_batch_iter_helper.hpp"
        ], 
        "extra_compile_args": [
            "-std=c++11", 
            "-O3", 
            "-Wall", 
            "-Wextra", 
            "-Wconversion", 
            "-fno-strict-aliasing"
        ], 
        "language": "c++", 
        "libraries": [
            "rocksdb", 
            "snappy", 
            "bz2", 
            "z"
        ]
    }, 
    "module_name": "rocksdb._rocksdb"
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
    #error Cython requires Python 2.6+ or Python 3.2+.
#else
#define CYTHON_ABI "0_25_2"
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x03030000 || (PY_MAJOR_VERSION == 2 && PY_VERSION_HEX >= 0x02070000)
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_FASTCALL
  #define METH_FASTCALL 0x80
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject **args,
                                              Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__rocksdb___rocksdb
#define __PYX_HAVE_API__rocksdb___rocksdb
#include <string.h>
#include <string>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <deque>
#include <vector>
#include <stdio.h>
#include "pythread.h"
#include <stdint.h>
#include <memory>
#include "rocksdb/slice.h"
#include "rocksdb/env.h"
#include "rocksdb/comparator.h"
#include "cpp/comparator_wrapper.hpp"
#include "rocksdb/merge_operator.h"
#include "cpp/merge_operator_wrapper.hpp"
#include "rocksdb/db.h"
#include "rocksdb/slice_transform.h"
#include "cpp/slice_transform_wrapper.hpp"
#include "rocksdb/cache.h"
#include "rocksdb/filter_policy.h"
#include "cpp/filter_policy_wrapper.hpp"
#include "rocksdb/table.h"
#include "rocksdb/memtablerep.h"
#include "cpp/memtable_factories.hpp"
#include "rocksdb/universal_compaction.h"
#include "rocksdb/options.h"
#include "rocksdb/status.h"
#include "rocksdb/iterator.h"
#include "rocksdb/write_batch.h"
#include "cpp/write_batch_iter_helper.hpp"
#include "rocksdb/utilities/backupable_db.h"
#include "cpp/utils.hpp"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER) && defined (_M_X64)
    #define __Pyx_sst_abs(value) _abs64(value)
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "rocksdb/_rocksdb.pyx",
  "stringsource",
  "type.pxd",
  "bool.pxd",
  "complex.pxd",
};

/*--- Type declarations ---*/
struct __pyx_obj_7rocksdb_8_rocksdb_PyComparator;
struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericComparator;
struct __pyx_obj_7rocksdb_8_rocksdb_PyBytewiseComparator;
struct __pyx_obj_7rocksdb_8_rocksdb_PyFilterPolicy;
struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericFilterPolicy;
struct __pyx_obj_7rocksdb_8_rocksdb_PyBloomFilterPolicy;
struct __pyx_obj_7rocksdb_8_rocksdb_PyMergeOperator;
struct __pyx_obj_7rocksdb_8_rocksdb_PyCache;
struct __pyx_obj_7rocksdb_8_rocksdb_PyLRUCache;
struct __pyx_obj_7rocksdb_8_rocksdb_PySliceTransform;
struct __pyx_obj_7rocksdb_8_rocksdb_PyTableFactory;
struct __pyx_obj_7rocksdb_8_rocksdb_BlockBasedTableFactory;
struct __pyx_obj_7rocksdb_8_rocksdb_PlainTableFactory;
struct __pyx_obj_7rocksdb_8_rocksdb_PyMemtableFactory;
struct __pyx_obj_7rocksdb_8_rocksdb_SkipListMemtableFactory;
struct __pyx_obj_7rocksdb_8_rocksdb_VectorMemtableFactory;
struct __pyx_obj_7rocksdb_8_rocksdb_HashSkipListMemtableFactory;
struct __pyx_obj_7rocksdb_8_rocksdb_HashLinkListMemtableFactory;
struct __pyx_obj_7rocksdb_8_rocksdb_CompressionType;
struct __pyx_obj_7rocksdb_8_rocksdb_CompactionPri;
struct __pyx_obj_7rocksdb_8_rocksdb_Options;
struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatch;
struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatchIterator;
struct __pyx_obj_7rocksdb_8_rocksdb_DB;
struct __pyx_obj_7rocksdb_8_rocksdb_Snapshot;
struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator;
struct __pyx_obj_7rocksdb_8_rocksdb_KeysIterator;
struct __pyx_obj_7rocksdb_8_rocksdb_ValuesIterator;
struct __pyx_obj_7rocksdb_8_rocksdb_ItemsIterator;
struct __pyx_obj_7rocksdb_8_rocksdb_ReversedIterator;
struct __pyx_obj_7rocksdb_8_rocksdb_BackupEngine;

/* "comparator.pxd":13
 *     cdef extern const Comparator* BytewiseComparator() nogil except +
 * 
 * ctypedef int (*compare_func)(             # <<<<<<<<<<<<<<
 *     void*,
 *     Logger*,
 */
typedef int (*__pyx_t_7rocksdb_10comparator_compare_func)(void *, rocksdb::Logger *, std::string &, rocksdb::Slice const &, rocksdb::Slice const &);

/* "merge_operator.pxd":12
 *         pass
 * 
 * ctypedef cpp_bool (*merge_func)(             # <<<<<<<<<<<<<<
 *     void*,
 *     const Slice&,
 */
typedef bool (*__pyx_t_7rocksdb_14merge_operator_merge_func)(void *, rocksdb::Slice const &, rocksdb::Slice const *, rocksdb::Slice const &, std::string *, rocksdb::Logger *);

/* "merge_operator.pxd":20
 *     Logger*)
 * 
 * ctypedef cpp_bool (*full_merge_func)(             # <<<<<<<<<<<<<<
 *     void* ctx,
 *     const Slice& key,
 */
typedef bool (*__pyx_t_7rocksdb_14merge_operator_full_merge_func)(void *, rocksdb::Slice const &, rocksdb::Slice const *, std::deque<std::string>  const &, std::string *, rocksdb::Logger *);

/* "merge_operator.pxd":28
 *     Logger* logger)
 * 
 * ctypedef cpp_bool (*partial_merge_func)(             # <<<<<<<<<<<<<<
 *     void* ctx,
 *     const Slice& key,
 */
typedef bool (*__pyx_t_7rocksdb_14merge_operator_partial_merge_func)(void *, rocksdb::Slice const &, rocksdb::Slice const &, rocksdb::Slice const &, std::string *, rocksdb::Logger *);

/* "slice_transform.pxd":11
 *         pass
 * 
 * ctypedef Slice (*transform_func)(             # <<<<<<<<<<<<<<
 *     void*,
 *     Logger*,
 */
typedef rocksdb::Slice (*__pyx_t_7rocksdb_15slice_transform_transform_func)(void *, rocksdb::Logger *, std::string &, rocksdb::Slice const &);

/* "slice_transform.pxd":17
 *     const Slice&)
 * 
 * ctypedef cpp_bool (*in_domain_func)(             # <<<<<<<<<<<<<<
 *     void*,
 *     Logger*,
 */
typedef bool (*__pyx_t_7rocksdb_15slice_transform_in_domain_func)(void *, rocksdb::Logger *, std::string &, rocksdb::Slice const &);

/* "slice_transform.pxd":23
 *     const Slice&)
 * 
 * ctypedef cpp_bool (*in_range_func)(             # <<<<<<<<<<<<<<
 *     void*,
 *     Logger*,
 */
typedef bool (*__pyx_t_7rocksdb_15slice_transform_in_range_func)(void *, rocksdb::Logger *, std::string &, rocksdb::Slice const &);

/* "filter_policy.pxd":16
 *     cdef extern const FilterPolicy* NewBloomFilterPolicy(int) nogil except+
 * 
 * ctypedef void (*create_filter_func)(             # <<<<<<<<<<<<<<
 *     void*,
 *     Logger*,
 */
typedef void (*__pyx_t_7rocksdb_13filter_policy_create_filter_func)(void *, rocksdb::Logger *, std::string &, rocksdb::Slice const *, int, std::string *);

/* "filter_policy.pxd":24
 *     string*)
 * 
 * ctypedef cpp_bool (*key_may_match_func)(             # <<<<<<<<<<<<<<
 *     void*,
 *     Logger*,
 */
typedef bool (*__pyx_t_7rocksdb_13filter_policy_key_may_match_func)(void *, rocksdb::Logger *, std::string &, rocksdb::Slice const &, rocksdb::Slice const &);

/* "rocksdb/_rocksdb.pyx":54
 * import errors
 * 
 * ctypedef const filter_policy.FilterPolicy ConstFilterPolicy             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "cpp/utils.hpp" namespace "py_rocks":
 */
typedef rocksdb::FilterPolicy const __pyx_t_7rocksdb_8_rocksdb_ConstFilterPolicy;

/* "rocksdb/_rocksdb.pyx":124
 * ## Here comes the stuff for the comparator
 * @cython.internal
 * cdef class PyComparator(object):             # <<<<<<<<<<<<<<
 *     cdef object get_ob(self):
 *         return None
 */
struct __pyx_obj_7rocksdb_8_rocksdb_PyComparator {
  PyObject_HEAD
  struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyComparator *__pyx_vtab;
};


/* "rocksdb/_rocksdb.pyx":135
 * 
 * @cython.internal
 * cdef class PyGenericComparator(PyComparator):             # <<<<<<<<<<<<<<
 *     cdef comparator.ComparatorWrapper* comparator_ptr
 *     cdef object ob
 */
struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericComparator {
  struct __pyx_obj_7rocksdb_8_rocksdb_PyComparator __pyx_base;
  py_rocks::ComparatorWrapper *comparator_ptr;
  PyObject *ob;
};


/* "rocksdb/_rocksdb.pyx":164
 * 
 * @cython.internal
 * cdef class PyBytewiseComparator(PyComparator):             # <<<<<<<<<<<<<<
 *     cdef const comparator.Comparator* comparator_ptr
 * 
 */
struct __pyx_obj_7rocksdb_8_rocksdb_PyBytewiseComparator {
  struct __pyx_obj_7rocksdb_8_rocksdb_PyComparator __pyx_base;
  rocksdb::Comparator const *comparator_ptr;
};


/* "rocksdb/_rocksdb.pyx":207
 * ## Here comes the stuff for the filter policy
 * @cython.internal
 * cdef class PyFilterPolicy(object):             # <<<<<<<<<<<<<<
 *     cdef object get_ob(self):
 *         return None
 */
struct __pyx_obj_7rocksdb_8_rocksdb_PyFilterPolicy {
  PyObject_HEAD
  struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyFilterPolicy *__pyx_vtab;
};


/* "rocksdb/_rocksdb.pyx":218
 * 
 * @cython.internal
 * cdef class PyGenericFilterPolicy(PyFilterPolicy):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[filter_policy.FilterPolicyWrapper] policy
 *     cdef object ob
 */
struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericFilterPolicy {
  struct __pyx_obj_7rocksdb_8_rocksdb_PyFilterPolicy __pyx_base;
  std::shared_ptr<py_rocks::FilterPolicyWrapper>  policy;
  PyObject *ob;
};


/* "rocksdb/_rocksdb.pyx":277
 * 
 * @cython.internal
 * cdef class PyBloomFilterPolicy(PyFilterPolicy):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[ConstFilterPolicy] policy
 * 
 */
struct __pyx_obj_7rocksdb_8_rocksdb_PyBloomFilterPolicy {
  struct __pyx_obj_7rocksdb_8_rocksdb_PyFilterPolicy __pyx_base;
  std::shared_ptr<__pyx_t_7rocksdb_8_rocksdb_ConstFilterPolicy>  policy;
};


/* "rocksdb/_rocksdb.pyx":318
 * ## Here comes the stuff for the merge operator
 * @cython.internal
 * cdef class PyMergeOperator(object):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[merge_operator.MergeOperator] merge_op
 *     cdef object ob
 */
struct __pyx_obj_7rocksdb_8_rocksdb_PyMergeOperator {
  PyObject_HEAD
  struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyMergeOperator *__pyx_vtab;
  std::shared_ptr<rocksdb::MergeOperator>  merge_op;
  PyObject *ob;
};


/* "rocksdb/_rocksdb.pyx":455
 * #### Here comes the Cache stuff
 * @cython.internal
 * cdef class PyCache(object):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[cache.Cache] get_cache(self):
 *         return shared_ptr[cache.Cache]()
 */
struct __pyx_obj_7rocksdb_8_rocksdb_PyCache {
  PyObject_HEAD
  struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyCache *__pyx_vtab;
};


/* "rocksdb/_rocksdb.pyx":460
 * 
 * @cython.internal
 * cdef class PyLRUCache(PyCache):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[cache.Cache] cache_ob
 * 
 */
struct __pyx_obj_7rocksdb_8_rocksdb_PyLRUCache {
  struct __pyx_obj_7rocksdb_8_rocksdb_PyCache __pyx_base;
  std::shared_ptr<rocksdb::Cache>  cache_ob;
};


/* "rocksdb/_rocksdb.pyx":477
 * ### Here comes the stuff for SliceTransform
 * @cython.internal
 * cdef class PySliceTransform(object):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[slice_transform.SliceTransform] transfomer
 *     cdef object ob
 */
struct __pyx_obj_7rocksdb_8_rocksdb_PySliceTransform {
  PyObject_HEAD
  struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PySliceTransform *__pyx_vtab;
  std::shared_ptr<rocksdb::SliceTransform>  transfomer;
  PyObject *ob;
};


/* "rocksdb/_rocksdb.pyx":559
 * ## Here are the TableFactories
 * @cython.internal
 * cdef class PyTableFactory(object):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[table_factory.TableFactory] factory
 * 
 */
struct __pyx_obj_7rocksdb_8_rocksdb_PyTableFactory {
  PyObject_HEAD
  struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyTableFactory *__pyx_vtab;
  std::shared_ptr<rocksdb::TableFactory>  factory;
};


/* "rocksdb/_rocksdb.pyx":568
 *         pass
 * 
 * cdef class BlockBasedTableFactory(PyTableFactory):             # <<<<<<<<<<<<<<
 *     cdef PyFilterPolicy py_filter_policy
 * 
 */
struct __pyx_obj_7rocksdb_8_rocksdb_BlockBasedTableFactory {
  struct __pyx_obj_7rocksdb_8_rocksdb_PyTableFactory __pyx_base;
  struct __pyx_obj_7rocksdb_8_rocksdb_PyFilterPolicy *py_filter_policy;
};


/* "rocksdb/_rocksdb.pyx":650
 *             self.py_filter_policy.set_info_log(info_log)
 * 
 * cdef class PlainTableFactory(PyTableFactory):             # <<<<<<<<<<<<<<
 *     def __init__(
 *             self,
 */
struct __pyx_obj_7rocksdb_8_rocksdb_PlainTableFactory {
  struct __pyx_obj_7rocksdb_8_rocksdb_PyTableFactory __pyx_base;
};


/* "rocksdb/_rocksdb.pyx":685
 * ### Here are the MemtableFactories
 * @cython.internal
 * cdef class PyMemtableFactory(object):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[memtablerep.MemTableRepFactory] factory
 * 
 */
struct __pyx_obj_7rocksdb_8_rocksdb_PyMemtableFactory {
  PyObject_HEAD
  struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyMemtableFactory *__pyx_vtab;
  std::shared_ptr<rocksdb::MemTableRepFactory>  factory;
};


/* "rocksdb/_rocksdb.pyx":691
 *         return self.factory
 * 
 * cdef class SkipListMemtableFactory(PyMemtableFactory):             # <<<<<<<<<<<<<<
 *     def __init__(self):
 *         self.factory.reset(memtablerep.NewSkipListFactory())
 */
struct __pyx_obj_7rocksdb_8_rocksdb_SkipListMemtableFactory {
  struct __pyx_obj_7rocksdb_8_rocksdb_PyMemtableFactory __pyx_base;
};


/* "rocksdb/_rocksdb.pyx":695
 *         self.factory.reset(memtablerep.NewSkipListFactory())
 * 
 * cdef class VectorMemtableFactory(PyMemtableFactory):             # <<<<<<<<<<<<<<
 *     def __init__(self, count=0):
 *         self.factory.reset(memtablerep.NewVectorRepFactory(count))
 */
struct __pyx_obj_7rocksdb_8_rocksdb_VectorMemtableFactory {
  struct __pyx_obj_7rocksdb_8_rocksdb_PyMemtableFactory __pyx_base;
};


/* "rocksdb/_rocksdb.pyx":699
 *         self.factory.reset(memtablerep.NewVectorRepFactory(count))
 * 
 * cdef class HashSkipListMemtableFactory(PyMemtableFactory):             # <<<<<<<<<<<<<<
 *     def __init__(
 *             self,
 */
struct __pyx_obj_7rocksdb_8_rocksdb_HashSkipListMemtableFactory {
  struct __pyx_obj_7rocksdb_8_rocksdb_PyMemtableFactory __pyx_base;
};


/* "rocksdb/_rocksdb.pyx":712
 *                 skiplist_branching_factor))
 * 
 * cdef class HashLinkListMemtableFactory(PyMemtableFactory):             # <<<<<<<<<<<<<<
 *     def __init__(self, bucket_count=50000):
 *         self.factory.reset(memtablerep.NewHashLinkListRepFactory(bucket_count))
 */
struct __pyx_obj_7rocksdb_8_rocksdb_HashLinkListMemtableFactory {
  struct __pyx_obj_7rocksdb_8_rocksdb_PyMemtableFactory __pyx_base;
};


/* "rocksdb/_rocksdb.pyx":718
 * 
 * 
 * cdef class CompressionType(object):             # <<<<<<<<<<<<<<
 *     no_compression = u'no_compression'
 *     snappy_compression = u'snappy_compression'
 */
struct __pyx_obj_7rocksdb_8_rocksdb_CompressionType {
  PyObject_HEAD
};


/* "rocksdb/_rocksdb.pyx":730
 *     disable_compression = u'disable_compression'
 * 
 * cdef class CompactionPri(object):             # <<<<<<<<<<<<<<
 *     by_compensated_size = u'by_compensated_size'
 *     oldest_largest_seq_first = u'oldest_largest_seq_first'
 */
struct __pyx_obj_7rocksdb_8_rocksdb_CompactionPri {
  PyObject_HEAD
};


/* "rocksdb/_rocksdb.pyx":736
 *     min_overlapping_ratio = u'min_overlapping_ratio'
 * 
 * cdef class Options(object):             # <<<<<<<<<<<<<<
 *     cdef options.Options* opts
 *     cdef PyComparator py_comparator
 */
struct __pyx_obj_7rocksdb_8_rocksdb_Options {
  PyObject_HEAD
  rocksdb::Options *opts;
  struct __pyx_obj_7rocksdb_8_rocksdb_PyComparator *py_comparator;
  struct __pyx_obj_7rocksdb_8_rocksdb_PyMergeOperator *py_merge_operator;
  struct __pyx_obj_7rocksdb_8_rocksdb_PySliceTransform *py_prefix_extractor;
  struct __pyx_obj_7rocksdb_8_rocksdb_PyTableFactory *py_table_factory;
  struct __pyx_obj_7rocksdb_8_rocksdb_PyMemtableFactory *py_memtable_factory;
  struct __pyx_obj_7rocksdb_8_rocksdb_PyCache *py_row_cache;
  bool in_use;
};


/* "rocksdb/_rocksdb.pyx":1332
 * cdef class WriteBatchIterator
 * 
 * cdef class WriteBatch(object):             # <<<<<<<<<<<<<<
 *     cdef db.WriteBatch* batch
 * 
 */
struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatch {
  PyObject_HEAD
  rocksdb::WriteBatch *batch;
};


/* "rocksdb/_rocksdb.pyx":1330
 * 
 * # Forward declaration
 * cdef class WriteBatchIterator             # <<<<<<<<<<<<<<
 * 
 * cdef class WriteBatch(object):
 */
struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatchIterator {
  PyObject_HEAD
  struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatch *batch;
  std::vector<py_rocks::RecordItemsHandler::BatchItem>  items;
  size_t pos;
};


/* "rocksdb/_rocksdb.pyx":1410
 * 
 * @cython.no_gc_clear
 * cdef class DB(object):             # <<<<<<<<<<<<<<
 *     cdef Options opts
 *     cdef db.DB* db
 */
struct __pyx_obj_7rocksdb_8_rocksdb_DB {
  PyObject_HEAD
  struct __pyx_vtabstruct_7rocksdb_8_rocksdb_DB *__pyx_vtab;
  struct __pyx_obj_7rocksdb_8_rocksdb_Options *opts;
  rocksdb::DB *db;
};


/* "rocksdb/_rocksdb.pyx":1322
 * 
 * # Forward declaration
 * cdef class Snapshot             # <<<<<<<<<<<<<<
 * 
 * cdef class KeysIterator
 */
struct __pyx_obj_7rocksdb_8_rocksdb_Snapshot {
  PyObject_HEAD
  rocksdb::Snapshot const *ptr;
  struct __pyx_obj_7rocksdb_8_rocksdb_DB *db;
};


/* "rocksdb/_rocksdb.pyx":1758
 * 
 * @cython.internal
 * cdef class BaseIterator(object):             # <<<<<<<<<<<<<<
 *     cdef iterator.Iterator* ptr
 *     cdef DB db
 */
struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator {
  PyObject_HEAD
  struct __pyx_vtabstruct_7rocksdb_8_rocksdb_BaseIterator *__pyx_vtab;
  rocksdb::Iterator *ptr;
  struct __pyx_obj_7rocksdb_8_rocksdb_DB *db;
};


/* "rocksdb/_rocksdb.pyx":1324
 * cdef class Snapshot
 * 
 * cdef class KeysIterator             # <<<<<<<<<<<<<<
 * cdef class ValuesIterator
 * cdef class ItemsIterator
 */
struct __pyx_obj_7rocksdb_8_rocksdb_KeysIterator {
  struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator __pyx_base;
};


/* "rocksdb/_rocksdb.pyx":1325
 * 
 * cdef class KeysIterator
 * cdef class ValuesIterator             # <<<<<<<<<<<<<<
 * cdef class ItemsIterator
 * cdef class ReversedIterator
 */
struct __pyx_obj_7rocksdb_8_rocksdb_ValuesIterator {
  struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator __pyx_base;
};


/* "rocksdb/_rocksdb.pyx":1326
 * cdef class KeysIterator
 * cdef class ValuesIterator
 * cdef class ItemsIterator             # <<<<<<<<<<<<<<
 * cdef class ReversedIterator
 * 
 */
struct __pyx_obj_7rocksdb_8_rocksdb_ItemsIterator {
  struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator __pyx_base;
};


/* "rocksdb/_rocksdb.pyx":1327
 * cdef class ValuesIterator
 * cdef class ItemsIterator
 * cdef class ReversedIterator             # <<<<<<<<<<<<<<
 * 
 * # Forward declaration
 */
struct __pyx_obj_7rocksdb_8_rocksdb_ReversedIterator {
  PyObject_HEAD
  struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *it;
};


/* "rocksdb/_rocksdb.pyx":1882
 *         return ret
 * 
 * cdef class BackupEngine(object):             # <<<<<<<<<<<<<<
 *     cdef backup.BackupEngine* engine
 * 
 */
struct __pyx_obj_7rocksdb_8_rocksdb_BackupEngine {
  PyObject_HEAD
  rocksdb::BackupEngine *engine;
};



/* "rocksdb/_rocksdb.pyx":124
 * ## Here comes the stuff for the comparator
 * @cython.internal
 * cdef class PyComparator(object):             # <<<<<<<<<<<<<<
 *     cdef object get_ob(self):
 *         return None
 */

struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyComparator {
  PyObject *(*get_ob)(struct __pyx_obj_7rocksdb_8_rocksdb_PyComparator *);
  rocksdb::Comparator const *(*get_comparator)(struct __pyx_obj_7rocksdb_8_rocksdb_PyComparator *);
  PyObject *(*set_info_log)(struct __pyx_obj_7rocksdb_8_rocksdb_PyComparator *, std::shared_ptr<rocksdb::Logger> );
};
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyComparator *__pyx_vtabptr_7rocksdb_8_rocksdb_PyComparator;


/* "rocksdb/_rocksdb.pyx":135
 * 
 * @cython.internal
 * cdef class PyGenericComparator(PyComparator):             # <<<<<<<<<<<<<<
 *     cdef comparator.ComparatorWrapper* comparator_ptr
 *     cdef object ob
 */

struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyGenericComparator {
  struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyComparator __pyx_base;
};
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyGenericComparator *__pyx_vtabptr_7rocksdb_8_rocksdb_PyGenericComparator;


/* "rocksdb/_rocksdb.pyx":164
 * 
 * @cython.internal
 * cdef class PyBytewiseComparator(PyComparator):             # <<<<<<<<<<<<<<
 *     cdef const comparator.Comparator* comparator_ptr
 * 
 */

struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyBytewiseComparator {
  struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyComparator __pyx_base;
};
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyBytewiseComparator *__pyx_vtabptr_7rocksdb_8_rocksdb_PyBytewiseComparator;


/* "rocksdb/_rocksdb.pyx":207
 * ## Here comes the stuff for the filter policy
 * @cython.internal
 * cdef class PyFilterPolicy(object):             # <<<<<<<<<<<<<<
 *     cdef object get_ob(self):
 *         return None
 */

struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyFilterPolicy {
  PyObject *(*get_ob)(struct __pyx_obj_7rocksdb_8_rocksdb_PyFilterPolicy *);
  std::shared_ptr<__pyx_t_7rocksdb_8_rocksdb_ConstFilterPolicy>  (*get_policy)(struct __pyx_obj_7rocksdb_8_rocksdb_PyFilterPolicy *);
  PyObject *(*set_info_log)(struct __pyx_obj_7rocksdb_8_rocksdb_PyFilterPolicy *, std::shared_ptr<rocksdb::Logger> );
};
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyFilterPolicy *__pyx_vtabptr_7rocksdb_8_rocksdb_PyFilterPolicy;


/* "rocksdb/_rocksdb.pyx":218
 * 
 * @cython.internal
 * cdef class PyGenericFilterPolicy(PyFilterPolicy):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[filter_policy.FilterPolicyWrapper] policy
 *     cdef object ob
 */

struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyGenericFilterPolicy {
  struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyFilterPolicy __pyx_base;
};
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyGenericFilterPolicy *__pyx_vtabptr_7rocksdb_8_rocksdb_PyGenericFilterPolicy;


/* "rocksdb/_rocksdb.pyx":277
 * 
 * @cython.internal
 * cdef class PyBloomFilterPolicy(PyFilterPolicy):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[ConstFilterPolicy] policy
 * 
 */

struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyBloomFilterPolicy {
  struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyFilterPolicy __pyx_base;
};
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyBloomFilterPolicy *__pyx_vtabptr_7rocksdb_8_rocksdb_PyBloomFilterPolicy;


/* "rocksdb/_rocksdb.pyx":318
 * ## Here comes the stuff for the merge operator
 * @cython.internal
 * cdef class PyMergeOperator(object):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[merge_operator.MergeOperator] merge_op
 *     cdef object ob
 */

struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyMergeOperator {
  PyObject *(*get_ob)(struct __pyx_obj_7rocksdb_8_rocksdb_PyMergeOperator *);
  std::shared_ptr<rocksdb::MergeOperator>  (*get_operator)(struct __pyx_obj_7rocksdb_8_rocksdb_PyMergeOperator *);
};
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyMergeOperator *__pyx_vtabptr_7rocksdb_8_rocksdb_PyMergeOperator;


/* "rocksdb/_rocksdb.pyx":455
 * #### Here comes the Cache stuff
 * @cython.internal
 * cdef class PyCache(object):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[cache.Cache] get_cache(self):
 *         return shared_ptr[cache.Cache]()
 */

struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyCache {
  std::shared_ptr<rocksdb::Cache>  (*get_cache)(struct __pyx_obj_7rocksdb_8_rocksdb_PyCache *);
};
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyCache *__pyx_vtabptr_7rocksdb_8_rocksdb_PyCache;


/* "rocksdb/_rocksdb.pyx":460
 * 
 * @cython.internal
 * cdef class PyLRUCache(PyCache):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[cache.Cache] cache_ob
 * 
 */

struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyLRUCache {
  struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyCache __pyx_base;
};
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyLRUCache *__pyx_vtabptr_7rocksdb_8_rocksdb_PyLRUCache;


/* "rocksdb/_rocksdb.pyx":477
 * ### Here comes the stuff for SliceTransform
 * @cython.internal
 * cdef class PySliceTransform(object):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[slice_transform.SliceTransform] transfomer
 *     cdef object ob
 */

struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PySliceTransform {
  PyObject *(*get_ob)(struct __pyx_obj_7rocksdb_8_rocksdb_PySliceTransform *);
  std::shared_ptr<rocksdb::SliceTransform>  (*get_transformer)(struct __pyx_obj_7rocksdb_8_rocksdb_PySliceTransform *);
  PyObject *(*set_info_log)(struct __pyx_obj_7rocksdb_8_rocksdb_PySliceTransform *, std::shared_ptr<rocksdb::Logger> );
};
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PySliceTransform *__pyx_vtabptr_7rocksdb_8_rocksdb_PySliceTransform;


/* "rocksdb/_rocksdb.pyx":559
 * ## Here are the TableFactories
 * @cython.internal
 * cdef class PyTableFactory(object):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[table_factory.TableFactory] factory
 * 
 */

struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyTableFactory {
  std::shared_ptr<rocksdb::TableFactory>  (*get_table_factory)(struct __pyx_obj_7rocksdb_8_rocksdb_PyTableFactory *);
  PyObject *(*set_info_log)(struct __pyx_obj_7rocksdb_8_rocksdb_PyTableFactory *, std::shared_ptr<rocksdb::Logger> );
};
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyTableFactory *__pyx_vtabptr_7rocksdb_8_rocksdb_PyTableFactory;


/* "rocksdb/_rocksdb.pyx":568
 *         pass
 * 
 * cdef class BlockBasedTableFactory(PyTableFactory):             # <<<<<<<<<<<<<<
 *     cdef PyFilterPolicy py_filter_policy
 * 
 */

struct __pyx_vtabstruct_7rocksdb_8_rocksdb_BlockBasedTableFactory {
  struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyTableFactory __pyx_base;
};
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_BlockBasedTableFactory *__pyx_vtabptr_7rocksdb_8_rocksdb_BlockBasedTableFactory;


/* "rocksdb/_rocksdb.pyx":650
 *             self.py_filter_policy.set_info_log(info_log)
 * 
 * cdef class PlainTableFactory(PyTableFactory):             # <<<<<<<<<<<<<<
 *     def __init__(
 *             self,
 */

struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PlainTableFactory {
  struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyTableFactory __pyx_base;
};
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PlainTableFactory *__pyx_vtabptr_7rocksdb_8_rocksdb_PlainTableFactory;


/* "rocksdb/_rocksdb.pyx":685
 * ### Here are the MemtableFactories
 * @cython.internal
 * cdef class PyMemtableFactory(object):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[memtablerep.MemTableRepFactory] factory
 * 
 */

struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyMemtableFactory {
  std::shared_ptr<rocksdb::MemTableRepFactory>  (*get_memtable_factory)(struct __pyx_obj_7rocksdb_8_rocksdb_PyMemtableFactory *);
};
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyMemtableFactory *__pyx_vtabptr_7rocksdb_8_rocksdb_PyMemtableFactory;


/* "rocksdb/_rocksdb.pyx":691
 *         return self.factory
 * 
 * cdef class SkipListMemtableFactory(PyMemtableFactory):             # <<<<<<<<<<<<<<
 *     def __init__(self):
 *         self.factory.reset(memtablerep.NewSkipListFactory())
 */

struct __pyx_vtabstruct_7rocksdb_8_rocksdb_SkipListMemtableFactory {
  struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyMemtableFactory __pyx_base;
};
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_SkipListMemtableFactory *__pyx_vtabptr_7rocksdb_8_rocksdb_SkipListMemtableFactory;


/* "rocksdb/_rocksdb.pyx":695
 *         self.factory.reset(memtablerep.NewSkipListFactory())
 * 
 * cdef class VectorMemtableFactory(PyMemtableFactory):             # <<<<<<<<<<<<<<
 *     def __init__(self, count=0):
 *         self.factory.reset(memtablerep.NewVectorRepFactory(count))
 */

struct __pyx_vtabstruct_7rocksdb_8_rocksdb_VectorMemtableFactory {
  struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyMemtableFactory __pyx_base;
};
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_VectorMemtableFactory *__pyx_vtabptr_7rocksdb_8_rocksdb_VectorMemtableFactory;


/* "rocksdb/_rocksdb.pyx":699
 *         self.factory.reset(memtablerep.NewVectorRepFactory(count))
 * 
 * cdef class HashSkipListMemtableFactory(PyMemtableFactory):             # <<<<<<<<<<<<<<
 *     def __init__(
 *             self,
 */

struct __pyx_vtabstruct_7rocksdb_8_rocksdb_HashSkipListMemtableFactory {
  struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyMemtableFactory __pyx_base;
};
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_HashSkipListMemtableFactory *__pyx_vtabptr_7rocksdb_8_rocksdb_HashSkipListMemtableFactory;


/* "rocksdb/_rocksdb.pyx":712
 *                 skiplist_branching_factor))
 * 
 * cdef class HashLinkListMemtableFactory(PyMemtableFactory):             # <<<<<<<<<<<<<<
 *     def __init__(self, bucket_count=50000):
 *         self.factory.reset(memtablerep.NewHashLinkListRepFactory(bucket_count))
 */

struct __pyx_vtabstruct_7rocksdb_8_rocksdb_HashLinkListMemtableFactory {
  struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyMemtableFactory __pyx_base;
};
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_HashLinkListMemtableFactory *__pyx_vtabptr_7rocksdb_8_rocksdb_HashLinkListMemtableFactory;


/* "rocksdb/_rocksdb.pyx":1758
 * 
 * @cython.internal
 * cdef class BaseIterator(object):             # <<<<<<<<<<<<<<
 *     cdef iterator.Iterator* ptr
 *     cdef DB db
 */

struct __pyx_vtabstruct_7rocksdb_8_rocksdb_BaseIterator {
  PyObject *(*seek_to_first)(struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *, int __pyx_skip_dispatch);
  PyObject *(*seek_to_last)(struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *, int __pyx_skip_dispatch);
  PyObject *(*seek)(struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*seek_for_prev)(struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*get_ob)(struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *);
};
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_BaseIterator *__pyx_vtabptr_7rocksdb_8_rocksdb_BaseIterator;


/* "rocksdb/_rocksdb.pyx":1816
 * 
 * @cython.internal
 * cdef class KeysIterator(BaseIterator):             # <<<<<<<<<<<<<<
 *     cdef object get_ob(self):
 *         cdef Slice c_key
 */

struct __pyx_vtabstruct_7rocksdb_8_rocksdb_KeysIterator {
  struct __pyx_vtabstruct_7rocksdb_8_rocksdb_BaseIterator __pyx_base;
};
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_KeysIterator *__pyx_vtabptr_7rocksdb_8_rocksdb_KeysIterator;


/* "rocksdb/_rocksdb.pyx":1825
 * 
 * @cython.internal
 * cdef class ValuesIterator(BaseIterator):             # <<<<<<<<<<<<<<
 *     cdef object get_ob(self):
 *         cdef Slice c_value
 */

struct __pyx_vtabstruct_7rocksdb_8_rocksdb_ValuesIterator {
  struct __pyx_vtabstruct_7rocksdb_8_rocksdb_BaseIterator __pyx_base;
};
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_ValuesIterator *__pyx_vtabptr_7rocksdb_8_rocksdb_ValuesIterator;


/* "rocksdb/_rocksdb.pyx":1834
 * 
 * @cython.internal
 * cdef class ItemsIterator(BaseIterator):             # <<<<<<<<<<<<<<
 *     cdef object get_ob(self):
 *         cdef Slice c_key
 */

struct __pyx_vtabstruct_7rocksdb_8_rocksdb_ItemsIterator {
  struct __pyx_vtabstruct_7rocksdb_8_rocksdb_BaseIterator __pyx_base;
};
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_ItemsIterator *__pyx_vtabptr_7rocksdb_8_rocksdb_ItemsIterator;


/* "rocksdb/_rocksdb.pyx":1410
 * 
 * @cython.no_gc_clear
 * cdef class DB(object):             # <<<<<<<<<<<<<<
 *     cdef Options opts
 *     cdef db.DB* db
 */

struct __pyx_vtabstruct_7rocksdb_8_rocksdb_DB {
  rocksdb::ReadOptions (*build_read_opts)(struct __pyx_obj_7rocksdb_8_rocksdb_DB *, PyObject *);
};
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_DB *__pyx_vtabptr_7rocksdb_8_rocksdb_DB;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* GetModuleGlobalName.proto */
static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name);

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = PyThreadState_GET();
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* KeywordStringCheck.proto */
static CYTHON_INLINE int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

/* ForceInitThreads.proto */
#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* ArgTypeTest.proto */
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact);

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* StrEquals.proto */
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyString_Equals __Pyx_PyUnicode_Equals
#else
#define __Pyx_PyString_Equals __Pyx_PyBytes_Equals
#endif

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* py_dict_items.proto */
static CYTHON_INLINE PyObject* __Pyx_PyDict_Items(PyObject* d);

/* UnpackUnboundCMethod.proto */
typedef struct {
    PyObject *type;
    PyObject **method_name;
    PyCFunction func;
    PyObject *method;
    int flag;
} __Pyx_CachedCFunction;

/* CallUnboundCMethod0.proto */
static PyObject* __Pyx__CallUnboundCMethod0(__Pyx_CachedCFunction* cfunc, PyObject* self);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CallUnboundCMethod0(cfunc, self)\
    ((likely((cfunc)->func)) ?\
        (likely((cfunc)->flag == METH_NOARGS) ?  (*((cfunc)->func))(self, NULL) :\
         (likely((cfunc)->flag == (METH_VARARGS | METH_KEYWORDS)) ?  ((*(PyCFunctionWithKeywords)(cfunc)->func)(self, __pyx_empty_tuple, NULL)) :\
             ((cfunc)->flag == METH_VARARGS ?  (*((cfunc)->func))(self, __pyx_empty_tuple) :\
              (PY_VERSION_HEX >= 0x030600B1 && (cfunc)->flag == METH_FASTCALL ?  (*(__Pyx_PyCFunctionFast)(cfunc)->func)(self, &PyTuple_GET_ITEM(__pyx_empty_tuple, 0), 0, NULL) :\
                __Pyx__CallUnboundCMethod0(cfunc, self))))) :\
        __Pyx__CallUnboundCMethod0(cfunc, self))
#else
#define __Pyx_CallUnboundCMethod0(cfunc, self)  __Pyx__CallUnboundCMethod0(cfunc, self)
#endif

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* PyDictContains.proto */
static CYTHON_INLINE int __Pyx_PyDict_ContainsTF(PyObject* item, PyObject* dict, int eq) {
    int result = PyDict_Contains(dict, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            PyObject* args = PyTuple_Pack(1, key);
            if (likely(args))
                PyErr_SetObject(PyExc_KeyError, args);
            Py_XDECREF(args);
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#else
    #define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#endif

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname);

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* dict_getitem_default.proto */
static PyObject* __Pyx_PyDict_GetItemDefault(PyObject* d, PyObject* key, PyObject* default_value);

/* CallNextTpTraverse.proto */
static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse);

/* CallNextTpClear.proto */
static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_dealloc);

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* GetNameInClass.proto */
static PyObject *__Pyx_GetNameInClass(PyObject *nmspace, PyObject *name);

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* None.proto */
#include <new>

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint64_t(uint64_t value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint32_t(uint32_t value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_rocksdb_3a__3a_CompressionType(rocksdb::CompressionType value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int64_t(int64_t value);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE uint32_t __Pyx_PyInt_As_uint32_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int32_t __Pyx_PyInt_As_int32_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE uint64_t __Pyx_PyInt_As_uint64_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* PyIdentifierFromString.proto */
#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

/* ModuleImport.proto */
static PyObject *__Pyx_ImportModule(const char *name);

/* TypeImport.proto */
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, size_t size, int strict);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static PyObject *__pyx_f_7rocksdb_8_rocksdb_12PyComparator_get_ob(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_PyComparator *__pyx_v_self); /* proto*/
static rocksdb::Comparator const *__pyx_f_7rocksdb_8_rocksdb_12PyComparator_get_comparator(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_PyComparator *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_7rocksdb_8_rocksdb_12PyComparator_set_info_log(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_PyComparator *__pyx_v_self, CYTHON_UNUSED std::shared_ptr<rocksdb::Logger>  __pyx_v_info_log); /* proto*/
static PyObject *__pyx_f_7rocksdb_8_rocksdb_19PyGenericComparator_get_ob(struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericComparator *__pyx_v_self); /* proto*/
static rocksdb::Comparator const *__pyx_f_7rocksdb_8_rocksdb_19PyGenericComparator_get_comparator(struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericComparator *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_7rocksdb_8_rocksdb_19PyGenericComparator_set_info_log(struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericComparator *__pyx_v_self, std::shared_ptr<rocksdb::Logger>  __pyx_v_info_log); /* proto*/
static PyObject *__pyx_f_7rocksdb_8_rocksdb_20PyBytewiseComparator_get_ob(struct __pyx_obj_7rocksdb_8_rocksdb_PyBytewiseComparator *__pyx_v_self); /* proto*/
static rocksdb::Comparator const *__pyx_f_7rocksdb_8_rocksdb_20PyBytewiseComparator_get_comparator(struct __pyx_obj_7rocksdb_8_rocksdb_PyBytewiseComparator *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_7rocksdb_8_rocksdb_14PyFilterPolicy_get_ob(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_PyFilterPolicy *__pyx_v_self); /* proto*/
static std::shared_ptr<__pyx_t_7rocksdb_8_rocksdb_ConstFilterPolicy>  __pyx_f_7rocksdb_8_rocksdb_14PyFilterPolicy_get_policy(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_PyFilterPolicy *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_7rocksdb_8_rocksdb_14PyFilterPolicy_set_info_log(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_PyFilterPolicy *__pyx_v_self, CYTHON_UNUSED std::shared_ptr<rocksdb::Logger>  __pyx_v_info_log); /* proto*/
static PyObject *__pyx_f_7rocksdb_8_rocksdb_21PyGenericFilterPolicy_get_ob(struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericFilterPolicy *__pyx_v_self); /* proto*/
static std::shared_ptr<__pyx_t_7rocksdb_8_rocksdb_ConstFilterPolicy>  __pyx_f_7rocksdb_8_rocksdb_21PyGenericFilterPolicy_get_policy(struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericFilterPolicy *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_7rocksdb_8_rocksdb_21PyGenericFilterPolicy_set_info_log(struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericFilterPolicy *__pyx_v_self, std::shared_ptr<rocksdb::Logger>  __pyx_v_info_log); /* proto*/
static PyObject *__pyx_f_7rocksdb_8_rocksdb_19PyBloomFilterPolicy_get_ob(struct __pyx_obj_7rocksdb_8_rocksdb_PyBloomFilterPolicy *__pyx_v_self); /* proto*/
static std::shared_ptr<__pyx_t_7rocksdb_8_rocksdb_ConstFilterPolicy>  __pyx_f_7rocksdb_8_rocksdb_19PyBloomFilterPolicy_get_policy(struct __pyx_obj_7rocksdb_8_rocksdb_PyBloomFilterPolicy *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_7rocksdb_8_rocksdb_15PyMergeOperator_get_ob(struct __pyx_obj_7rocksdb_8_rocksdb_PyMergeOperator *__pyx_v_self); /* proto*/
static std::shared_ptr<rocksdb::MergeOperator>  __pyx_f_7rocksdb_8_rocksdb_15PyMergeOperator_get_operator(struct __pyx_obj_7rocksdb_8_rocksdb_PyMergeOperator *__pyx_v_self); /* proto*/
static std::shared_ptr<rocksdb::Cache>  __pyx_f_7rocksdb_8_rocksdb_7PyCache_get_cache(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_PyCache *__pyx_v_self); /* proto*/
static std::shared_ptr<rocksdb::Cache>  __pyx_f_7rocksdb_8_rocksdb_10PyLRUCache_get_cache(struct __pyx_obj_7rocksdb_8_rocksdb_PyLRUCache *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_7rocksdb_8_rocksdb_16PySliceTransform_get_ob(struct __pyx_obj_7rocksdb_8_rocksdb_PySliceTransform *__pyx_v_self); /* proto*/
static std::shared_ptr<rocksdb::SliceTransform>  __pyx_f_7rocksdb_8_rocksdb_16PySliceTransform_get_transformer(struct __pyx_obj_7rocksdb_8_rocksdb_PySliceTransform *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_7rocksdb_8_rocksdb_16PySliceTransform_set_info_log(struct __pyx_obj_7rocksdb_8_rocksdb_PySliceTransform *__pyx_v_self, std::shared_ptr<rocksdb::Logger>  __pyx_v_info_log); /* proto*/
static std::shared_ptr<rocksdb::TableFactory>  __pyx_f_7rocksdb_8_rocksdb_14PyTableFactory_get_table_factory(struct __pyx_obj_7rocksdb_8_rocksdb_PyTableFactory *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_7rocksdb_8_rocksdb_14PyTableFactory_set_info_log(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_PyTableFactory *__pyx_v_self, CYTHON_UNUSED std::shared_ptr<rocksdb::Logger>  __pyx_v_info_log); /* proto*/
static PyObject *__pyx_f_7rocksdb_8_rocksdb_22BlockBasedTableFactory_set_info_log(struct __pyx_obj_7rocksdb_8_rocksdb_BlockBasedTableFactory *__pyx_v_self, std::shared_ptr<rocksdb::Logger>  __pyx_v_info_log); /* proto*/
static std::shared_ptr<rocksdb::MemTableRepFactory>  __pyx_f_7rocksdb_8_rocksdb_17PyMemtableFactory_get_memtable_factory(struct __pyx_obj_7rocksdb_8_rocksdb_PyMemtableFactory *__pyx_v_self); /* proto*/
static rocksdb::ReadOptions __pyx_f_7rocksdb_8_rocksdb_2DB_build_read_opts(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self, PyObject *__pyx_v_py_opts); /* proto*/
static PyObject *__pyx_f_7rocksdb_8_rocksdb_12BaseIterator_seek_to_first(struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_7rocksdb_8_rocksdb_12BaseIterator_seek_to_last(struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_7rocksdb_8_rocksdb_12BaseIterator_seek(struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *__pyx_v_self, PyObject *__pyx_v_key, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_7rocksdb_8_rocksdb_12BaseIterator_seek_for_prev(struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *__pyx_v_self, PyObject *__pyx_v_key, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_7rocksdb_8_rocksdb_12BaseIterator_get_ob(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_7rocksdb_8_rocksdb_12KeysIterator_get_ob(struct __pyx_obj_7rocksdb_8_rocksdb_KeysIterator *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_7rocksdb_8_rocksdb_14ValuesIterator_get_ob(struct __pyx_obj_7rocksdb_8_rocksdb_ValuesIterator *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_7rocksdb_8_rocksdb_13ItemsIterator_get_ob(struct __pyx_obj_7rocksdb_8_rocksdb_ItemsIterator *__pyx_v_self); /* proto*/

/* Module declarations from 'cython' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'libcpp.deque' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'cpython.version' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'libc.stdio' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'cpython.exc' */

/* Module declarations from 'cpython.module' */

/* Module declarations from 'cpython.mem' */

/* Module declarations from 'cpython.tuple' */

/* Module declarations from 'cpython.list' */

/* Module declarations from 'cpython.sequence' */

/* Module declarations from 'cpython.mapping' */

/* Module declarations from 'cpython.iterator' */

/* Module declarations from 'cpython.number' */

/* Module declarations from 'cpython.int' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.bool' */
static PyTypeObject *__pyx_ptype_7cpython_4bool_bool = 0;

/* Module declarations from 'cpython.long' */

/* Module declarations from 'cpython.float' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.complex' */
static PyTypeObject *__pyx_ptype_7cpython_7complex_complex = 0;

/* Module declarations from 'cpython.string' */

/* Module declarations from 'cpython.unicode' */

/* Module declarations from 'cpython.dict' */

/* Module declarations from 'cpython.instance' */

/* Module declarations from 'cpython.function' */

/* Module declarations from 'cpython.method' */

/* Module declarations from 'cpython.weakref' */

/* Module declarations from 'cpython.getargs' */

/* Module declarations from 'cpython.pythread' */

/* Module declarations from 'cpython.pystate' */

/* Module declarations from 'cpython.cobject' */

/* Module declarations from 'cpython.oldbuffer' */

/* Module declarations from 'cpython.set' */

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'cpython.bytes' */

/* Module declarations from 'cpython.pycapsule' */

/* Module declarations from 'cpython' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'libc.stdint' */

/* Module declarations from 'rocksdb.std_memory' */

/* Module declarations from 'rocksdb.slice_' */

/* Module declarations from 'rocksdb.logger' */

/* Module declarations from 'rocksdb.comparator' */

/* Module declarations from 'rocksdb.merge_operator' */

/* Module declarations from 'rocksdb.snapshot' */

/* Module declarations from 'rocksdb.slice_transform' */

/* Module declarations from 'rocksdb.cache' */

/* Module declarations from 'rocksdb.filter_policy' */

/* Module declarations from 'rocksdb.table_factory' */

/* Module declarations from 'rocksdb.memtablerep' */

/* Module declarations from 'rocksdb.universal_compaction' */

/* Module declarations from 'rocksdb.options' */

/* Module declarations from 'rocksdb.status' */

/* Module declarations from 'rocksdb.iterator' */

/* Module declarations from 'rocksdb.db' */

/* Module declarations from 'rocksdb.env' */

/* Module declarations from 'rocksdb.backup' */

/* Module declarations from 'rocksdb._rocksdb' */
static PyTypeObject *__pyx_ptype_7rocksdb_8_rocksdb_PyComparator = 0;
static PyTypeObject *__pyx_ptype_7rocksdb_8_rocksdb_PyGenericComparator = 0;
static PyTypeObject *__pyx_ptype_7rocksdb_8_rocksdb_PyBytewiseComparator = 0;
static PyTypeObject *__pyx_ptype_7rocksdb_8_rocksdb_PyFilterPolicy = 0;
static PyTypeObject *__pyx_ptype_7rocksdb_8_rocksdb_PyGenericFilterPolicy = 0;
static PyTypeObject *__pyx_ptype_7rocksdb_8_rocksdb_PyBloomFilterPolicy = 0;
static PyTypeObject *__pyx_ptype_7rocksdb_8_rocksdb_PyMergeOperator = 0;
static PyTypeObject *__pyx_ptype_7rocksdb_8_rocksdb_PyCache = 0;
static PyTypeObject *__pyx_ptype_7rocksdb_8_rocksdb_PyLRUCache = 0;
static PyTypeObject *__pyx_ptype_7rocksdb_8_rocksdb_PySliceTransform = 0;
static PyTypeObject *__pyx_ptype_7rocksdb_8_rocksdb_PyTableFactory = 0;
static PyTypeObject *__pyx_ptype_7rocksdb_8_rocksdb_BlockBasedTableFactory = 0;
static PyTypeObject *__pyx_ptype_7rocksdb_8_rocksdb_PlainTableFactory = 0;
static PyTypeObject *__pyx_ptype_7rocksdb_8_rocksdb_PyMemtableFactory = 0;
static PyTypeObject *__pyx_ptype_7rocksdb_8_rocksdb_SkipListMemtableFactory = 0;
static PyTypeObject *__pyx_ptype_7rocksdb_8_rocksdb_VectorMemtableFactory = 0;
static PyTypeObject *__pyx_ptype_7rocksdb_8_rocksdb_HashSkipListMemtableFactory = 0;
static PyTypeObject *__pyx_ptype_7rocksdb_8_rocksdb_HashLinkListMemtableFactory = 0;
static PyTypeObject *__pyx_ptype_7rocksdb_8_rocksdb_CompressionType = 0;
static PyTypeObject *__pyx_ptype_7rocksdb_8_rocksdb_CompactionPri = 0;
static PyTypeObject *__pyx_ptype_7rocksdb_8_rocksdb_Options = 0;
static PyTypeObject *__pyx_ptype_7rocksdb_8_rocksdb_Snapshot = 0;
static PyTypeObject *__pyx_ptype_7rocksdb_8_rocksdb_BaseIterator = 0;
static PyTypeObject *__pyx_ptype_7rocksdb_8_rocksdb_KeysIterator = 0;
static PyTypeObject *__pyx_ptype_7rocksdb_8_rocksdb_ValuesIterator = 0;
static PyTypeObject *__pyx_ptype_7rocksdb_8_rocksdb_ItemsIterator = 0;
static PyTypeObject *__pyx_ptype_7rocksdb_8_rocksdb_ReversedIterator = 0;
static PyTypeObject *__pyx_ptype_7rocksdb_8_rocksdb_WriteBatchIterator = 0;
static PyTypeObject *__pyx_ptype_7rocksdb_8_rocksdb_WriteBatch = 0;
static PyTypeObject *__pyx_ptype_7rocksdb_8_rocksdb_DB = 0;
static PyTypeObject *__pyx_ptype_7rocksdb_8_rocksdb_BackupEngine = 0;
static PyObject *__pyx_f_7rocksdb_8_rocksdb_check_status(rocksdb::Status const &); /*proto*/
static std::string __pyx_f_7rocksdb_8_rocksdb_bytes_to_string(PyObject *); /*proto*/
static PyObject *__pyx_f_7rocksdb_8_rocksdb_string_to_bytes(std::string); /*proto*/
static rocksdb::Slice __pyx_f_7rocksdb_8_rocksdb_bytes_to_slice(PyObject *); /*proto*/
static PyObject *__pyx_f_7rocksdb_8_rocksdb_slice_to_bytes(rocksdb::Slice); /*proto*/
static std::string __pyx_f_7rocksdb_8_rocksdb_path_to_string(PyObject *); /*proto*/
static PyObject *__pyx_f_7rocksdb_8_rocksdb_string_to_path(std::string); /*proto*/
static int __pyx_f_7rocksdb_8_rocksdb_compare_callback(void *, rocksdb::Logger *, std::string &, rocksdb::Slice const &, rocksdb::Slice const &); /*proto*/
static void __pyx_f_7rocksdb_8_rocksdb_create_filter_callback(void *, rocksdb::Logger *, std::string &, rocksdb::Slice const *, int, std::string *); /*proto*/
static bool __pyx_f_7rocksdb_8_rocksdb_key_may_match_callback(void *, rocksdb::Logger *, std::string &, rocksdb::Slice const &, rocksdb::Slice const &); /*proto*/
static bool __pyx_f_7rocksdb_8_rocksdb_merge_callback(void *, rocksdb::Slice const &, rocksdb::Slice const *, rocksdb::Slice const &, std::string *, rocksdb::Logger *); /*proto*/
static bool __pyx_f_7rocksdb_8_rocksdb_full_merge_callback(void *, rocksdb::Slice const &, rocksdb::Slice const *, std::deque<std::string>  const &, std::string *, rocksdb::Logger *); /*proto*/
static bool __pyx_f_7rocksdb_8_rocksdb_partial_merge_callback(void *, rocksdb::Slice const &, rocksdb::Slice const &, rocksdb::Slice const &, std::string *, rocksdb::Logger *); /*proto*/
static rocksdb::Slice __pyx_f_7rocksdb_8_rocksdb_slice_transform_callback(void *, rocksdb::Logger *, std::string &, rocksdb::Slice const &); /*proto*/
static bool __pyx_f_7rocksdb_8_rocksdb_slice_in_domain_callback(void *, rocksdb::Logger *, std::string &, rocksdb::Slice const &); /*proto*/
static bool __pyx_f_7rocksdb_8_rocksdb_slice_in_range_callback(void *, rocksdb::Logger *, std::string &, rocksdb::Slice const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_int(const std::vector<int>  &); /*proto*/
static std::vector<int>  __pyx_convert_vector_from_py_int(PyObject *); /*proto*/
#define __Pyx_MODULE_NAME "rocksdb._rocksdb"
int __pyx_module_is_main_rocksdb___rocksdb = 0;

/* Implementation of 'rocksdb._rocksdb' */
static PyObject *__pyx_builtin_staticmethod;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_BaseException;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_StopIteration;
static const char __pyx_k_a[] = "a";
static const char __pyx_k_b[] = "b";
static const char __pyx_k_db[] = "db";
static const char __pyx_k_it[] = "it";
static const char __pyx_k_ob[] = "ob";
static const char __pyx_k_st[] = "st";
static const char __pyx_k_Put[] = "Put";
static const char __pyx_k_all[] = "all";
static const char __pyx_k_end[] = "end";
static const char __pyx_k_get[] = "get";
static const char __pyx_k_key[] = "key";
static const char __pyx_k_sys[] = "sys";
static const char __pyx_k_data[] = "data";
static const char __pyx_k_fifo[] = "fifo";
static const char __pyx_k_keys[] = "keys";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "name";
static const char __pyx_k_none[] = "none";
static const char __pyx_k_opts[] = "opts";
static const char __pyx_k_seek[] = "seek";
static const char __pyx_k_size[] = "size";
static const char __pyx_k_skip[] = "skip";
static const char __pyx_k_sync[] = "sync";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_Merge[] = "Merge";
static const char __pyx_k_ascii[] = "ascii";
static const char __pyx_k_batch[] = "batch";
static const char __pyx_k_begin[] = "begin";
static const char __pyx_k_cache[] = "cache";
static const char __pyx_k_count[] = "count";
static const char __pyx_k_crc32[] = "crc32";
static const char __pyx_k_fetch[] = "fetch";
static const char __pyx_k_force[] = "force";
static const char __pyx_k_items[] = "items";
static const char __pyx_k_level[] = "level";
static const char __pyx_k_merge[] = "merge";
static const char __pyx_k_plain[] = "plain";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_value[] = "value";
static const char __pyx_k_Delete[] = "Delete";
static const char __pyx_k_db_dir[] = "db_dir";
static const char __pyx_k_encode[] = "encode";
static const char __pyx_k_errors[] = "errors";
static const char __pyx_k_filter[] = "filter_";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_prefix[] = "prefix";
static const char __pyx_k_xxhash[] = "xxhash";
static const char __pyx_k_compare[] = "compare";
static const char __pyx_k_db_name[] = "db_name";
static const char __pyx_k_db_path[] = "db_path";
static const char __pyx_k_wal_dir[] = "wal_dir";
static const char __pyx_k_LRUCache[] = "LRUCache";
static const char __pyx_k_NotFound[] = "NotFound";
static const char __pyx_k_capacity[] = "capacity";
static const char __pyx_k_checksum[] = "checksum";
static const char __pyx_k_in_range[] = "in_range";
static const char __pyx_k_snapshot[] = "snapshot";
static const char __pyx_k_strategy[] = "strategy";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_backup_id[] = "backup_id";
static const char __pyx_k_in_domain[] = "in_domain";
static const char __pyx_k_read_only[] = "read_only";
static const char __pyx_k_read_tier[] = "read_tier";
static const char __pyx_k_repair_db[] = "repair_db";
static const char __pyx_k_timestamp[] = "timestamp";
static const char __pyx_k_traceback[] = "traceback";
static const char __pyx_k_transform[] = "transform";
static const char __pyx_k_universal[] = "universal";
static const char __pyx_k_Comparator[] = "Comparator";
static const char __pyx_k_Corruption[] = "Corruption";
static const char __pyx_k_Incomplete[] = "Incomplete";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_backup_dir[] = "backup_dir";
static const char __pyx_k_block_size[] = "block_size";
static const char __pyx_k_fill_cache[] = "fill_cache";
static const char __pyx_k_format_exc[] = "format_exc";
static const char __pyx_k_full_merge[] = "full_merge";
static const char __pyx_k_index_type[] = "index_type";
static const char __pyx_k_interfaces[] = "interfaces";
static const char __pyx_k_largestkey[] = "largestkey";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_shard_bits[] = "shard_bits";
static const char __pyx_k_size_ratio[] = "size_ratio";
static const char __pyx_k_stop_style[] = "stop_style";
static const char __pyx_k_total_size[] = "total_size";
static const char __pyx_k_IComparator[] = "IComparator";
static const char __pyx_k_block_cache[] = "block_cache";
static const char __pyx_k_disable_wal[] = "disable_wal";
static const char __pyx_k_hash_search[] = "hash_search";
static const char __pyx_k_smallestkey[] = "smallestkey";
static const char __pyx_k_window_bits[] = "window_bits";
static const char __pyx_k_FilterPolicy[] = "FilterPolicy";
static const char __pyx_k_NotSupported[] = "NotSupported";
static const char __pyx_k_RocksIOError[] = "RocksIOError";
static const char __pyx_k_bits_per_key[] = "bits_per_key";
static const char __pyx_k_bucket_count[] = "bucket_count";
static const char __pyx_k_change_level[] = "change_level";
static const char __pyx_k_seek_to_last[] = "seek_to_last";
static const char __pyx_k_similar_size[] = "similar_size";
static const char __pyx_k_staticmethod[] = "staticmethod";
static const char __pyx_k_target_level[] = "target_level";
static const char __pyx_k_user_key_len[] = "user_key_len";
static const char __pyx_k_BaseException[] = "BaseException";
static const char __pyx_k_IFilterPolicy[] = "IFilterPolicy";
static const char __pyx_k_MergeOperator[] = "MergeOperator";
static const char __pyx_k_StopIteration[] = "StopIteration";
static const char __pyx_k_binary_search[] = "binary_search";
static const char __pyx_k_create_filter[] = "create_filter";
static const char __pyx_k_encoding_type[] = "encoding_type";
static const char __pyx_k_filter_policy[] = "filter_policy";
static const char __pyx_k_key_may_match[] = "key_may_match";
static const char __pyx_k_largest_seqno[] = "largest_seqno";
static const char __pyx_k_partial_merge[] = "partial_merge";
static const char __pyx_k_seek_for_prev[] = "seek_for_prev";
static const char __pyx_k_seek_to_first[] = "seek_to_first";
static const char __pyx_k_IMergeOperator[] = "IMergeOperator";
static const char __pyx_k_SliceTransform[] = "SliceTransform";
static const char __pyx_k_Unknonw_type_s[] = "Unknonw type: %s";
static const char __pyx_k_full_scan_mode[] = "full_scan_mode";
static const char __pyx_k_max_dict_bytes[] = "max_dict_bytes";
static const char __pyx_k_no_block_cache[] = "no_block_cache";
static const char __pyx_k_no_compression[] = "no_compression";
static const char __pyx_k_smallest_seqno[] = "smallest_seqno";
static const char __pyx_k_ISliceTransform[] = "ISliceTransform";
static const char __pyx_k_InvalidArgument[] = "InvalidArgument";
static const char __pyx_k_MergeInProgress[] = "MergeInProgress";
static const char __pyx_k_Unknown_error_s[] = "Unknown error: %s";
static const char __pyx_k_lz4_compression[] = "lz4_compression";
static const char __pyx_k_max_merge_width[] = "max_merge_width";
static const char __pyx_k_min_merge_width[] = "min_merge_width";
static const char __pyx_k_parse_read_opts[] = "__parse_read_opts";
static const char __pyx_k_skiplist_height[] = "skiplist_height";
static const char __pyx_k_hash_table_ratio[] = "hash_table_ratio";
static const char __pyx_k_index_sparseness[] = "index_sparseness";
static const char __pyx_k_prefix_extractor[] = "prefix_extractor";
static const char __pyx_k_rocksdb__rocksdb[] = "rocksdb._rocksdb";
static const char __pyx_k_verify_checksums[] = "verify_checksums";
static const char __pyx_k_zlib_compression[] = "zlib_compression";
static const char __pyx_k_zstd_compression[] = "zstd_compression";
static const char __pyx_k_BloomFilterPolicy[] = "BloomFilterPolicy";
static const char __pyx_k_Invalid_read_tier[] = "Invalid read_tier";
static const char __pyx_k_bzip2_compression[] = "bzip2_compression";
static const char __pyx_k_lz4hc_compression[] = "lz4hc_compression";
static const char __pyx_k_BytewiseComparator[] = "BytewiseComparator";
static const char __pyx_k_Unknown_checksum_s[] = "Unknown checksum: %s";
static const char __pyx_k_bloom_bits_per_key[] = "bloom_bits_per_key";
static const char __pyx_k_huge_page_tlb_size[] = "huge_page_tlb_size";
static const char __pyx_k_s_is_not_of_type_s[] = "%s is not of type %s";
static const char __pyx_k_snappy_compression[] = "snappy_compression";
static const char __pyx_k_xpress_compression[] = "xpress_compression";
static const char __pyx_k_by_compensated_size[] = "by_compensated_size";
static const char __pyx_k_disable_compression[] = "disable_compression";
static const char __pyx_k_flush_before_backup[] = "flush_before_backup";
static const char __pyx_k_store_index_in_file[] = "store_index_in_file";
static const char __pyx_k_whole_key_filtering[] = "whole_key_filtering";
static const char __pyx_k_Unknown_index_type_s[] = "Unknown index_type: %s";
static const char __pyx_k_block_size_deviation[] = "block_size_deviation";
static const char __pyx_k_if_compaction_filter[] = "if_compaction_filter";
static const char __pyx_k_Unknown_compression_s[] = "Unknown compression: %s";
static const char __pyx_k_Wrong_type_for_path_s[] = "Wrong type for path: %s";
static const char __pyx_k_getfilesystemencoding[] = "getfilesystemencoding";
static const char __pyx_k_min_overlapping_ratio[] = "min_overlapping_ratio";
static const char __pyx_k_block_cache_compressed[] = "block_cache_compressed";
static const char __pyx_k_block_restart_interval[] = "block_restart_interval";
static const char __pyx_k_Unknown_encoding_type_s[] = "Unknown encoding_type: %s";
static const char __pyx_k_AssociativeMergeOperator[] = "AssociativeMergeOperator";
static const char __pyx_k_Unknown_compaction_pri_s[] = "Unknown compaction pri: %s";
static const char __pyx_k_Unknown_compaction_style[] = "Unknown compaction_style";
static const char __pyx_k_compression_size_percent[] = "compression_size_percent";
static const char __pyx_k_oldest_largest_seq_first[] = "oldest_largest_seq_first";
static const char __pyx_k_s_is_not_of_this_types_s[] = "%s is not of this types %s";
static const char __pyx_k_zstdnotfinal_compression[] = "zstdnotfinal_compression";
static const char __pyx_k_IAssociativeMergeOperator[] = "IAssociativeMergeOperator";
static const char __pyx_k_oldest_smallest_seq_first[] = "oldest_smallest_seq_first";
static const char __pyx_k_skiplist_branching_factor[] = "skiplist_branching_factor";
static const char __pyx_k_Cannot_set_filter_policy_s[] = "Cannot set filter policy: %s";
static const char __pyx_k_Cannot_set_s_as_comparator[] = "Cannot set %s as comparator";
static const char __pyx_k_Unknown_compaction_style_2[] = "Unknown compaction style";
static const char __pyx_k_hash_index_allow_collision[] = "hash_index_allow_collision";
static const char __pyx_k_bottommost_level_compaction[] = "bottommost_level_compaction";
static const char __pyx_k_max_size_amplification_percent[] = "max_size_amplification_percent";
static const char __pyx_k_home_tumh_python_rocksdb_rocksd[] = "/home/tumh/python-rocksdb/rocksdb/_rocksdb.pyx";
static const char __pyx_k_Options_object_is_already_used_b[] = "Options object is already used by another DB";
static const char __pyx_k_bottommost_level_compaction_is_n[] = "bottommost_level_compaction is not valid";
static const char __pyx_k_offset_i_size_i_is_bigger_than_s[] = "offset(%i) + size(%i) is bigger than slice(%i)";
static const char __pyx_k_row_cache_must_be_a_Cache_object[] = "row_cache must be a Cache object";
static PyObject *__pyx_n_s_AssociativeMergeOperator;
static PyObject *__pyx_n_s_BaseException;
static PyObject *__pyx_n_s_BloomFilterPolicy;
static PyObject *__pyx_n_s_BytewiseComparator;
static PyObject *__pyx_kp_s_Cannot_set_filter_policy_s;
static PyObject *__pyx_kp_s_Cannot_set_s_as_comparator;
static PyObject *__pyx_n_s_Comparator;
static PyObject *__pyx_n_s_Corruption;
static PyObject *__pyx_n_s_Delete;
static PyObject *__pyx_n_s_FilterPolicy;
static PyObject *__pyx_n_s_IAssociativeMergeOperator;
static PyObject *__pyx_n_s_IComparator;
static PyObject *__pyx_n_s_IFilterPolicy;
static PyObject *__pyx_n_s_IMergeOperator;
static PyObject *__pyx_n_s_ISliceTransform;
static PyObject *__pyx_n_s_Incomplete;
static PyObject *__pyx_n_s_InvalidArgument;
static PyObject *__pyx_kp_s_Invalid_read_tier;
static PyObject *__pyx_n_s_LRUCache;
static PyObject *__pyx_n_s_Merge;
static PyObject *__pyx_n_s_MergeInProgress;
static PyObject *__pyx_n_s_MergeOperator;
static PyObject *__pyx_n_s_NotFound;
static PyObject *__pyx_n_s_NotSupported;
static PyObject *__pyx_kp_s_Options_object_is_already_used_b;
static PyObject *__pyx_n_s_Put;
static PyObject *__pyx_n_s_RocksIOError;
static PyObject *__pyx_n_s_SliceTransform;
static PyObject *__pyx_n_s_StopIteration;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_kp_s_Unknonw_type_s;
static PyObject *__pyx_kp_s_Unknown_checksum_s;
static PyObject *__pyx_kp_s_Unknown_compaction_pri_s;
static PyObject *__pyx_kp_s_Unknown_compaction_style;
static PyObject *__pyx_kp_s_Unknown_compaction_style_2;
static PyObject *__pyx_kp_s_Unknown_compression_s;
static PyObject *__pyx_kp_s_Unknown_encoding_type_s;
static PyObject *__pyx_kp_s_Unknown_error_s;
static PyObject *__pyx_kp_s_Unknown_index_type_s;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_kp_s_Wrong_type_for_path_s;
static PyObject *__pyx_n_s_a;
static PyObject *__pyx_n_s_all;
static PyObject *__pyx_n_s_ascii;
static PyObject *__pyx_n_s_b;
static PyObject *__pyx_n_s_backup_dir;
static PyObject *__pyx_n_s_backup_id;
static PyObject *__pyx_n_s_batch;
static PyObject *__pyx_n_s_begin;
static PyObject *__pyx_n_s_binary_search;
static PyObject *__pyx_n_s_bits_per_key;
static PyObject *__pyx_n_s_block_cache;
static PyObject *__pyx_n_s_block_cache_compressed;
static PyObject *__pyx_n_s_block_restart_interval;
static PyObject *__pyx_n_s_block_size;
static PyObject *__pyx_n_s_block_size_deviation;
static PyObject *__pyx_n_s_bloom_bits_per_key;
static PyObject *__pyx_n_s_bottommost_level_compaction;
static PyObject *__pyx_kp_s_bottommost_level_compaction_is_n;
static PyObject *__pyx_n_s_bucket_count;
static PyObject *__pyx_n_s_by_compensated_size;
static PyObject *__pyx_n_u_by_compensated_size;
static PyObject *__pyx_n_s_bzip2_compression;
static PyObject *__pyx_n_u_bzip2_compression;
static PyObject *__pyx_n_s_cache;
static PyObject *__pyx_n_s_capacity;
static PyObject *__pyx_n_s_change_level;
static PyObject *__pyx_n_s_checksum;
static PyObject *__pyx_n_s_compare;
static PyObject *__pyx_n_s_compression_size_percent;
static PyObject *__pyx_n_s_count;
static PyObject *__pyx_n_s_crc32;
static PyObject *__pyx_n_s_create_filter;
static PyObject *__pyx_n_s_data;
static PyObject *__pyx_n_s_db;
static PyObject *__pyx_n_s_db_dir;
static PyObject *__pyx_n_s_db_name;
static PyObject *__pyx_n_s_db_path;
static PyObject *__pyx_n_s_disable_compression;
static PyObject *__pyx_n_u_disable_compression;
static PyObject *__pyx_n_s_disable_wal;
static PyObject *__pyx_n_s_encode;
static PyObject *__pyx_n_s_encoding_type;
static PyObject *__pyx_n_s_end;
static PyObject *__pyx_n_s_errors;
static PyObject *__pyx_n_s_fetch;
static PyObject *__pyx_n_s_fifo;
static PyObject *__pyx_n_s_fill_cache;
static PyObject *__pyx_n_s_filter;
static PyObject *__pyx_n_s_filter_policy;
static PyObject *__pyx_n_s_flush_before_backup;
static PyObject *__pyx_n_s_force;
static PyObject *__pyx_n_s_format_exc;
static PyObject *__pyx_n_s_full_merge;
static PyObject *__pyx_n_s_full_scan_mode;
static PyObject *__pyx_n_s_get;
static PyObject *__pyx_n_s_getfilesystemencoding;
static PyObject *__pyx_n_s_hash_index_allow_collision;
static PyObject *__pyx_n_s_hash_search;
static PyObject *__pyx_n_s_hash_table_ratio;
static PyObject *__pyx_kp_s_home_tumh_python_rocksdb_rocksd;
static PyObject *__pyx_n_s_huge_page_tlb_size;
static PyObject *__pyx_n_s_if_compaction_filter;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_in_domain;
static PyObject *__pyx_n_s_in_range;
static PyObject *__pyx_n_s_index_sparseness;
static PyObject *__pyx_n_s_index_type;
static PyObject *__pyx_n_s_interfaces;
static PyObject *__pyx_n_s_it;
static PyObject *__pyx_n_s_items;
static PyObject *__pyx_n_s_key;
static PyObject *__pyx_n_s_key_may_match;
static PyObject *__pyx_n_s_keys;
static PyObject *__pyx_n_s_largest_seqno;
static PyObject *__pyx_n_s_largestkey;
static PyObject *__pyx_n_s_level;
static PyObject *__pyx_n_s_lz4_compression;
static PyObject *__pyx_n_u_lz4_compression;
static PyObject *__pyx_n_s_lz4hc_compression;
static PyObject *__pyx_n_u_lz4hc_compression;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_max_dict_bytes;
static PyObject *__pyx_n_s_max_merge_width;
static PyObject *__pyx_n_s_max_size_amplification_percent;
static PyObject *__pyx_n_s_merge;
static PyObject *__pyx_n_s_min_merge_width;
static PyObject *__pyx_n_s_min_overlapping_ratio;
static PyObject *__pyx_n_u_min_overlapping_ratio;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_no_block_cache;
static PyObject *__pyx_n_s_no_compression;
static PyObject *__pyx_n_u_no_compression;
static PyObject *__pyx_n_s_none;
static PyObject *__pyx_n_s_ob;
static PyObject *__pyx_kp_s_offset_i_size_i_is_bigger_than_s;
static PyObject *__pyx_n_s_oldest_largest_seq_first;
static PyObject *__pyx_n_u_oldest_largest_seq_first;
static PyObject *__pyx_n_s_oldest_smallest_seq_first;
static PyObject *__pyx_n_u_oldest_smallest_seq_first;
static PyObject *__pyx_n_s_opts;
static PyObject *__pyx_n_s_parse_read_opts;
static PyObject *__pyx_n_s_partial_merge;
static PyObject *__pyx_n_s_plain;
static PyObject *__pyx_n_s_prefix;
static PyObject *__pyx_n_s_prefix_extractor;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_read_only;
static PyObject *__pyx_n_s_read_tier;
static PyObject *__pyx_n_s_repair_db;
static PyObject *__pyx_n_s_rocksdb__rocksdb;
static PyObject *__pyx_kp_s_row_cache_must_be_a_Cache_object;
static PyObject *__pyx_kp_s_s_is_not_of_this_types_s;
static PyObject *__pyx_kp_s_s_is_not_of_type_s;
static PyObject *__pyx_n_s_seek;
static PyObject *__pyx_n_s_seek_for_prev;
static PyObject *__pyx_n_s_seek_to_first;
static PyObject *__pyx_n_s_seek_to_last;
static PyObject *__pyx_n_s_shard_bits;
static PyObject *__pyx_n_s_similar_size;
static PyObject *__pyx_n_s_size;
static PyObject *__pyx_n_s_size_ratio;
static PyObject *__pyx_n_s_skip;
static PyObject *__pyx_n_s_skiplist_branching_factor;
static PyObject *__pyx_n_s_skiplist_height;
static PyObject *__pyx_n_s_smallest_seqno;
static PyObject *__pyx_n_s_smallestkey;
static PyObject *__pyx_n_s_snappy_compression;
static PyObject *__pyx_n_u_snappy_compression;
static PyObject *__pyx_n_s_snapshot;
static PyObject *__pyx_n_s_st;
static PyObject *__pyx_n_s_staticmethod;
static PyObject *__pyx_n_s_stop_style;
static PyObject *__pyx_n_s_store_index_in_file;
static PyObject *__pyx_n_s_strategy;
static PyObject *__pyx_n_s_sync;
static PyObject *__pyx_n_s_sys;
static PyObject *__pyx_n_s_target_level;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_timestamp;
static PyObject *__pyx_n_s_total_size;
static PyObject *__pyx_n_s_traceback;
static PyObject *__pyx_n_s_transform;
static PyObject *__pyx_n_s_universal;
static PyObject *__pyx_n_s_user_key_len;
static PyObject *__pyx_n_s_value;
static PyObject *__pyx_n_s_verify_checksums;
static PyObject *__pyx_n_s_wal_dir;
static PyObject *__pyx_n_s_whole_key_filtering;
static PyObject *__pyx_n_s_window_bits;
static PyObject *__pyx_n_s_xpress_compression;
static PyObject *__pyx_n_u_xpress_compression;
static PyObject *__pyx_n_s_xxhash;
static PyObject *__pyx_n_s_zlib_compression;
static PyObject *__pyx_n_u_zlib_compression;
static PyObject *__pyx_n_s_zstd_compression;
static PyObject *__pyx_n_u_zstd_compression;
static PyObject *__pyx_n_s_zstdnotfinal_compression;
static PyObject *__pyx_n_u_zstdnotfinal_compression;
static int __pyx_pf_7rocksdb_8_rocksdb_19PyGenericComparator___cinit__(struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericComparator *__pyx_v_self, PyObject *__pyx_v_ob); /* proto */
static void __pyx_pf_7rocksdb_8_rocksdb_19PyGenericComparator_2__dealloc__(struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericComparator *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_20PyBytewiseComparator___cinit__(struct __pyx_obj_7rocksdb_8_rocksdb_PyBytewiseComparator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_20PyBytewiseComparator_2name(struct __pyx_obj_7rocksdb_8_rocksdb_PyBytewiseComparator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_20PyBytewiseComparator_4compare(struct __pyx_obj_7rocksdb_8_rocksdb_PyBytewiseComparator *__pyx_v_self, PyObject *__pyx_v_a, PyObject *__pyx_v_b); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_21PyGenericFilterPolicy___cinit__(struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericFilterPolicy *__pyx_v_self, PyObject *__pyx_v_ob); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_19PyBloomFilterPolicy___cinit__(struct __pyx_obj_7rocksdb_8_rocksdb_PyBloomFilterPolicy *__pyx_v_self, int __pyx_v_bits_per_key); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19PyBloomFilterPolicy_2name(struct __pyx_obj_7rocksdb_8_rocksdb_PyBloomFilterPolicy *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19PyBloomFilterPolicy_4create_filter(struct __pyx_obj_7rocksdb_8_rocksdb_PyBloomFilterPolicy *__pyx_v_self, PyObject *__pyx_v_keys); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19PyBloomFilterPolicy_6key_may_match(struct __pyx_obj_7rocksdb_8_rocksdb_PyBloomFilterPolicy *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_filter_); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_15PyMergeOperator___cinit__(struct __pyx_obj_7rocksdb_8_rocksdb_PyMergeOperator *__pyx_v_self, PyObject *__pyx_v_ob); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_10PyLRUCache___cinit__(struct __pyx_obj_7rocksdb_8_rocksdb_PyLRUCache *__pyx_v_self, PyObject *__pyx_v_capacity, PyObject *__pyx_v_shard_bits); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_16PySliceTransform___cinit__(struct __pyx_obj_7rocksdb_8_rocksdb_PySliceTransform *__pyx_v_self, PyObject *__pyx_v_ob); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_22BlockBasedTableFactory___init__(struct __pyx_obj_7rocksdb_8_rocksdb_BlockBasedTableFactory *__pyx_v_self, PyObject *__pyx_v_index_type, PyBoolObject *__pyx_v_hash_index_allow_collision, PyObject *__pyx_v_checksum, struct __pyx_obj_7rocksdb_8_rocksdb_PyCache *__pyx_v_block_cache, struct __pyx_obj_7rocksdb_8_rocksdb_PyCache *__pyx_v_block_cache_compressed, PyObject *__pyx_v_filter_policy, PyObject *__pyx_v_no_block_cache, PyObject *__pyx_v_block_size, PyObject *__pyx_v_block_size_deviation, PyObject *__pyx_v_block_restart_interval, PyObject *__pyx_v_whole_key_filtering); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_17PlainTableFactory___init__(struct __pyx_obj_7rocksdb_8_rocksdb_PlainTableFactory *__pyx_v_self, PyObject *__pyx_v_user_key_len, PyObject *__pyx_v_bloom_bits_per_key, PyObject *__pyx_v_hash_table_ratio, PyObject *__pyx_v_index_sparseness, PyObject *__pyx_v_huge_page_tlb_size, PyObject *__pyx_v_encoding_type, PyBoolObject *__pyx_v_full_scan_mode, PyBoolObject *__pyx_v_store_index_in_file); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_23SkipListMemtableFactory___init__(struct __pyx_obj_7rocksdb_8_rocksdb_SkipListMemtableFactory *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_21VectorMemtableFactory___init__(struct __pyx_obj_7rocksdb_8_rocksdb_VectorMemtableFactory *__pyx_v_self, PyObject *__pyx_v_count); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_27HashSkipListMemtableFactory___init__(struct __pyx_obj_7rocksdb_8_rocksdb_HashSkipListMemtableFactory *__pyx_v_self, PyObject *__pyx_v_bucket_count, PyObject *__pyx_v_skiplist_height, PyObject *__pyx_v_skiplist_branching_factor); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_27HashLinkListMemtableFactory___init__(struct __pyx_obj_7rocksdb_8_rocksdb_HashLinkListMemtableFactory *__pyx_v_self, PyObject *__pyx_v_bucket_count); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options___cinit__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static void __pyx_pf_7rocksdb_8_rocksdb_7Options_2__dealloc__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_4__init__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_17create_if_missing___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_17create_if_missing_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_15error_if_exists___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_15error_if_exists_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_15paranoid_checks___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_15paranoid_checks_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_17write_buffer_size___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_17write_buffer_size_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_23max_write_buffer_number___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_23max_write_buffer_number_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_20max_compaction_bytes___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_20max_compaction_bytes_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_32min_write_buffer_number_to_merge___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_32min_write_buffer_number_to_merge_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_14max_open_files___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_14max_open_files_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_16compression_opts___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_16compression_opts_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_14compaction_pri___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_14compaction_pri_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_11compression___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_11compression_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_10num_levels___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_10num_levels_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_34level0_file_num_compaction_trigger___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_34level0_file_num_compaction_trigger_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_30level0_slowdown_writes_trigger___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_30level0_slowdown_writes_trigger_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_26level0_stop_writes_trigger___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_26level0_stop_writes_trigger_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_24max_mem_compaction_level___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_24max_mem_compaction_level_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_21target_file_size_base___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_21target_file_size_base_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_27target_file_size_multiplier___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_27target_file_size_multiplier_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_24max_bytes_for_level_base___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_24max_bytes_for_level_base_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_30max_bytes_for_level_multiplier___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_30max_bytes_for_level_multiplier_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_41max_bytes_for_level_multiplier_additional___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_41max_bytes_for_level_multiplier_additional_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_9use_fsync___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_9use_fsync_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_10db_log_dir___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_10db_log_dir_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_7wal_dir___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_7wal_dir_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_35delete_obsolete_files_period_micros___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_35delete_obsolete_files_period_micros_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_26max_background_compactions___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_26max_background_compactions_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_22max_background_flushes___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_22max_background_flushes_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_17max_log_file_size___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_17max_log_file_size_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_21log_file_time_to_roll___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_21log_file_time_to_roll_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_17keep_log_file_num___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_17keep_log_file_num_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_15soft_rate_limit___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_15soft_rate_limit_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_15hard_rate_limit___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_15hard_rate_limit_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_33rate_limit_delay_max_milliseconds___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_33rate_limit_delay_max_milliseconds_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_22max_manifest_file_size___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_22max_manifest_file_size_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_24table_cache_numshardbits___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_24table_cache_numshardbits_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_16arena_block_size___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_16arena_block_size_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_24disable_auto_compactions___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_24disable_auto_compactions_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_15wal_ttl_seconds___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_15wal_ttl_seconds_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_17wal_size_limit_mb___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_17wal_size_limit_mb_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_27manifest_preallocation_size___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_27manifest_preallocation_size_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_31purge_redundant_kvs_while_flush___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_31purge_redundant_kvs_while_flush_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_34enable_write_thread_adaptive_yield___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_34enable_write_thread_adaptive_yield_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_31allow_concurrent_memtable_write___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_31allow_concurrent_memtable_write_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_16allow_mmap_reads___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_16allow_mmap_reads_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_17allow_mmap_writes___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_17allow_mmap_writes_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_19is_fd_close_on_exec___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_19is_fd_close_on_exec_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_26skip_log_error_on_recovery___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_26skip_log_error_on_recovery_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_21stats_dump_period_sec___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_21stats_dump_period_sec_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_21advise_random_on_open___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_21advise_random_on_open_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_18use_adaptive_mutex___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_18use_adaptive_mutex_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_14bytes_per_sync___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_14bytes_per_sync_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_16compaction_style___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_16compaction_style_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_28compaction_options_universal___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_28compaction_options_universal_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_33max_sequential_skip_in_iterations___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_33max_sequential_skip_in_iterations_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_22inplace_update_support___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_22inplace_update_support_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_13table_factory___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_13table_factory_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, struct __pyx_obj_7rocksdb_8_rocksdb_PyTableFactory *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_16memtable_factory___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_16memtable_factory_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, struct __pyx_obj_7rocksdb_8_rocksdb_PyMemtableFactory *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_24inplace_update_num_locks___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_24inplace_update_num_locks_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_10comparator___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_10comparator_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_14merge_operator___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_14merge_operator_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_16prefix_extractor___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_16prefix_extractor_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_9row_cache___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_7Options_9row_cache_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_10WriteBatch___cinit__(struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatch *__pyx_v_self, PyObject *__pyx_v_data); /* proto */
static void __pyx_pf_7rocksdb_8_rocksdb_10WriteBatch_2__dealloc__(struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatch *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_10WriteBatch_4put(struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatch *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_10WriteBatch_6merge(struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatch *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_10WriteBatch_8delete(struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatch *__pyx_v_self, PyObject *__pyx_v_key); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_10WriteBatch_10clear(struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatch *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_10WriteBatch_12data(struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatch *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_10WriteBatch_14count(struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatch *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_10WriteBatch_16__iter__(struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatch *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_18WriteBatchIterator___init__(struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatchIterator *__pyx_v_self, struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatch *__pyx_v_batch); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_18WriteBatchIterator_2__iter__(struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatchIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_18WriteBatchIterator_4__next__(struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatchIterator *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_2DB___cinit__(struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self, PyObject *__pyx_v_db_name, struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_opts, PyObject *__pyx_v_read_only); /* proto */
static void __pyx_pf_7rocksdb_8_rocksdb_2DB_2__dealloc__(struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_2DB_4put(struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_value, PyObject *__pyx_v_sync, PyObject *__pyx_v_disable_wal); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_2DB_6delete(struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_sync, PyObject *__pyx_v_disable_wal); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_2DB_8merge(struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_value, PyObject *__pyx_v_sync, PyObject *__pyx_v_disable_wal); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_2DB_10write(struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self, struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatch *__pyx_v_batch, PyObject *__pyx_v_sync, PyObject *__pyx_v_disable_wal); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_2DB_12get(struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_2DB_14multi_get(struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self, PyObject *__pyx_v_keys, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_2DB_16key_may_exist(struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_fetch, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_2DB_18iterkeys(struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_2DB_20itervalues(struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_2DB_22iteritems(struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_2DB_24snapshot(struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_2DB_26get_property(struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self, PyObject *__pyx_v_prop); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_2DB_28get_live_files_metadata(struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_2DB_30compact_range(struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self, PyObject *__pyx_v_begin, PyObject *__pyx_v_end, PyObject *__pyx_v_py_options); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_2DB_32__parse_read_opts(PyObject *__pyx_v_verify_checksums, PyObject *__pyx_v_fill_cache, PyObject *__pyx_v_snapshot, PyObject *__pyx_v_read_tier); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_2DB_7options___get__(struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_repair_db(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_db_name, struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_opts); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_8Snapshot___cinit__(struct __pyx_obj_7rocksdb_8_rocksdb_Snapshot *__pyx_v_self, struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_db); /* proto */
static void __pyx_pf_7rocksdb_8_rocksdb_8Snapshot_2__dealloc__(struct __pyx_obj_7rocksdb_8_rocksdb_Snapshot *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_12BaseIterator___cinit__(struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *__pyx_v_self, struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_db); /* proto */
static void __pyx_pf_7rocksdb_8_rocksdb_12BaseIterator_2__dealloc__(struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_12BaseIterator_4__iter__(struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_12BaseIterator_6__next__(struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_12BaseIterator_8get(struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_12BaseIterator_10__reversed__(struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_12BaseIterator_12seek_to_first(struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_12BaseIterator_14seek_to_last(struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_12BaseIterator_16seek(struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *__pyx_v_self, PyObject *__pyx_v_key); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_12BaseIterator_18seek_for_prev(struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *__pyx_v_self, PyObject *__pyx_v_key); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_16ReversedIterator___cinit__(struct __pyx_obj_7rocksdb_8_rocksdb_ReversedIterator *__pyx_v_self, struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *__pyx_v_it); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_16ReversedIterator_2seek_to_first(struct __pyx_obj_7rocksdb_8_rocksdb_ReversedIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_16ReversedIterator_4seek_to_last(struct __pyx_obj_7rocksdb_8_rocksdb_ReversedIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_16ReversedIterator_6seek(struct __pyx_obj_7rocksdb_8_rocksdb_ReversedIterator *__pyx_v_self, PyObject *__pyx_v_key); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_16ReversedIterator_8seek_for_prev(struct __pyx_obj_7rocksdb_8_rocksdb_ReversedIterator *__pyx_v_self, PyObject *__pyx_v_key); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_16ReversedIterator_10get(struct __pyx_obj_7rocksdb_8_rocksdb_ReversedIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_16ReversedIterator_12__iter__(struct __pyx_obj_7rocksdb_8_rocksdb_ReversedIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_16ReversedIterator_14__reversed__(struct __pyx_obj_7rocksdb_8_rocksdb_ReversedIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_16ReversedIterator_16__next__(struct __pyx_obj_7rocksdb_8_rocksdb_ReversedIterator *__pyx_v_self); /* proto */
static int __pyx_pf_7rocksdb_8_rocksdb_12BackupEngine___cinit__(struct __pyx_obj_7rocksdb_8_rocksdb_BackupEngine *__pyx_v_self, PyObject *__pyx_v_backup_dir); /* proto */
static void __pyx_pf_7rocksdb_8_rocksdb_12BackupEngine_2__dealloc__(struct __pyx_obj_7rocksdb_8_rocksdb_BackupEngine *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_12BackupEngine_4create_backup(struct __pyx_obj_7rocksdb_8_rocksdb_BackupEngine *__pyx_v_self, struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_db, PyObject *__pyx_v_flush_before_backup); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_12BackupEngine_6restore_backup(struct __pyx_obj_7rocksdb_8_rocksdb_BackupEngine *__pyx_v_self, PyObject *__pyx_v_backup_id, PyObject *__pyx_v_db_dir, PyObject *__pyx_v_wal_dir); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_12BackupEngine_8restore_latest_backup(struct __pyx_obj_7rocksdb_8_rocksdb_BackupEngine *__pyx_v_self, PyObject *__pyx_v_db_dir, PyObject *__pyx_v_wal_dir); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_12BackupEngine_10stop_backup(struct __pyx_obj_7rocksdb_8_rocksdb_BackupEngine *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_12BackupEngine_12purge_old_backups(struct __pyx_obj_7rocksdb_8_rocksdb_BackupEngine *__pyx_v_self, PyObject *__pyx_v_num_backups_to_keep); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_12BackupEngine_14delete_backup(struct __pyx_obj_7rocksdb_8_rocksdb_BackupEngine *__pyx_v_self, PyObject *__pyx_v_backup_id); /* proto */
static PyObject *__pyx_pf_7rocksdb_8_rocksdb_12BackupEngine_16get_backup_info(struct __pyx_obj_7rocksdb_8_rocksdb_BackupEngine *__pyx_v_self); /* proto */
static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_PyComparator(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_PyGenericComparator(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_PyBytewiseComparator(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_PyFilterPolicy(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_PyGenericFilterPolicy(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_PyBloomFilterPolicy(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_PyMergeOperator(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_PyCache(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_PyLRUCache(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_PySliceTransform(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_PyTableFactory(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_BlockBasedTableFactory(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_PlainTableFactory(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_PyMemtableFactory(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_SkipListMemtableFactory(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_VectorMemtableFactory(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_HashSkipListMemtableFactory(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_HashLinkListMemtableFactory(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_CompressionType(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_CompactionPri(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_Options(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_Snapshot(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_BaseIterator(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_KeysIterator(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_ValuesIterator(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_ItemsIterator(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_ReversedIterator(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_WriteBatchIterator(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_WriteBatch(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_DB(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_BackupEngine(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static __Pyx_CachedCFunction __pyx_umethod_PyDict_Type_items = {0, &__pyx_n_s_items, 0, 0, 0};
static PyObject *__pyx_float_0_75;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_4;
static PyObject *__pyx_int_10;
static PyObject *__pyx_int_50000;
static PyObject *__pyx_int_1000000;
static PyObject *__pyx_int_neg_1;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_codeobj__13;
static PyObject *__pyx_codeobj__15;

/* "rocksdb/_rocksdb.pyx":67
 * 
 * ## Here comes the stuff to wrap the status to exception
 * cdef check_status(const Status& st):             # <<<<<<<<<<<<<<
 *     if st.ok():
 *         return
 */

static PyObject *__pyx_f_7rocksdb_8_rocksdb_check_status(rocksdb::Status const &__pyx_v_st) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  std::string __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("check_status", 0);

  /* "rocksdb/_rocksdb.pyx":68
 * ## Here comes the stuff to wrap the status to exception
 * cdef check_status(const Status& st):
 *     if st.ok():             # <<<<<<<<<<<<<<
 *         return
 * 
 */
  __pyx_t_1 = (__pyx_v_st.ok() != 0);
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":69
 * cdef check_status(const Status& st):
 *     if st.ok():
 *         return             # <<<<<<<<<<<<<<
 * 
 *     if st.IsNotFound():
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "rocksdb/_rocksdb.pyx":68
 * ## Here comes the stuff to wrap the status to exception
 * cdef check_status(const Status& st):
 *     if st.ok():             # <<<<<<<<<<<<<<
 *         return
 * 
 */
  }

  /* "rocksdb/_rocksdb.pyx":71
 *         return
 * 
 *     if st.IsNotFound():             # <<<<<<<<<<<<<<
 *         raise errors.NotFound(st.ToString())
 * 
 */
  __pyx_t_1 = (__pyx_v_st.IsNotFound() != 0);
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":72
 * 
 *     if st.IsNotFound():
 *         raise errors.NotFound(st.ToString())             # <<<<<<<<<<<<<<
 * 
 *     if st.IsCorruption():
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_errors); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 72, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_NotFound); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 72, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    try {
      __pyx_t_5 = __pyx_v_st.ToString();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 72, __pyx_L1_error)
    }
    __pyx_t_3 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 72, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_6) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 72, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_3};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 72, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_3};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 72, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else
      #endif
      {
        __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 72, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __pyx_t_6 = NULL;
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 72, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 72, __pyx_L1_error)

    /* "rocksdb/_rocksdb.pyx":71
 *         return
 * 
 *     if st.IsNotFound():             # <<<<<<<<<<<<<<
 *         raise errors.NotFound(st.ToString())
 * 
 */
  }

  /* "rocksdb/_rocksdb.pyx":74
 *         raise errors.NotFound(st.ToString())
 * 
 *     if st.IsCorruption():             # <<<<<<<<<<<<<<
 *         raise errors.Corruption(st.ToString())
 * 
 */
  __pyx_t_1 = (__pyx_v_st.IsCorruption() != 0);
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":75
 * 
 *     if st.IsCorruption():
 *         raise errors.Corruption(st.ToString())             # <<<<<<<<<<<<<<
 * 
 *     if st.IsNotSupported():
 */
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_errors); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 75, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_Corruption); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 75, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    try {
      __pyx_t_5 = __pyx_v_st.ToString();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 75, __pyx_L1_error)
    }
    __pyx_t_4 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 75, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    if (!__pyx_t_3) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 75, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_7)) {
        PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_4};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 75, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
        PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_4};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 75, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      {
        __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 75, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3); __pyx_t_3 = NULL;
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_4);
        __pyx_t_4 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 75, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 75, __pyx_L1_error)

    /* "rocksdb/_rocksdb.pyx":74
 *         raise errors.NotFound(st.ToString())
 * 
 *     if st.IsCorruption():             # <<<<<<<<<<<<<<
 *         raise errors.Corruption(st.ToString())
 * 
 */
  }

  /* "rocksdb/_rocksdb.pyx":77
 *         raise errors.Corruption(st.ToString())
 * 
 *     if st.IsNotSupported():             # <<<<<<<<<<<<<<
 *         raise errors.NotSupported(st.ToString())
 * 
 */
  __pyx_t_1 = (__pyx_v_st.IsNotSupported() != 0);
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":78
 * 
 *     if st.IsNotSupported():
 *         raise errors.NotSupported(st.ToString())             # <<<<<<<<<<<<<<
 * 
 *     if st.IsInvalidArgument():
 */
    __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_errors); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 78, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_NotSupported); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 78, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    try {
      __pyx_t_5 = __pyx_v_st.ToString();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 78, __pyx_L1_error)
    }
    __pyx_t_7 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 78, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    if (!__pyx_t_4) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 78, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_6)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_7};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 78, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_7};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 78, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      } else
      #endif
      {
        __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 78, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4); __pyx_t_4 = NULL;
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_t_7);
        __pyx_t_7 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 78, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 78, __pyx_L1_error)

    /* "rocksdb/_rocksdb.pyx":77
 *         raise errors.Corruption(st.ToString())
 * 
 *     if st.IsNotSupported():             # <<<<<<<<<<<<<<
 *         raise errors.NotSupported(st.ToString())
 * 
 */
  }

  /* "rocksdb/_rocksdb.pyx":80
 *         raise errors.NotSupported(st.ToString())
 * 
 *     if st.IsInvalidArgument():             # <<<<<<<<<<<<<<
 *         raise errors.InvalidArgument(st.ToString())
 * 
 */
  __pyx_t_1 = (__pyx_v_st.IsInvalidArgument() != 0);
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":81
 * 
 *     if st.IsInvalidArgument():
 *         raise errors.InvalidArgument(st.ToString())             # <<<<<<<<<<<<<<
 * 
 *     if st.IsIOError():
 */
    __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_errors); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 81, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_InvalidArgument); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 81, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    try {
      __pyx_t_5 = __pyx_v_st.ToString();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 81, __pyx_L1_error)
    }
    __pyx_t_6 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 81, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (!__pyx_t_7) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 81, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_6};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 81, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_6};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 81, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      {
        __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 81, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_7); __pyx_t_7 = NULL;
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_t_6);
        __pyx_t_6 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 81, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 81, __pyx_L1_error)

    /* "rocksdb/_rocksdb.pyx":80
 *         raise errors.NotSupported(st.ToString())
 * 
 *     if st.IsInvalidArgument():             # <<<<<<<<<<<<<<
 *         raise errors.InvalidArgument(st.ToString())
 * 
 */
  }

  /* "rocksdb/_rocksdb.pyx":83
 *         raise errors.InvalidArgument(st.ToString())
 * 
 *     if st.IsIOError():             # <<<<<<<<<<<<<<
 *         raise errors.RocksIOError(st.ToString())
 * 
 */
  __pyx_t_1 = (__pyx_v_st.IsIOError() != 0);
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":84
 * 
 *     if st.IsIOError():
 *         raise errors.RocksIOError(st.ToString())             # <<<<<<<<<<<<<<
 * 
 *     if st.IsMergeInProgress():
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_errors); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 84, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_RocksIOError); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 84, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    try {
      __pyx_t_5 = __pyx_v_st.ToString();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 84, __pyx_L1_error)
    }
    __pyx_t_3 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 84, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_6) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 84, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_3};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 84, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_3};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 84, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else
      #endif
      {
        __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 84, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __pyx_t_6 = NULL;
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 84, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 84, __pyx_L1_error)

    /* "rocksdb/_rocksdb.pyx":83
 *         raise errors.InvalidArgument(st.ToString())
 * 
 *     if st.IsIOError():             # <<<<<<<<<<<<<<
 *         raise errors.RocksIOError(st.ToString())
 * 
 */
  }

  /* "rocksdb/_rocksdb.pyx":86
 *         raise errors.RocksIOError(st.ToString())
 * 
 *     if st.IsMergeInProgress():             # <<<<<<<<<<<<<<
 *         raise errors.MergeInProgress(st.ToString())
 * 
 */
  __pyx_t_1 = (__pyx_v_st.IsMergeInProgress() != 0);
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":87
 * 
 *     if st.IsMergeInProgress():
 *         raise errors.MergeInProgress(st.ToString())             # <<<<<<<<<<<<<<
 * 
 *     if st.IsIncomplete():
 */
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_errors); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 87, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_MergeInProgress); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 87, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    try {
      __pyx_t_5 = __pyx_v_st.ToString();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 87, __pyx_L1_error)
    }
    __pyx_t_4 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 87, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    if (!__pyx_t_3) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 87, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_7)) {
        PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_4};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 87, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
        PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_4};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 87, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      {
        __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 87, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3); __pyx_t_3 = NULL;
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_4);
        __pyx_t_4 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 87, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 87, __pyx_L1_error)

    /* "rocksdb/_rocksdb.pyx":86
 *         raise errors.RocksIOError(st.ToString())
 * 
 *     if st.IsMergeInProgress():             # <<<<<<<<<<<<<<
 *         raise errors.MergeInProgress(st.ToString())
 * 
 */
  }

  /* "rocksdb/_rocksdb.pyx":89
 *         raise errors.MergeInProgress(st.ToString())
 * 
 *     if st.IsIncomplete():             # <<<<<<<<<<<<<<
 *         raise errors.Incomplete(st.ToString())
 * 
 */
  __pyx_t_1 = (__pyx_v_st.IsIncomplete() != 0);
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":90
 * 
 *     if st.IsIncomplete():
 *         raise errors.Incomplete(st.ToString())             # <<<<<<<<<<<<<<
 * 
 *     raise Exception("Unknown error: %s" % st.ToString())
 */
    __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_errors); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 90, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_Incomplete); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 90, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    try {
      __pyx_t_5 = __pyx_v_st.ToString();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 90, __pyx_L1_error)
    }
    __pyx_t_7 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 90, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    if (!__pyx_t_4) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 90, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_6)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_7};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 90, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_7};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 90, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      } else
      #endif
      {
        __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 90, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4); __pyx_t_4 = NULL;
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_t_7);
        __pyx_t_7 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 90, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 90, __pyx_L1_error)

    /* "rocksdb/_rocksdb.pyx":89
 *         raise errors.MergeInProgress(st.ToString())
 * 
 *     if st.IsIncomplete():             # <<<<<<<<<<<<<<
 *         raise errors.Incomplete(st.ToString())
 * 
 */
  }

  /* "rocksdb/_rocksdb.pyx":92
 *         raise errors.Incomplete(st.ToString())
 * 
 *     raise Exception("Unknown error: %s" % st.ToString())             # <<<<<<<<<<<<<<
 * ######################################################
 * 
 */
  try {
    __pyx_t_5 = __pyx_v_st.ToString();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 92, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = __Pyx_PyString_Format(__pyx_kp_s_Unknown_error_s, __pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_6);
  __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_t_2, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_Raise(__pyx_t_6, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __PYX_ERR(0, 92, __pyx_L1_error)

  /* "rocksdb/_rocksdb.pyx":67
 * 
 * ## Here comes the stuff to wrap the status to exception
 * cdef check_status(const Status& st):             # <<<<<<<<<<<<<<
 *     if st.ok():
 *         return
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("rocksdb._rocksdb.check_status", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":96
 * 
 * 
 * cdef string bytes_to_string(path) except *:             # <<<<<<<<<<<<<<
 *     return string(PyBytes_AsString(path), PyBytes_Size(path))
 * 
 */

static std::string __pyx_f_7rocksdb_8_rocksdb_bytes_to_string(PyObject *__pyx_v_path) {
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  Py_ssize_t __pyx_t_2;
  std::string __pyx_t_3;
  __Pyx_RefNannySetupContext("bytes_to_string", 0);

  /* "rocksdb/_rocksdb.pyx":97
 * 
 * cdef string bytes_to_string(path) except *:
 *     return string(PyBytes_AsString(path), PyBytes_Size(path))             # <<<<<<<<<<<<<<
 * 
 * cdef string_to_bytes(string ob):
 */
  __pyx_t_1 = PyBytes_AsString(__pyx_v_path); if (unlikely(__pyx_t_1 == NULL)) __PYX_ERR(0, 97, __pyx_L1_error)
  __pyx_t_2 = PyBytes_Size(__pyx_v_path); if (unlikely(__pyx_t_2 == -1L)) __PYX_ERR(0, 97, __pyx_L1_error)
  try {
    __pyx_t_3 = std::string(__pyx_t_1, __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 97, __pyx_L1_error)
  }
  __pyx_r = __pyx_t_3;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":96
 * 
 * 
 * cdef string bytes_to_string(path) except *:             # <<<<<<<<<<<<<<
 *     return string(PyBytes_AsString(path), PyBytes_Size(path))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.bytes_to_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":99
 *     return string(PyBytes_AsString(path), PyBytes_Size(path))
 * 
 * cdef string_to_bytes(string ob):             # <<<<<<<<<<<<<<
 *     return PyBytes_FromStringAndSize(ob.c_str(), ob.size())
 * 
 */

static PyObject *__pyx_f_7rocksdb_8_rocksdb_string_to_bytes(std::string __pyx_v_ob) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("string_to_bytes", 0);

  /* "rocksdb/_rocksdb.pyx":100
 * 
 * cdef string_to_bytes(string ob):
 *     return PyBytes_FromStringAndSize(ob.c_str(), ob.size())             # <<<<<<<<<<<<<<
 * 
 * cdef Slice bytes_to_slice(ob) except *:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyBytes_FromStringAndSize(__pyx_v_ob.c_str(), __pyx_v_ob.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":99
 *     return string(PyBytes_AsString(path), PyBytes_Size(path))
 * 
 * cdef string_to_bytes(string ob):             # <<<<<<<<<<<<<<
 *     return PyBytes_FromStringAndSize(ob.c_str(), ob.size())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.string_to_bytes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":102
 *     return PyBytes_FromStringAndSize(ob.c_str(), ob.size())
 * 
 * cdef Slice bytes_to_slice(ob) except *:             # <<<<<<<<<<<<<<
 *     return Slice(PyBytes_AsString(ob), PyBytes_Size(ob))
 * 
 */

static rocksdb::Slice __pyx_f_7rocksdb_8_rocksdb_bytes_to_slice(PyObject *__pyx_v_ob) {
  rocksdb::Slice __pyx_r;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  Py_ssize_t __pyx_t_2;
  __Pyx_RefNannySetupContext("bytes_to_slice", 0);

  /* "rocksdb/_rocksdb.pyx":103
 * 
 * cdef Slice bytes_to_slice(ob) except *:
 *     return Slice(PyBytes_AsString(ob), PyBytes_Size(ob))             # <<<<<<<<<<<<<<
 * 
 * cdef slice_to_bytes(Slice sl):
 */
  __pyx_t_1 = PyBytes_AsString(__pyx_v_ob); if (unlikely(__pyx_t_1 == NULL)) __PYX_ERR(0, 103, __pyx_L1_error)
  __pyx_t_2 = PyBytes_Size(__pyx_v_ob); if (unlikely(__pyx_t_2 == -1L)) __PYX_ERR(0, 103, __pyx_L1_error)
  __pyx_r = rocksdb::Slice(__pyx_t_1, __pyx_t_2);
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":102
 *     return PyBytes_FromStringAndSize(ob.c_str(), ob.size())
 * 
 * cdef Slice bytes_to_slice(ob) except *:             # <<<<<<<<<<<<<<
 *     return Slice(PyBytes_AsString(ob), PyBytes_Size(ob))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.bytes_to_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":105
 *     return Slice(PyBytes_AsString(ob), PyBytes_Size(ob))
 * 
 * cdef slice_to_bytes(Slice sl):             # <<<<<<<<<<<<<<
 *     return PyBytes_FromStringAndSize(sl.data(), sl.size())
 * 
 */

static PyObject *__pyx_f_7rocksdb_8_rocksdb_slice_to_bytes(rocksdb::Slice __pyx_v_sl) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("slice_to_bytes", 0);

  /* "rocksdb/_rocksdb.pyx":106
 * 
 * cdef slice_to_bytes(Slice sl):
 *     return PyBytes_FromStringAndSize(sl.data(), sl.size())             # <<<<<<<<<<<<<<
 * 
 * ## only for filsystem paths
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyBytes_FromStringAndSize(__pyx_v_sl.data(), __pyx_v_sl.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":105
 *     return Slice(PyBytes_AsString(ob), PyBytes_Size(ob))
 * 
 * cdef slice_to_bytes(Slice sl):             # <<<<<<<<<<<<<<
 *     return PyBytes_FromStringAndSize(sl.data(), sl.size())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.slice_to_bytes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":109
 * 
 * ## only for filsystem paths
 * cdef string path_to_string(object path) except *:             # <<<<<<<<<<<<<<
 *     if isinstance(path, bytes):
 *         return bytes_to_string(path)
 */

static std::string __pyx_f_7rocksdb_8_rocksdb_path_to_string(PyObject *__pyx_v_path) {
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  std::string __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("path_to_string", 0);
  __Pyx_INCREF(__pyx_v_path);

  /* "rocksdb/_rocksdb.pyx":110
 * ## only for filsystem paths
 * cdef string path_to_string(object path) except *:
 *     if isinstance(path, bytes):             # <<<<<<<<<<<<<<
 *         return bytes_to_string(path)
 *     if isinstance(path, unicode):
 */
  __pyx_t_1 = PyBytes_Check(__pyx_v_path); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "rocksdb/_rocksdb.pyx":111
 * cdef string path_to_string(object path) except *:
 *     if isinstance(path, bytes):
 *         return bytes_to_string(path)             # <<<<<<<<<<<<<<
 *     if isinstance(path, unicode):
 *         path = path.encode(sys.getfilesystemencoding())
 */
    __pyx_t_3 = __pyx_f_7rocksdb_8_rocksdb_bytes_to_string(__pyx_v_path); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 111, __pyx_L1_error)
    __pyx_r = __pyx_t_3;
    goto __pyx_L0;

    /* "rocksdb/_rocksdb.pyx":110
 * ## only for filsystem paths
 * cdef string path_to_string(object path) except *:
 *     if isinstance(path, bytes):             # <<<<<<<<<<<<<<
 *         return bytes_to_string(path)
 *     if isinstance(path, unicode):
 */
  }

  /* "rocksdb/_rocksdb.pyx":112
 *     if isinstance(path, bytes):
 *         return bytes_to_string(path)
 *     if isinstance(path, unicode):             # <<<<<<<<<<<<<<
 *         path = path.encode(sys.getfilesystemencoding())
 *         return bytes_to_string(path)
 */
  __pyx_t_2 = PyUnicode_Check(__pyx_v_path); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":113
 *         return bytes_to_string(path)
 *     if isinstance(path, unicode):
 *         path = path.encode(sys.getfilesystemencoding())             # <<<<<<<<<<<<<<
 *         return bytes_to_string(path)
 *     else:
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_path, __pyx_n_s_encode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 113, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_sys); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 113, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_getfilesystemencoding); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 113, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    if (__pyx_t_7) {
      __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 113, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else {
      __pyx_t_6 = __Pyx_PyObject_CallNoArg(__pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 113, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (!__pyx_t_8) {
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 113, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_t_6};
        __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 113, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_t_6};
        __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 113, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      {
        __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 113, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_8); __pyx_t_8 = NULL;
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_6);
        __pyx_t_6 = 0;
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_7, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 113, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF_SET(__pyx_v_path, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "rocksdb/_rocksdb.pyx":114
 *     if isinstance(path, unicode):
 *         path = path.encode(sys.getfilesystemencoding())
 *         return bytes_to_string(path)             # <<<<<<<<<<<<<<
 *     else:
 *        raise TypeError("Wrong type for path: %s" % path)
 */
    __pyx_t_3 = __pyx_f_7rocksdb_8_rocksdb_bytes_to_string(__pyx_v_path); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 114, __pyx_L1_error)
    __pyx_r = __pyx_t_3;
    goto __pyx_L0;

    /* "rocksdb/_rocksdb.pyx":112
 *     if isinstance(path, bytes):
 *         return bytes_to_string(path)
 *     if isinstance(path, unicode):             # <<<<<<<<<<<<<<
 *         path = path.encode(sys.getfilesystemencoding())
 *         return bytes_to_string(path)
 */
  }

  /* "rocksdb/_rocksdb.pyx":116
 *         return bytes_to_string(path)
 *     else:
 *        raise TypeError("Wrong type for path: %s" % path)             # <<<<<<<<<<<<<<
 * 
 * cdef object string_to_path(string path):
 */
  /*else*/ {
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Wrong_type_for_path_s, __pyx_v_path); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 116, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 116, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 116, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 116, __pyx_L1_error)
  }

  /* "rocksdb/_rocksdb.pyx":109
 * 
 * ## only for filsystem paths
 * cdef string path_to_string(object path) except *:             # <<<<<<<<<<<<<<
 *     if isinstance(path, bytes):
 *         return bytes_to_string(path)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("rocksdb._rocksdb.path_to_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_path);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":118
 *        raise TypeError("Wrong type for path: %s" % path)
 * 
 * cdef object string_to_path(string path):             # <<<<<<<<<<<<<<
 *     fs_encoding = sys.getfilesystemencoding().encode('ascii')
 *     return PyUnicode_Decode(path.c_str(), path.size(), fs_encoding, "replace")
 */

static PyObject *__pyx_f_7rocksdb_8_rocksdb_string_to_path(std::string __pyx_v_path) {
  PyObject *__pyx_v_fs_encoding = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  __Pyx_RefNannySetupContext("string_to_path", 0);

  /* "rocksdb/_rocksdb.pyx":119
 * 
 * cdef object string_to_path(string path):
 *     fs_encoding = sys.getfilesystemencoding().encode('ascii')             # <<<<<<<<<<<<<<
 *     return PyUnicode_Decode(path.c_str(), path.size(), fs_encoding, "replace")
 * 
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_sys); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_getfilesystemencoding); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 119, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 119, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_encode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_fs_encoding = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":120
 * cdef object string_to_path(string path):
 *     fs_encoding = sys.getfilesystemencoding().encode('ascii')
 *     return PyUnicode_Decode(path.c_str(), path.size(), fs_encoding, "replace")             # <<<<<<<<<<<<<<
 * 
 * ## Here comes the stuff for the comparator
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __Pyx_PyObject_AsString(__pyx_v_fs_encoding); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 120, __pyx_L1_error)
  __pyx_t_1 = PyUnicode_Decode(__pyx_v_path.c_str(), __pyx_v_path.size(), __pyx_t_4, ((char *)"replace")); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":118
 *        raise TypeError("Wrong type for path: %s" % path)
 * 
 * cdef object string_to_path(string path):             # <<<<<<<<<<<<<<
 *     fs_encoding = sys.getfilesystemencoding().encode('ascii')
 *     return PyUnicode_Decode(path.c_str(), path.size(), fs_encoding, "replace")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("rocksdb._rocksdb.string_to_path", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_fs_encoding);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":125
 * @cython.internal
 * cdef class PyComparator(object):
 *     cdef object get_ob(self):             # <<<<<<<<<<<<<<
 *         return None
 * 
 */

static PyObject *__pyx_f_7rocksdb_8_rocksdb_12PyComparator_get_ob(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_PyComparator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_ob", 0);

  /* "rocksdb/_rocksdb.pyx":126
 * cdef class PyComparator(object):
 *     cdef object get_ob(self):
 *         return None             # <<<<<<<<<<<<<<
 * 
 *     cdef const comparator.Comparator* get_comparator(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_None);
  __pyx_r = Py_None;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":125
 * @cython.internal
 * cdef class PyComparator(object):
 *     cdef object get_ob(self):             # <<<<<<<<<<<<<<
 *         return None
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":128
 *         return None
 * 
 *     cdef const comparator.Comparator* get_comparator(self):             # <<<<<<<<<<<<<<
 *         return NULL
 * 
 */

static rocksdb::Comparator const *__pyx_f_7rocksdb_8_rocksdb_12PyComparator_get_comparator(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_PyComparator *__pyx_v_self) {
  rocksdb::Comparator const *__pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_comparator", 0);

  /* "rocksdb/_rocksdb.pyx":129
 * 
 *     cdef const comparator.Comparator* get_comparator(self):
 *         return NULL             # <<<<<<<<<<<<<<
 * 
 *     cdef set_info_log(self, shared_ptr[logger.Logger] info_log):
 */
  __pyx_r = NULL;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":128
 *         return None
 * 
 *     cdef const comparator.Comparator* get_comparator(self):             # <<<<<<<<<<<<<<
 *         return NULL
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":131
 *         return NULL
 * 
 *     cdef set_info_log(self, shared_ptr[logger.Logger] info_log):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

static PyObject *__pyx_f_7rocksdb_8_rocksdb_12PyComparator_set_info_log(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_PyComparator *__pyx_v_self, CYTHON_UNUSED std::shared_ptr<rocksdb::Logger>  __pyx_v_info_log) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_info_log", 0);

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":139
 *     cdef object ob
 * 
 *     def __cinit__(self, object ob):             # <<<<<<<<<<<<<<
 *         self.comparator_ptr = NULL
 *         if not isinstance(ob, IComparator):
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_19PyGenericComparator_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_19PyGenericComparator_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_ob = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_ob,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ob)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 139, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_ob = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 139, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.PyGenericComparator.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_19PyGenericComparator___cinit__(((struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericComparator *)__pyx_v_self), __pyx_v_ob);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_19PyGenericComparator___cinit__(struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericComparator *__pyx_v_self, PyObject *__pyx_v_ob) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  std::string __pyx_t_6;
  py_rocks::ComparatorWrapper *__pyx_t_7;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "rocksdb/_rocksdb.pyx":140
 * 
 *     def __cinit__(self, object ob):
 *         self.comparator_ptr = NULL             # <<<<<<<<<<<<<<
 *         if not isinstance(ob, IComparator):
 *             raise TypeError("%s is not of type %s" % (ob, IComparator))
 */
  __pyx_v_self->comparator_ptr = NULL;

  /* "rocksdb/_rocksdb.pyx":141
 *     def __cinit__(self, object ob):
 *         self.comparator_ptr = NULL
 *         if not isinstance(ob, IComparator):             # <<<<<<<<<<<<<<
 *             raise TypeError("%s is not of type %s" % (ob, IComparator))
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_IComparator); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_IsInstance(__pyx_v_ob, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = ((!(__pyx_t_2 != 0)) != 0);
  if (__pyx_t_3) {

    /* "rocksdb/_rocksdb.pyx":142
 *         self.comparator_ptr = NULL
 *         if not isinstance(ob, IComparator):
 *             raise TypeError("%s is not of type %s" % (ob, IComparator))             # <<<<<<<<<<<<<<
 * 
 *         self.ob = ob
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_IComparator); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 142, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 142, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v_ob);
    __Pyx_GIVEREF(__pyx_v_ob);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_ob);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_s_is_not_of_type_s, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 142, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 142, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 142, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 142, __pyx_L1_error)

    /* "rocksdb/_rocksdb.pyx":141
 *     def __cinit__(self, object ob):
 *         self.comparator_ptr = NULL
 *         if not isinstance(ob, IComparator):             # <<<<<<<<<<<<<<
 *             raise TypeError("%s is not of type %s" % (ob, IComparator))
 * 
 */
  }

  /* "rocksdb/_rocksdb.pyx":144
 *             raise TypeError("%s is not of type %s" % (ob, IComparator))
 * 
 *         self.ob = ob             # <<<<<<<<<<<<<<
 *         self.comparator_ptr = new comparator.ComparatorWrapper(
 *                 bytes_to_string(ob.name()),
 */
  __Pyx_INCREF(__pyx_v_ob);
  __Pyx_GIVEREF(__pyx_v_ob);
  __Pyx_GOTREF(__pyx_v_self->ob);
  __Pyx_DECREF(__pyx_v_self->ob);
  __pyx_v_self->ob = __pyx_v_ob;

  /* "rocksdb/_rocksdb.pyx":146
 *         self.ob = ob
 *         self.comparator_ptr = new comparator.ComparatorWrapper(
 *                 bytes_to_string(ob.name()),             # <<<<<<<<<<<<<<
 *                 <void*>ob,
 *                 compare_callback)
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_ob, __pyx_n_s_name); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_5) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 146, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 146, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = __pyx_f_7rocksdb_8_rocksdb_bytes_to_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 146, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":145
 * 
 *         self.ob = ob
 *         self.comparator_ptr = new comparator.ComparatorWrapper(             # <<<<<<<<<<<<<<
 *                 bytes_to_string(ob.name()),
 *                 <void*>ob,
 */
  try {
    __pyx_t_7 = new py_rocks::ComparatorWrapper(__pyx_t_6, ((void *)__pyx_v_ob), __pyx_f_7rocksdb_8_rocksdb_compare_callback);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 145, __pyx_L1_error)
  }
  __pyx_v_self->comparator_ptr = __pyx_t_7;

  /* "rocksdb/_rocksdb.pyx":139
 *     cdef object ob
 * 
 *     def __cinit__(self, object ob):             # <<<<<<<<<<<<<<
 *         self.comparator_ptr = NULL
 *         if not isinstance(ob, IComparator):
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("rocksdb._rocksdb.PyGenericComparator.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":150
 *                 compare_callback)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if not self.comparator_ptr == NULL:
 *             del self.comparator_ptr
 */

/* Python wrapper */
static void __pyx_pw_7rocksdb_8_rocksdb_19PyGenericComparator_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_7rocksdb_8_rocksdb_19PyGenericComparator_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_7rocksdb_8_rocksdb_19PyGenericComparator_2__dealloc__(((struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericComparator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_7rocksdb_8_rocksdb_19PyGenericComparator_2__dealloc__(struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericComparator *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "rocksdb/_rocksdb.pyx":151
 * 
 *     def __dealloc__(self):
 *         if not self.comparator_ptr == NULL:             # <<<<<<<<<<<<<<
 *             del self.comparator_ptr
 * 
 */
  __pyx_t_1 = ((!((__pyx_v_self->comparator_ptr == NULL) != 0)) != 0);
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":152
 *     def __dealloc__(self):
 *         if not self.comparator_ptr == NULL:
 *             del self.comparator_ptr             # <<<<<<<<<<<<<<
 * 
 *     cdef object get_ob(self):
 */
    delete __pyx_v_self->comparator_ptr;

    /* "rocksdb/_rocksdb.pyx":151
 * 
 *     def __dealloc__(self):
 *         if not self.comparator_ptr == NULL:             # <<<<<<<<<<<<<<
 *             del self.comparator_ptr
 * 
 */
  }

  /* "rocksdb/_rocksdb.pyx":150
 *                 compare_callback)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if not self.comparator_ptr == NULL:
 *             del self.comparator_ptr
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "rocksdb/_rocksdb.pyx":154
 *             del self.comparator_ptr
 * 
 *     cdef object get_ob(self):             # <<<<<<<<<<<<<<
 *         return self.ob
 * 
 */

static PyObject *__pyx_f_7rocksdb_8_rocksdb_19PyGenericComparator_get_ob(struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericComparator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_ob", 0);

  /* "rocksdb/_rocksdb.pyx":155
 * 
 *     cdef object get_ob(self):
 *         return self.ob             # <<<<<<<<<<<<<<
 * 
 *     cdef const comparator.Comparator* get_comparator(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->ob);
  __pyx_r = __pyx_v_self->ob;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":154
 *             del self.comparator_ptr
 * 
 *     cdef object get_ob(self):             # <<<<<<<<<<<<<<
 *         return self.ob
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":157
 *         return self.ob
 * 
 *     cdef const comparator.Comparator* get_comparator(self):             # <<<<<<<<<<<<<<
 *         return <comparator.Comparator*> self.comparator_ptr
 * 
 */

static rocksdb::Comparator const *__pyx_f_7rocksdb_8_rocksdb_19PyGenericComparator_get_comparator(struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericComparator *__pyx_v_self) {
  rocksdb::Comparator const *__pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_comparator", 0);

  /* "rocksdb/_rocksdb.pyx":158
 * 
 *     cdef const comparator.Comparator* get_comparator(self):
 *         return <comparator.Comparator*> self.comparator_ptr             # <<<<<<<<<<<<<<
 * 
 *     cdef set_info_log(self, shared_ptr[logger.Logger] info_log):
 */
  __pyx_r = ((rocksdb::Comparator *)__pyx_v_self->comparator_ptr);
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":157
 *         return self.ob
 * 
 *     cdef const comparator.Comparator* get_comparator(self):             # <<<<<<<<<<<<<<
 *         return <comparator.Comparator*> self.comparator_ptr
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":160
 *         return <comparator.Comparator*> self.comparator_ptr
 * 
 *     cdef set_info_log(self, shared_ptr[logger.Logger] info_log):             # <<<<<<<<<<<<<<
 *         self.comparator_ptr.set_info_log(info_log)
 * 
 */

static PyObject *__pyx_f_7rocksdb_8_rocksdb_19PyGenericComparator_set_info_log(struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericComparator *__pyx_v_self, std::shared_ptr<rocksdb::Logger>  __pyx_v_info_log) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_info_log", 0);

  /* "rocksdb/_rocksdb.pyx":161
 * 
 *     cdef set_info_log(self, shared_ptr[logger.Logger] info_log):
 *         self.comparator_ptr.set_info_log(info_log)             # <<<<<<<<<<<<<<
 * 
 * @cython.internal
 */
  try {
    __pyx_v_self->comparator_ptr->set_info_log(__pyx_v_info_log);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 161, __pyx_L1_error)
  }

  /* "rocksdb/_rocksdb.pyx":160
 *         return <comparator.Comparator*> self.comparator_ptr
 * 
 *     cdef set_info_log(self, shared_ptr[logger.Logger] info_log):             # <<<<<<<<<<<<<<
 *         self.comparator_ptr.set_info_log(info_log)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.PyGenericComparator.set_info_log", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":167
 *     cdef const comparator.Comparator* comparator_ptr
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.comparator_ptr = comparator.BytewiseComparator()
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_20PyBytewiseComparator_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_20PyBytewiseComparator_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_20PyBytewiseComparator___cinit__(((struct __pyx_obj_7rocksdb_8_rocksdb_PyBytewiseComparator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_20PyBytewiseComparator___cinit__(struct __pyx_obj_7rocksdb_8_rocksdb_PyBytewiseComparator *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  rocksdb::Comparator const *__pyx_t_1;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "rocksdb/_rocksdb.pyx":168
 * 
 *     def __cinit__(self):
 *         self.comparator_ptr = comparator.BytewiseComparator()             # <<<<<<<<<<<<<<
 * 
 *     def name(self):
 */
  try {
    __pyx_t_1 = rocksdb::BytewiseComparator();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 168, __pyx_L1_error)
  }
  __pyx_v_self->comparator_ptr = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":167
 *     cdef const comparator.Comparator* comparator_ptr
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.comparator_ptr = comparator.BytewiseComparator()
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.PyBytewiseComparator.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":170
 *         self.comparator_ptr = comparator.BytewiseComparator()
 * 
 *     def name(self):             # <<<<<<<<<<<<<<
 *         return PyBytes_FromString(self.comparator_ptr.Name())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_20PyBytewiseComparator_3name(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_20PyBytewiseComparator_3name(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("name (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_20PyBytewiseComparator_2name(((struct __pyx_obj_7rocksdb_8_rocksdb_PyBytewiseComparator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_20PyBytewiseComparator_2name(struct __pyx_obj_7rocksdb_8_rocksdb_PyBytewiseComparator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("name", 0);

  /* "rocksdb/_rocksdb.pyx":171
 * 
 *     def name(self):
 *         return PyBytes_FromString(self.comparator_ptr.Name())             # <<<<<<<<<<<<<<
 * 
 *     def compare(self, a, b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyBytes_FromString(__pyx_v_self->comparator_ptr->Name()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":170
 *         self.comparator_ptr = comparator.BytewiseComparator()
 * 
 *     def name(self):             # <<<<<<<<<<<<<<
 *         return PyBytes_FromString(self.comparator_ptr.Name())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.PyBytewiseComparator.name", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":173
 *         return PyBytes_FromString(self.comparator_ptr.Name())
 * 
 *     def compare(self, a, b):             # <<<<<<<<<<<<<<
 *         return self.comparator_ptr.Compare(
 *             bytes_to_slice(a),
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_20PyBytewiseComparator_5compare(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_20PyBytewiseComparator_5compare(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_a = 0;
  PyObject *__pyx_v_b = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compare (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_b,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compare", 1, 2, 2, 1); __PYX_ERR(0, 173, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "compare") < 0)) __PYX_ERR(0, 173, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_a = values[0];
    __pyx_v_b = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("compare", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 173, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.PyBytewiseComparator.compare", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_20PyBytewiseComparator_4compare(((struct __pyx_obj_7rocksdb_8_rocksdb_PyBytewiseComparator *)__pyx_v_self), __pyx_v_a, __pyx_v_b);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_20PyBytewiseComparator_4compare(struct __pyx_obj_7rocksdb_8_rocksdb_PyBytewiseComparator *__pyx_v_self, PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  rocksdb::Slice __pyx_t_1;
  rocksdb::Slice __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("compare", 0);

  /* "rocksdb/_rocksdb.pyx":174
 * 
 *     def compare(self, a, b):
 *         return self.comparator_ptr.Compare(             # <<<<<<<<<<<<<<
 *             bytes_to_slice(a),
 *             bytes_to_slice(b))
 */
  __Pyx_XDECREF(__pyx_r);

  /* "rocksdb/_rocksdb.pyx":175
 *     def compare(self, a, b):
 *         return self.comparator_ptr.Compare(
 *             bytes_to_slice(a),             # <<<<<<<<<<<<<<
 *             bytes_to_slice(b))
 * 
 */
  __pyx_t_1 = __pyx_f_7rocksdb_8_rocksdb_bytes_to_slice(__pyx_v_a); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 175, __pyx_L1_error)

  /* "rocksdb/_rocksdb.pyx":176
 *         return self.comparator_ptr.Compare(
 *             bytes_to_slice(a),
 *             bytes_to_slice(b))             # <<<<<<<<<<<<<<
 * 
 *     cdef object get_ob(self):
 */
  __pyx_t_2 = __pyx_f_7rocksdb_8_rocksdb_bytes_to_slice(__pyx_v_b); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 176, __pyx_L1_error)

  /* "rocksdb/_rocksdb.pyx":174
 * 
 *     def compare(self, a, b):
 *         return self.comparator_ptr.Compare(             # <<<<<<<<<<<<<<
 *             bytes_to_slice(a),
 *             bytes_to_slice(b))
 */
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_self->comparator_ptr->Compare(__pyx_t_1, __pyx_t_2)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 174, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":173
 *         return PyBytes_FromString(self.comparator_ptr.Name())
 * 
 *     def compare(self, a, b):             # <<<<<<<<<<<<<<
 *         return self.comparator_ptr.Compare(
 *             bytes_to_slice(a),
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("rocksdb._rocksdb.PyBytewiseComparator.compare", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":178
 *             bytes_to_slice(b))
 * 
 *     cdef object get_ob(self):             # <<<<<<<<<<<<<<
 *        return self
 * 
 */

static PyObject *__pyx_f_7rocksdb_8_rocksdb_20PyBytewiseComparator_get_ob(struct __pyx_obj_7rocksdb_8_rocksdb_PyBytewiseComparator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_ob", 0);

  /* "rocksdb/_rocksdb.pyx":179
 * 
 *     cdef object get_ob(self):
 *        return self             # <<<<<<<<<<<<<<
 * 
 *     cdef const comparator.Comparator* get_comparator(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":178
 *             bytes_to_slice(b))
 * 
 *     cdef object get_ob(self):             # <<<<<<<<<<<<<<
 *        return self
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":181
 *        return self
 * 
 *     cdef const comparator.Comparator* get_comparator(self):             # <<<<<<<<<<<<<<
 *         return self.comparator_ptr
 * 
 */

static rocksdb::Comparator const *__pyx_f_7rocksdb_8_rocksdb_20PyBytewiseComparator_get_comparator(struct __pyx_obj_7rocksdb_8_rocksdb_PyBytewiseComparator *__pyx_v_self) {
  rocksdb::Comparator const *__pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_comparator", 0);

  /* "rocksdb/_rocksdb.pyx":182
 * 
 *     cdef const comparator.Comparator* get_comparator(self):
 *         return self.comparator_ptr             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_self->comparator_ptr;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":181
 *        return self
 * 
 *     cdef const comparator.Comparator* get_comparator(self):             # <<<<<<<<<<<<<<
 *         return self.comparator_ptr
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":186
 * 
 * 
 * cdef int compare_callback(             # <<<<<<<<<<<<<<
 *     void* ctx,
 *     logger.Logger* log,
 */

static int __pyx_f_7rocksdb_8_rocksdb_compare_callback(void *__pyx_v_ctx, rocksdb::Logger *__pyx_v_log, std::string &__pyx_v_error_msg, rocksdb::Slice const &__pyx_v_a, rocksdb::Slice const &__pyx_v_b) {
  PyObject *__pyx_v_error = NULL;
  PyObject *__pyx_v_tb = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  char *__pyx_t_11;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("compare_callback", 0);

  /* "rocksdb/_rocksdb.pyx":193
 *     const Slice& b) with gil:
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         return (<object>ctx).compare(slice_to_bytes(a), slice_to_bytes(b))
 *     except BaseException as error:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "rocksdb/_rocksdb.pyx":194
 * 
 *     try:
 *         return (<object>ctx).compare(slice_to_bytes(a), slice_to_bytes(b))             # <<<<<<<<<<<<<<
 *     except BaseException as error:
 *         tb = traceback.format_exc()
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_ctx), __pyx_n_s_compare); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 194, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __pyx_f_7rocksdb_8_rocksdb_slice_to_bytes(__pyx_v_a); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 194, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = __pyx_f_7rocksdb_8_rocksdb_slice_to_bytes(__pyx_v_b); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 194, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = NULL;
      __pyx_t_9 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_9 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_t_6, __pyx_t_7};
        __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 194, __pyx_L3_error)
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_t_6, __pyx_t_7};
        __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 194, __pyx_L3_error)
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      } else
      #endif
      {
        __pyx_t_10 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 194, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_10);
        if (__pyx_t_8) {
          __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_8); __pyx_t_8 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_9, __pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_9, __pyx_t_7);
        __pyx_t_6 = 0;
        __pyx_t_7 = 0;
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_10, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 194, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 194, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_r = __pyx_t_9;
      goto __pyx_L7_try_return;

      /* "rocksdb/_rocksdb.pyx":193
 *     const Slice& b) with gil:
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         return (<object>ctx).compare(slice_to_bytes(a), slice_to_bytes(b))
 *     except BaseException as error:
 */
    }
    __pyx_L3_error:;
    __Pyx_PyThreadState_assign
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "rocksdb/_rocksdb.pyx":195
 *     try:
 *         return (<object>ctx).compare(slice_to_bytes(a), slice_to_bytes(b))
 *     except BaseException as error:             # <<<<<<<<<<<<<<
 *         tb = traceback.format_exc()
 *         logger.Log(log, "Error in compare callback: %s", <bytes>tb)
 */
    __pyx_t_9 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_BaseException);
    if (__pyx_t_9) {
      __Pyx_AddTraceback("rocksdb._rocksdb.compare_callback", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_5, &__pyx_t_10) < 0) __PYX_ERR(0, 195, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_INCREF(__pyx_t_5);
      __pyx_v_error = __pyx_t_5;

      /* "rocksdb/_rocksdb.pyx":196
 *         return (<object>ctx).compare(slice_to_bytes(a), slice_to_bytes(b))
 *     except BaseException as error:
 *         tb = traceback.format_exc()             # <<<<<<<<<<<<<<
 *         logger.Log(log, "Error in compare callback: %s", <bytes>tb)
 *         error_msg.assign(<bytes>str(error))
 */
      __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_traceback); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 196, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_format_exc); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 196, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
        }
      }
      if (__pyx_t_6) {
        __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 196, __pyx_L5_except_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else {
        __pyx_t_7 = __Pyx_PyObject_CallNoArg(__pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 196, __pyx_L5_except_error)
      }
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_v_tb = __pyx_t_7;
      __pyx_t_7 = 0;

      /* "rocksdb/_rocksdb.pyx":197
 *     except BaseException as error:
 *         tb = traceback.format_exc()
 *         logger.Log(log, "Error in compare callback: %s", <bytes>tb)             # <<<<<<<<<<<<<<
 *         error_msg.assign(<bytes>str(error))
 * 
 */
      __pyx_t_11 = __Pyx_PyObject_AsString(__pyx_v_tb); if (unlikely((!__pyx_t_11) && PyErr_Occurred())) __PYX_ERR(0, 197, __pyx_L5_except_error)
      try {
        rocksdb::Log(__pyx_v_log, ((char const *)"Error in compare callback: %s"), __pyx_t_11);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 197, __pyx_L5_except_error)
      }

      /* "rocksdb/_rocksdb.pyx":198
 *         tb = traceback.format_exc()
 *         logger.Log(log, "Error in compare callback: %s", <bytes>tb)
 *         error_msg.assign(<bytes>str(error))             # <<<<<<<<<<<<<<
 * 
 * BytewiseComparator = PyBytewiseComparator
 */
      __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 198, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_v_error);
      __Pyx_GIVEREF(__pyx_v_error);
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_v_error);
      __pyx_t_8 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_7, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 198, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_11 = __Pyx_PyObject_AsString(__pyx_t_8); if (unlikely((!__pyx_t_11) && PyErr_Occurred())) __PYX_ERR(0, 198, __pyx_L5_except_error)
      __pyx_v_error_msg.assign(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      goto __pyx_L4_exception_handled;
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "rocksdb/_rocksdb.pyx":193
 *     const Slice& b) with gil:
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         return (<object>ctx).compare(slice_to_bytes(a), slice_to_bytes(b))
 *     except BaseException as error:
 */
    __Pyx_PyThreadState_assign
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L7_try_return:;
    __Pyx_PyThreadState_assign
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L0;
    __pyx_L4_exception_handled:;
    __Pyx_PyThreadState_assign
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
  }

  /* "rocksdb/_rocksdb.pyx":186
 * 
 * 
 * cdef int compare_callback(             # <<<<<<<<<<<<<<
 *     void* ctx,
 *     logger.Logger* log,
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_WriteUnraisable("rocksdb._rocksdb.compare_callback", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_error);
  __Pyx_XDECREF(__pyx_v_tb);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":208
 * @cython.internal
 * cdef class PyFilterPolicy(object):
 *     cdef object get_ob(self):             # <<<<<<<<<<<<<<
 *         return None
 * 
 */

static PyObject *__pyx_f_7rocksdb_8_rocksdb_14PyFilterPolicy_get_ob(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_PyFilterPolicy *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_ob", 0);

  /* "rocksdb/_rocksdb.pyx":209
 * cdef class PyFilterPolicy(object):
 *     cdef object get_ob(self):
 *         return None             # <<<<<<<<<<<<<<
 * 
 *     cdef shared_ptr[ConstFilterPolicy] get_policy(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_None);
  __pyx_r = Py_None;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":208
 * @cython.internal
 * cdef class PyFilterPolicy(object):
 *     cdef object get_ob(self):             # <<<<<<<<<<<<<<
 *         return None
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":211
 *         return None
 * 
 *     cdef shared_ptr[ConstFilterPolicy] get_policy(self):             # <<<<<<<<<<<<<<
 *         return shared_ptr[ConstFilterPolicy]()
 * 
 */

static std::shared_ptr<__pyx_t_7rocksdb_8_rocksdb_ConstFilterPolicy>  __pyx_f_7rocksdb_8_rocksdb_14PyFilterPolicy_get_policy(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_PyFilterPolicy *__pyx_v_self) {
  std::shared_ptr<__pyx_t_7rocksdb_8_rocksdb_ConstFilterPolicy>  __pyx_r;
  __Pyx_RefNannyDeclarations
  std::shared_ptr<__pyx_t_7rocksdb_8_rocksdb_ConstFilterPolicy>  __pyx_t_1;
  __Pyx_RefNannySetupContext("get_policy", 0);

  /* "rocksdb/_rocksdb.pyx":212
 * 
 *     cdef shared_ptr[ConstFilterPolicy] get_policy(self):
 *         return shared_ptr[ConstFilterPolicy]()             # <<<<<<<<<<<<<<
 * 
 *     cdef set_info_log(self, shared_ptr[logger.Logger] info_log):
 */
  try {
    __pyx_t_1 = std::shared_ptr<__pyx_t_7rocksdb_8_rocksdb_ConstFilterPolicy> ();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 212, __pyx_L1_error)
  }
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":211
 *         return None
 * 
 *     cdef shared_ptr[ConstFilterPolicy] get_policy(self):             # <<<<<<<<<<<<<<
 *         return shared_ptr[ConstFilterPolicy]()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("rocksdb._rocksdb.PyFilterPolicy.get_policy", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":214
 *         return shared_ptr[ConstFilterPolicy]()
 * 
 *     cdef set_info_log(self, shared_ptr[logger.Logger] info_log):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

static PyObject *__pyx_f_7rocksdb_8_rocksdb_14PyFilterPolicy_set_info_log(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_PyFilterPolicy *__pyx_v_self, CYTHON_UNUSED std::shared_ptr<rocksdb::Logger>  __pyx_v_info_log) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_info_log", 0);

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":222
 *     cdef object ob
 * 
 *     def __cinit__(self, object ob):             # <<<<<<<<<<<<<<
 *         if not isinstance(ob, IFilterPolicy):
 *             raise TypeError("%s is not of type %s" % (ob, IFilterPolicy))
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_21PyGenericFilterPolicy_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_21PyGenericFilterPolicy_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_ob = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_ob,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ob)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 222, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_ob = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 222, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.PyGenericFilterPolicy.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_21PyGenericFilterPolicy___cinit__(((struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericFilterPolicy *)__pyx_v_self), __pyx_v_ob);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_21PyGenericFilterPolicy___cinit__(struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericFilterPolicy *__pyx_v_self, PyObject *__pyx_v_ob) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  std::string __pyx_t_6;
  py_rocks::FilterPolicyWrapper *__pyx_t_7;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "rocksdb/_rocksdb.pyx":223
 * 
 *     def __cinit__(self, object ob):
 *         if not isinstance(ob, IFilterPolicy):             # <<<<<<<<<<<<<<
 *             raise TypeError("%s is not of type %s" % (ob, IFilterPolicy))
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_IFilterPolicy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_IsInstance(__pyx_v_ob, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 223, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = ((!(__pyx_t_2 != 0)) != 0);
  if (__pyx_t_3) {

    /* "rocksdb/_rocksdb.pyx":224
 *     def __cinit__(self, object ob):
 *         if not isinstance(ob, IFilterPolicy):
 *             raise TypeError("%s is not of type %s" % (ob, IFilterPolicy))             # <<<<<<<<<<<<<<
 * 
 *         self.ob = ob
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_IFilterPolicy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 224, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 224, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v_ob);
    __Pyx_GIVEREF(__pyx_v_ob);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_ob);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_s_is_not_of_type_s, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 224, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 224, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 224, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 224, __pyx_L1_error)

    /* "rocksdb/_rocksdb.pyx":223
 * 
 *     def __cinit__(self, object ob):
 *         if not isinstance(ob, IFilterPolicy):             # <<<<<<<<<<<<<<
 *             raise TypeError("%s is not of type %s" % (ob, IFilterPolicy))
 * 
 */
  }

  /* "rocksdb/_rocksdb.pyx":226
 *             raise TypeError("%s is not of type %s" % (ob, IFilterPolicy))
 * 
 *         self.ob = ob             # <<<<<<<<<<<<<<
 *         self.policy.reset(new filter_policy.FilterPolicyWrapper(
 *                 bytes_to_string(ob.name()),
 */
  __Pyx_INCREF(__pyx_v_ob);
  __Pyx_GIVEREF(__pyx_v_ob);
  __Pyx_GOTREF(__pyx_v_self->ob);
  __Pyx_DECREF(__pyx_v_self->ob);
  __pyx_v_self->ob = __pyx_v_ob;

  /* "rocksdb/_rocksdb.pyx":228
 *         self.ob = ob
 *         self.policy.reset(new filter_policy.FilterPolicyWrapper(
 *                 bytes_to_string(ob.name()),             # <<<<<<<<<<<<<<
 *                 <void*>ob,
 *                 create_filter_callback,
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_ob, __pyx_n_s_name); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_5) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 228, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 228, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = __pyx_f_7rocksdb_8_rocksdb_bytes_to_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 228, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":227
 * 
 *         self.ob = ob
 *         self.policy.reset(new filter_policy.FilterPolicyWrapper(             # <<<<<<<<<<<<<<
 *                 bytes_to_string(ob.name()),
 *                 <void*>ob,
 */
  try {
    __pyx_t_7 = new py_rocks::FilterPolicyWrapper(__pyx_t_6, ((void *)__pyx_v_ob), __pyx_f_7rocksdb_8_rocksdb_create_filter_callback, __pyx_f_7rocksdb_8_rocksdb_key_may_match_callback);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 227, __pyx_L1_error)
  }
  try {
    __pyx_v_self->policy.reset(__pyx_t_7);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 227, __pyx_L1_error)
  }

  /* "rocksdb/_rocksdb.pyx":222
 *     cdef object ob
 * 
 *     def __cinit__(self, object ob):             # <<<<<<<<<<<<<<
 *         if not isinstance(ob, IFilterPolicy):
 *             raise TypeError("%s is not of type %s" % (ob, IFilterPolicy))
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("rocksdb._rocksdb.PyGenericFilterPolicy.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":233
 *                 key_may_match_callback))
 * 
 *     cdef object get_ob(self):             # <<<<<<<<<<<<<<
 *         return self.ob
 * 
 */

static PyObject *__pyx_f_7rocksdb_8_rocksdb_21PyGenericFilterPolicy_get_ob(struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericFilterPolicy *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_ob", 0);

  /* "rocksdb/_rocksdb.pyx":234
 * 
 *     cdef object get_ob(self):
 *         return self.ob             # <<<<<<<<<<<<<<
 * 
 *     cdef shared_ptr[ConstFilterPolicy] get_policy(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->ob);
  __pyx_r = __pyx_v_self->ob;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":233
 *                 key_may_match_callback))
 * 
 *     cdef object get_ob(self):             # <<<<<<<<<<<<<<
 *         return self.ob
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":236
 *         return self.ob
 * 
 *     cdef shared_ptr[ConstFilterPolicy] get_policy(self):             # <<<<<<<<<<<<<<
 *         return <shared_ptr[ConstFilterPolicy]>(self.policy)
 * 
 */

static std::shared_ptr<__pyx_t_7rocksdb_8_rocksdb_ConstFilterPolicy>  __pyx_f_7rocksdb_8_rocksdb_21PyGenericFilterPolicy_get_policy(struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericFilterPolicy *__pyx_v_self) {
  std::shared_ptr<__pyx_t_7rocksdb_8_rocksdb_ConstFilterPolicy>  __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_policy", 0);

  /* "rocksdb/_rocksdb.pyx":237
 * 
 *     cdef shared_ptr[ConstFilterPolicy] get_policy(self):
 *         return <shared_ptr[ConstFilterPolicy]>(self.policy)             # <<<<<<<<<<<<<<
 * 
 *     cdef set_info_log(self, shared_ptr[logger.Logger] info_log):
 */
  __pyx_r = ((std::shared_ptr<__pyx_t_7rocksdb_8_rocksdb_ConstFilterPolicy> )__pyx_v_self->policy);
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":236
 *         return self.ob
 * 
 *     cdef shared_ptr[ConstFilterPolicy] get_policy(self):             # <<<<<<<<<<<<<<
 *         return <shared_ptr[ConstFilterPolicy]>(self.policy)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":239
 *         return <shared_ptr[ConstFilterPolicy]>(self.policy)
 * 
 *     cdef set_info_log(self, shared_ptr[logger.Logger] info_log):             # <<<<<<<<<<<<<<
 *         self.policy.get().set_info_log(info_log)
 * 
 */

static PyObject *__pyx_f_7rocksdb_8_rocksdb_21PyGenericFilterPolicy_set_info_log(struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericFilterPolicy *__pyx_v_self, std::shared_ptr<rocksdb::Logger>  __pyx_v_info_log) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  py_rocks::FilterPolicyWrapper *__pyx_t_1;
  __Pyx_RefNannySetupContext("set_info_log", 0);

  /* "rocksdb/_rocksdb.pyx":240
 * 
 *     cdef set_info_log(self, shared_ptr[logger.Logger] info_log):
 *         self.policy.get().set_info_log(info_log)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->policy.get();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 240, __pyx_L1_error)
  }
  try {
    __pyx_t_1->set_info_log(__pyx_v_info_log);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 240, __pyx_L1_error)
  }

  /* "rocksdb/_rocksdb.pyx":239
 *         return <shared_ptr[ConstFilterPolicy]>(self.policy)
 * 
 *     cdef set_info_log(self, shared_ptr[logger.Logger] info_log):             # <<<<<<<<<<<<<<
 *         self.policy.get().set_info_log(info_log)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.PyGenericFilterPolicy.set_info_log", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":243
 * 
 * 
 * cdef void create_filter_callback(             # <<<<<<<<<<<<<<
 *     void* ctx,
 *     logger.Logger* log,
 */

static void __pyx_f_7rocksdb_8_rocksdb_create_filter_callback(void *__pyx_v_ctx, rocksdb::Logger *__pyx_v_log, std::string &__pyx_v_error_msg, rocksdb::Slice const *__pyx_v_keys, int __pyx_v_n, std::string *__pyx_v_dst) {
  PyObject *__pyx_v_ret = NULL;
  PyObject *__pyx_v_error = NULL;
  PyObject *__pyx_v_tb = NULL;
  int __pyx_v_i;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  std::string __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  char *__pyx_t_13;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("create_filter_callback", 0);

  /* "rocksdb/_rocksdb.pyx":251
 *     string* dst) with gil:
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         ret = (<object>ctx).create_filter(
 *             [slice_to_bytes(keys[i]) for i in range(n)])
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "rocksdb/_rocksdb.pyx":252
 * 
 *     try:
 *         ret = (<object>ctx).create_filter(             # <<<<<<<<<<<<<<
 *             [slice_to_bytes(keys[i]) for i in range(n)])
 *         dst.append(bytes_to_string(ret))
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_ctx), __pyx_n_s_create_filter); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 252, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);

      /* "rocksdb/_rocksdb.pyx":253
 *     try:
 *         ret = (<object>ctx).create_filter(
 *             [slice_to_bytes(keys[i]) for i in range(n)])             # <<<<<<<<<<<<<<
 *         dst.append(bytes_to_string(ret))
 *     except BaseException as error:
 */
      __pyx_t_6 = PyList_New(0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 253, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = __pyx_v_n;
      for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
        __pyx_v_i = __pyx_t_8;
        __pyx_t_9 = __pyx_f_7rocksdb_8_rocksdb_slice_to_bytes((__pyx_v_keys[__pyx_v_i])); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 253, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_9);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_6, (PyObject*)__pyx_t_9))) __PYX_ERR(0, 253, __pyx_L3_error)
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
      __pyx_t_9 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      if (!__pyx_t_9) {
        __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 252, __pyx_L3_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_4);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_5)) {
          PyObject *__pyx_temp[2] = {__pyx_t_9, __pyx_t_6};
          __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 252, __pyx_L3_error)
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
          PyObject *__pyx_temp[2] = {__pyx_t_9, __pyx_t_6};
          __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 252, __pyx_L3_error)
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        } else
        #endif
        {
          __pyx_t_10 = PyTuple_New(1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 252, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_9); __pyx_t_9 = NULL;
          __Pyx_GIVEREF(__pyx_t_6);
          PyTuple_SET_ITEM(__pyx_t_10, 0+1, __pyx_t_6);
          __pyx_t_6 = 0;
          __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_10, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 252, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_v_ret = __pyx_t_4;
      __pyx_t_4 = 0;

      /* "rocksdb/_rocksdb.pyx":254
 *         ret = (<object>ctx).create_filter(
 *             [slice_to_bytes(keys[i]) for i in range(n)])
 *         dst.append(bytes_to_string(ret))             # <<<<<<<<<<<<<<
 *     except BaseException as error:
 *         tb = traceback.format_exc()
 */
      __pyx_t_11 = __pyx_f_7rocksdb_8_rocksdb_bytes_to_string(__pyx_v_ret); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 254, __pyx_L3_error)
      __pyx_v_dst->append(__pyx_t_11);

      /* "rocksdb/_rocksdb.pyx":251
 *     string* dst) with gil:
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         ret = (<object>ctx).create_filter(
 *             [slice_to_bytes(keys[i]) for i in range(n)])
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L10_try_end;
    __pyx_L3_error:;
    __Pyx_PyThreadState_assign
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "rocksdb/_rocksdb.pyx":255
 *             [slice_to_bytes(keys[i]) for i in range(n)])
 *         dst.append(bytes_to_string(ret))
 *     except BaseException as error:             # <<<<<<<<<<<<<<
 *         tb = traceback.format_exc()
 *         logger.Log(log, "Error in create filter callback: %s", <bytes>tb)
 */
    __pyx_t_7 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_BaseException);
    if (__pyx_t_7) {
      __Pyx_AddTraceback("rocksdb._rocksdb.create_filter_callback", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_5, &__pyx_t_10) < 0) __PYX_ERR(0, 255, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_INCREF(__pyx_t_5);
      __pyx_v_error = __pyx_t_5;

      /* "rocksdb/_rocksdb.pyx":256
 *         dst.append(bytes_to_string(ret))
 *     except BaseException as error:
 *         tb = traceback.format_exc()             # <<<<<<<<<<<<<<
 *         logger.Log(log, "Error in create filter callback: %s", <bytes>tb)
 *         error_msg.assign(<bytes>str(error))
 */
      __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s_traceback); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 256, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_format_exc); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 256, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_12))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_12);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_12, function);
        }
      }
      if (__pyx_t_9) {
        __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_12, __pyx_t_9); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 256, __pyx_L5_except_error)
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else {
        __pyx_t_6 = __Pyx_PyObject_CallNoArg(__pyx_t_12); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 256, __pyx_L5_except_error)
      }
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __pyx_v_tb = __pyx_t_6;
      __pyx_t_6 = 0;

      /* "rocksdb/_rocksdb.pyx":257
 *     except BaseException as error:
 *         tb = traceback.format_exc()
 *         logger.Log(log, "Error in create filter callback: %s", <bytes>tb)             # <<<<<<<<<<<<<<
 *         error_msg.assign(<bytes>str(error))
 * 
 */
      __pyx_t_13 = __Pyx_PyObject_AsString(__pyx_v_tb); if (unlikely((!__pyx_t_13) && PyErr_Occurred())) __PYX_ERR(0, 257, __pyx_L5_except_error)
      try {
        rocksdb::Log(__pyx_v_log, ((char const *)"Error in create filter callback: %s"), __pyx_t_13);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 257, __pyx_L5_except_error)
      }

      /* "rocksdb/_rocksdb.pyx":258
 *         tb = traceback.format_exc()
 *         logger.Log(log, "Error in create filter callback: %s", <bytes>tb)
 *         error_msg.assign(<bytes>str(error))             # <<<<<<<<<<<<<<
 * 
 * cdef cpp_bool key_may_match_callback(
 */
      __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 258, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_v_error);
      __Pyx_GIVEREF(__pyx_v_error);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_error);
      __pyx_t_12 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_6, NULL); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 258, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_13 = __Pyx_PyObject_AsString(__pyx_t_12); if (unlikely((!__pyx_t_13) && PyErr_Occurred())) __PYX_ERR(0, 258, __pyx_L5_except_error)
      __pyx_v_error_msg.assign(__pyx_t_13);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      goto __pyx_L4_exception_handled;
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "rocksdb/_rocksdb.pyx":251
 *     string* dst) with gil:
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         ret = (<object>ctx).create_filter(
 *             [slice_to_bytes(keys[i]) for i in range(n)])
 */
    __Pyx_PyThreadState_assign
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L4_exception_handled:;
    __Pyx_PyThreadState_assign
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    __pyx_L10_try_end:;
  }

  /* "rocksdb/_rocksdb.pyx":243
 * 
 * 
 * cdef void create_filter_callback(             # <<<<<<<<<<<<<<
 *     void* ctx,
 *     logger.Logger* log,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_WriteUnraisable("rocksdb._rocksdb.create_filter_callback", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XDECREF(__pyx_v_error);
  __Pyx_XDECREF(__pyx_v_tb);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  PyGILState_Release(__pyx_gilstate_save);
  #endif
}

/* "rocksdb/_rocksdb.pyx":260
 *         error_msg.assign(<bytes>str(error))
 * 
 * cdef cpp_bool key_may_match_callback(             # <<<<<<<<<<<<<<
 *     void* ctx,
 *     logger.Logger* log,
 */

static bool __pyx_f_7rocksdb_8_rocksdb_key_may_match_callback(void *__pyx_v_ctx, rocksdb::Logger *__pyx_v_log, std::string &__pyx_v_error_msg, rocksdb::Slice const &__pyx_v_key, rocksdb::Slice const &__pyx_v_filt) {
  PyObject *__pyx_v_error = NULL;
  PyObject *__pyx_v_tb = NULL;
  bool __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  bool __pyx_t_11;
  char *__pyx_t_12;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("key_may_match_callback", 0);

  /* "rocksdb/_rocksdb.pyx":267
 *     const Slice& filt) with gil:
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         return (<object>ctx).key_may_match(
 *             slice_to_bytes(key),
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "rocksdb/_rocksdb.pyx":268
 * 
 *     try:
 *         return (<object>ctx).key_may_match(             # <<<<<<<<<<<<<<
 *             slice_to_bytes(key),
 *             slice_to_bytes(filt))
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_ctx), __pyx_n_s_key_may_match); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 268, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);

      /* "rocksdb/_rocksdb.pyx":269
 *     try:
 *         return (<object>ctx).key_may_match(
 *             slice_to_bytes(key),             # <<<<<<<<<<<<<<
 *             slice_to_bytes(filt))
 *     except BaseException as error:
 */
      __pyx_t_6 = __pyx_f_7rocksdb_8_rocksdb_slice_to_bytes(__pyx_v_key); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 269, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_6);

      /* "rocksdb/_rocksdb.pyx":270
 *         return (<object>ctx).key_may_match(
 *             slice_to_bytes(key),
 *             slice_to_bytes(filt))             # <<<<<<<<<<<<<<
 *     except BaseException as error:
 *         tb = traceback.format_exc()
 */
      __pyx_t_7 = __pyx_f_7rocksdb_8_rocksdb_slice_to_bytes(__pyx_v_filt); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 270, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = NULL;
      __pyx_t_9 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_9 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_t_6, __pyx_t_7};
        __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 268, __pyx_L3_error)
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_t_6, __pyx_t_7};
        __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 268, __pyx_L3_error)
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      } else
      #endif
      {
        __pyx_t_10 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 268, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_10);
        if (__pyx_t_8) {
          __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_8); __pyx_t_8 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_9, __pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_9, __pyx_t_7);
        __pyx_t_6 = 0;
        __pyx_t_7 = 0;
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_10, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 268, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "rocksdb/_rocksdb.pyx":268
 * 
 *     try:
 *         return (<object>ctx).key_may_match(             # <<<<<<<<<<<<<<
 *             slice_to_bytes(key),
 *             slice_to_bytes(filt))
 */
      __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_11 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 268, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_r = __pyx_t_11;
      goto __pyx_L7_try_return;

      /* "rocksdb/_rocksdb.pyx":267
 *     const Slice& filt) with gil:
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         return (<object>ctx).key_may_match(
 *             slice_to_bytes(key),
 */
    }
    __pyx_L3_error:;
    __Pyx_PyThreadState_assign
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "rocksdb/_rocksdb.pyx":271
 *             slice_to_bytes(key),
 *             slice_to_bytes(filt))
 *     except BaseException as error:             # <<<<<<<<<<<<<<
 *         tb = traceback.format_exc()
 *         logger.Log(log, "Error in key_mach_match callback: %s", <bytes>tb)
 */
    __pyx_t_9 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_BaseException);
    if (__pyx_t_9) {
      __Pyx_AddTraceback("rocksdb._rocksdb.key_may_match_callback", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_5, &__pyx_t_10) < 0) __PYX_ERR(0, 271, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_INCREF(__pyx_t_5);
      __pyx_v_error = __pyx_t_5;

      /* "rocksdb/_rocksdb.pyx":272
 *             slice_to_bytes(filt))
 *     except BaseException as error:
 *         tb = traceback.format_exc()             # <<<<<<<<<<<<<<
 *         logger.Log(log, "Error in key_mach_match callback: %s", <bytes>tb)
 *         error_msg.assign(<bytes>str(error))
 */
      __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_traceback); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 272, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_format_exc); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 272, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
        }
      }
      if (__pyx_t_6) {
        __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 272, __pyx_L5_except_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else {
        __pyx_t_7 = __Pyx_PyObject_CallNoArg(__pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 272, __pyx_L5_except_error)
      }
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_v_tb = __pyx_t_7;
      __pyx_t_7 = 0;

      /* "rocksdb/_rocksdb.pyx":273
 *     except BaseException as error:
 *         tb = traceback.format_exc()
 *         logger.Log(log, "Error in key_mach_match callback: %s", <bytes>tb)             # <<<<<<<<<<<<<<
 *         error_msg.assign(<bytes>str(error))
 * 
 */
      __pyx_t_12 = __Pyx_PyObject_AsString(__pyx_v_tb); if (unlikely((!__pyx_t_12) && PyErr_Occurred())) __PYX_ERR(0, 273, __pyx_L5_except_error)
      try {
        rocksdb::Log(__pyx_v_log, ((char const *)"Error in key_mach_match callback: %s"), __pyx_t_12);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 273, __pyx_L5_except_error)
      }

      /* "rocksdb/_rocksdb.pyx":274
 *         tb = traceback.format_exc()
 *         logger.Log(log, "Error in key_mach_match callback: %s", <bytes>tb)
 *         error_msg.assign(<bytes>str(error))             # <<<<<<<<<<<<<<
 * 
 * @cython.internal
 */
      __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 274, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_v_error);
      __Pyx_GIVEREF(__pyx_v_error);
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_v_error);
      __pyx_t_8 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_7, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 274, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_12 = __Pyx_PyObject_AsString(__pyx_t_8); if (unlikely((!__pyx_t_12) && PyErr_Occurred())) __PYX_ERR(0, 274, __pyx_L5_except_error)
      __pyx_v_error_msg.assign(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      goto __pyx_L4_exception_handled;
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "rocksdb/_rocksdb.pyx":267
 *     const Slice& filt) with gil:
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         return (<object>ctx).key_may_match(
 *             slice_to_bytes(key),
 */
    __Pyx_PyThreadState_assign
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L7_try_return:;
    __Pyx_PyThreadState_assign
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L0;
    __pyx_L4_exception_handled:;
    __Pyx_PyThreadState_assign
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
  }

  /* "rocksdb/_rocksdb.pyx":260
 *         error_msg.assign(<bytes>str(error))
 * 
 * cdef cpp_bool key_may_match_callback(             # <<<<<<<<<<<<<<
 *     void* ctx,
 *     logger.Logger* log,
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_WriteUnraisable("rocksdb._rocksdb.key_may_match_callback", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_error);
  __Pyx_XDECREF(__pyx_v_tb);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":280
 *     cdef shared_ptr[ConstFilterPolicy] policy
 * 
 *     def __cinit__(self, int bits_per_key):             # <<<<<<<<<<<<<<
 *         self.policy.reset(filter_policy.NewBloomFilterPolicy(bits_per_key))
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_19PyBloomFilterPolicy_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_19PyBloomFilterPolicy_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_bits_per_key;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_bits_per_key,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bits_per_key)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 280, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_bits_per_key = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_bits_per_key == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 280, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 280, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.PyBloomFilterPolicy.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_19PyBloomFilterPolicy___cinit__(((struct __pyx_obj_7rocksdb_8_rocksdb_PyBloomFilterPolicy *)__pyx_v_self), __pyx_v_bits_per_key);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_19PyBloomFilterPolicy___cinit__(struct __pyx_obj_7rocksdb_8_rocksdb_PyBloomFilterPolicy *__pyx_v_self, int __pyx_v_bits_per_key) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  rocksdb::FilterPolicy const *__pyx_t_1;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "rocksdb/_rocksdb.pyx":281
 * 
 *     def __cinit__(self, int bits_per_key):
 *         self.policy.reset(filter_policy.NewBloomFilterPolicy(bits_per_key))             # <<<<<<<<<<<<<<
 * 
 *     def name(self):
 */
  try {
    __pyx_t_1 = rocksdb::NewBloomFilterPolicy(__pyx_v_bits_per_key);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 281, __pyx_L1_error)
  }
  try {
    __pyx_v_self->policy.reset(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 281, __pyx_L1_error)
  }

  /* "rocksdb/_rocksdb.pyx":280
 *     cdef shared_ptr[ConstFilterPolicy] policy
 * 
 *     def __cinit__(self, int bits_per_key):             # <<<<<<<<<<<<<<
 *         self.policy.reset(filter_policy.NewBloomFilterPolicy(bits_per_key))
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.PyBloomFilterPolicy.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":283
 *         self.policy.reset(filter_policy.NewBloomFilterPolicy(bits_per_key))
 * 
 *     def name(self):             # <<<<<<<<<<<<<<
 *         return PyBytes_FromString(self.policy.get().Name())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19PyBloomFilterPolicy_3name(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19PyBloomFilterPolicy_3name(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("name (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_19PyBloomFilterPolicy_2name(((struct __pyx_obj_7rocksdb_8_rocksdb_PyBloomFilterPolicy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19PyBloomFilterPolicy_2name(struct __pyx_obj_7rocksdb_8_rocksdb_PyBloomFilterPolicy *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_7rocksdb_8_rocksdb_ConstFilterPolicy *__pyx_t_1;
  const char *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("name", 0);

  /* "rocksdb/_rocksdb.pyx":284
 * 
 *     def name(self):
 *         return PyBytes_FromString(self.policy.get().Name())             # <<<<<<<<<<<<<<
 * 
 *     def create_filter(self, keys):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->policy.get();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 284, __pyx_L1_error)
  }
  try {
    __pyx_t_2 = __pyx_t_1->Name();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 284, __pyx_L1_error)
  }
  __pyx_t_3 = PyBytes_FromString(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":283
 *         self.policy.reset(filter_policy.NewBloomFilterPolicy(bits_per_key))
 * 
 *     def name(self):             # <<<<<<<<<<<<<<
 *         return PyBytes_FromString(self.policy.get().Name())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("rocksdb._rocksdb.PyBloomFilterPolicy.name", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":286
 *         return PyBytes_FromString(self.policy.get().Name())
 * 
 *     def create_filter(self, keys):             # <<<<<<<<<<<<<<
 *         cdef string dst
 *         cdef vector[Slice] c_keys
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19PyBloomFilterPolicy_5create_filter(PyObject *__pyx_v_self, PyObject *__pyx_v_keys); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19PyBloomFilterPolicy_5create_filter(PyObject *__pyx_v_self, PyObject *__pyx_v_keys) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("create_filter (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_19PyBloomFilterPolicy_4create_filter(((struct __pyx_obj_7rocksdb_8_rocksdb_PyBloomFilterPolicy *)__pyx_v_self), ((PyObject *)__pyx_v_keys));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19PyBloomFilterPolicy_4create_filter(struct __pyx_obj_7rocksdb_8_rocksdb_PyBloomFilterPolicy *__pyx_v_self, PyObject *__pyx_v_keys) {
  std::string __pyx_v_dst;
  std::vector<rocksdb::Slice>  __pyx_v_c_keys;
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  rocksdb::Slice __pyx_t_5;
  __pyx_t_7rocksdb_8_rocksdb_ConstFilterPolicy *__pyx_t_6;
  __Pyx_RefNannySetupContext("create_filter", 0);

  /* "rocksdb/_rocksdb.pyx":290
 *         cdef vector[Slice] c_keys
 * 
 *         for key in keys:             # <<<<<<<<<<<<<<
 *             c_keys.push_back(bytes_to_slice(key))
 * 
 */
  if (likely(PyList_CheckExact(__pyx_v_keys)) || PyTuple_CheckExact(__pyx_v_keys)) {
    __pyx_t_1 = __pyx_v_keys; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_keys); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 290, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 290, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 290, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 290, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 290, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 290, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 290, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "rocksdb/_rocksdb.pyx":291
 * 
 *         for key in keys:
 *             c_keys.push_back(bytes_to_slice(key))             # <<<<<<<<<<<<<<
 * 
 *         self.policy.get().CreateFilter(
 */
    __pyx_t_5 = __pyx_f_7rocksdb_8_rocksdb_bytes_to_slice(__pyx_v_key); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 291, __pyx_L1_error)
    try {
      __pyx_v_c_keys.push_back(__pyx_t_5);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 291, __pyx_L1_error)
    }

    /* "rocksdb/_rocksdb.pyx":290
 *         cdef vector[Slice] c_keys
 * 
 *         for key in keys:             # <<<<<<<<<<<<<<
 *             c_keys.push_back(bytes_to_slice(key))
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":293
 *             c_keys.push_back(bytes_to_slice(key))
 * 
 *         self.policy.get().CreateFilter(             # <<<<<<<<<<<<<<
 *             vector_data(c_keys),
 *             c_keys.size(),
 */
  try {
    __pyx_t_6 = __pyx_v_self->policy.get();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 293, __pyx_L1_error)
  }

  /* "rocksdb/_rocksdb.pyx":296
 *             vector_data(c_keys),
 *             c_keys.size(),
 *             cython.address(dst))             # <<<<<<<<<<<<<<
 * 
 *         return string_to_bytes(dst)
 */
  try {
    __pyx_t_6->CreateFilter(py_rocks::vector_data(__pyx_v_c_keys), __pyx_v_c_keys.size(), (&__pyx_v_dst));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 293, __pyx_L1_error)
  }

  /* "rocksdb/_rocksdb.pyx":298
 *             cython.address(dst))
 * 
 *         return string_to_bytes(dst)             # <<<<<<<<<<<<<<
 * 
 *     def key_may_match(self, key, filter_):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_7rocksdb_8_rocksdb_string_to_bytes(__pyx_v_dst); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 298, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":286
 *         return PyBytes_FromString(self.policy.get().Name())
 * 
 *     def create_filter(self, keys):             # <<<<<<<<<<<<<<
 *         cdef string dst
 *         cdef vector[Slice] c_keys
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("rocksdb._rocksdb.PyBloomFilterPolicy.create_filter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":300
 *         return string_to_bytes(dst)
 * 
 *     def key_may_match(self, key, filter_):             # <<<<<<<<<<<<<<
 *         return self.policy.get().KeyMayMatch(
 *             bytes_to_slice(key),
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19PyBloomFilterPolicy_7key_may_match(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_19PyBloomFilterPolicy_7key_may_match(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_key = 0;
  PyObject *__pyx_v_filter_ = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("key_may_match (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_key,&__pyx_n_s_filter,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_key)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_filter)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("key_may_match", 1, 2, 2, 1); __PYX_ERR(0, 300, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "key_may_match") < 0)) __PYX_ERR(0, 300, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_key = values[0];
    __pyx_v_filter_ = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("key_may_match", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 300, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.PyBloomFilterPolicy.key_may_match", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_19PyBloomFilterPolicy_6key_may_match(((struct __pyx_obj_7rocksdb_8_rocksdb_PyBloomFilterPolicy *)__pyx_v_self), __pyx_v_key, __pyx_v_filter_);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_19PyBloomFilterPolicy_6key_may_match(struct __pyx_obj_7rocksdb_8_rocksdb_PyBloomFilterPolicy *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_filter_) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_7rocksdb_8_rocksdb_ConstFilterPolicy *__pyx_t_1;
  rocksdb::Slice __pyx_t_2;
  rocksdb::Slice __pyx_t_3;
  bool __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("key_may_match", 0);

  /* "rocksdb/_rocksdb.pyx":301
 * 
 *     def key_may_match(self, key, filter_):
 *         return self.policy.get().KeyMayMatch(             # <<<<<<<<<<<<<<
 *             bytes_to_slice(key),
 *             bytes_to_slice(filter_))
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->policy.get();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 301, __pyx_L1_error)
  }

  /* "rocksdb/_rocksdb.pyx":302
 *     def key_may_match(self, key, filter_):
 *         return self.policy.get().KeyMayMatch(
 *             bytes_to_slice(key),             # <<<<<<<<<<<<<<
 *             bytes_to_slice(filter_))
 * 
 */
  __pyx_t_2 = __pyx_f_7rocksdb_8_rocksdb_bytes_to_slice(__pyx_v_key); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 302, __pyx_L1_error)

  /* "rocksdb/_rocksdb.pyx":303
 *         return self.policy.get().KeyMayMatch(
 *             bytes_to_slice(key),
 *             bytes_to_slice(filter_))             # <<<<<<<<<<<<<<
 * 
 *     cdef object get_ob(self):
 */
  __pyx_t_3 = __pyx_f_7rocksdb_8_rocksdb_bytes_to_slice(__pyx_v_filter_); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 303, __pyx_L1_error)

  /* "rocksdb/_rocksdb.pyx":301
 * 
 *     def key_may_match(self, key, filter_):
 *         return self.policy.get().KeyMayMatch(             # <<<<<<<<<<<<<<
 *             bytes_to_slice(key),
 *             bytes_to_slice(filter_))
 */
  try {
    __pyx_t_4 = __pyx_t_1->KeyMayMatch(__pyx_t_2, __pyx_t_3);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 301, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyBool_FromLong(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 301, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":300
 *         return string_to_bytes(dst)
 * 
 *     def key_may_match(self, key, filter_):             # <<<<<<<<<<<<<<
 *         return self.policy.get().KeyMayMatch(
 *             bytes_to_slice(key),
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("rocksdb._rocksdb.PyBloomFilterPolicy.key_may_match", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":305
 *             bytes_to_slice(filter_))
 * 
 *     cdef object get_ob(self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

static PyObject *__pyx_f_7rocksdb_8_rocksdb_19PyBloomFilterPolicy_get_ob(struct __pyx_obj_7rocksdb_8_rocksdb_PyBloomFilterPolicy *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_ob", 0);

  /* "rocksdb/_rocksdb.pyx":306
 * 
 *     cdef object get_ob(self):
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     cdef shared_ptr[ConstFilterPolicy] get_policy(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":305
 *             bytes_to_slice(filter_))
 * 
 *     cdef object get_ob(self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":308
 *         return self
 * 
 *     cdef shared_ptr[ConstFilterPolicy] get_policy(self):             # <<<<<<<<<<<<<<
 *         return self.policy
 * 
 */

static std::shared_ptr<__pyx_t_7rocksdb_8_rocksdb_ConstFilterPolicy>  __pyx_f_7rocksdb_8_rocksdb_19PyBloomFilterPolicy_get_policy(struct __pyx_obj_7rocksdb_8_rocksdb_PyBloomFilterPolicy *__pyx_v_self) {
  std::shared_ptr<__pyx_t_7rocksdb_8_rocksdb_ConstFilterPolicy>  __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_policy", 0);

  /* "rocksdb/_rocksdb.pyx":309
 * 
 *     cdef shared_ptr[ConstFilterPolicy] get_policy(self):
 *         return self.policy             # <<<<<<<<<<<<<<
 * 
 * BloomFilterPolicy = PyBloomFilterPolicy
 */
  __pyx_r = __pyx_v_self->policy;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":308
 *         return self
 * 
 *     cdef shared_ptr[ConstFilterPolicy] get_policy(self):             # <<<<<<<<<<<<<<
 *         return self.policy
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":322
 *     cdef object ob
 * 
 *     def __cinit__(self, object ob):             # <<<<<<<<<<<<<<
 *         self.ob = ob
 *         if isinstance(ob, IAssociativeMergeOperator):
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_15PyMergeOperator_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_15PyMergeOperator_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_ob = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_ob,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ob)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 322, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_ob = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 322, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.PyMergeOperator.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_15PyMergeOperator___cinit__(((struct __pyx_obj_7rocksdb_8_rocksdb_PyMergeOperator *)__pyx_v_self), __pyx_v_ob);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_15PyMergeOperator___cinit__(struct __pyx_obj_7rocksdb_8_rocksdb_PyMergeOperator *__pyx_v_self, PyObject *__pyx_v_ob) {
  PyObject *__pyx_v_msg = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  std::string __pyx_t_6;
  py_rocks::AssociativeMergeOperatorWrapper *__pyx_t_7;
  py_rocks::MergeOperatorWrapper *__pyx_t_8;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "rocksdb/_rocksdb.pyx":323
 * 
 *     def __cinit__(self, object ob):
 *         self.ob = ob             # <<<<<<<<<<<<<<
 *         if isinstance(ob, IAssociativeMergeOperator):
 *             self.merge_op.reset(
 */
  __Pyx_INCREF(__pyx_v_ob);
  __Pyx_GIVEREF(__pyx_v_ob);
  __Pyx_GOTREF(__pyx_v_self->ob);
  __Pyx_DECREF(__pyx_v_self->ob);
  __pyx_v_self->ob = __pyx_v_ob;

  /* "rocksdb/_rocksdb.pyx":324
 *     def __cinit__(self, object ob):
 *         self.ob = ob
 *         if isinstance(ob, IAssociativeMergeOperator):             # <<<<<<<<<<<<<<
 *             self.merge_op.reset(
 *                 <merge_operator.MergeOperator*>
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_IAssociativeMergeOperator); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 324, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_IsInstance(__pyx_v_ob, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 324, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "rocksdb/_rocksdb.pyx":328
 *                 <merge_operator.MergeOperator*>
 *                     new merge_operator.AssociativeMergeOperatorWrapper(
 *                         bytes_to_string(ob.name()),             # <<<<<<<<<<<<<<
 *                         <void*>(ob),
 *                         merge_callback))
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_ob, __pyx_n_s_name); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 328, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (__pyx_t_5) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 328, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 328, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_6 = __pyx_f_7rocksdb_8_rocksdb_bytes_to_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 328, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "rocksdb/_rocksdb.pyx":327
 *             self.merge_op.reset(
 *                 <merge_operator.MergeOperator*>
 *                     new merge_operator.AssociativeMergeOperatorWrapper(             # <<<<<<<<<<<<<<
 *                         bytes_to_string(ob.name()),
 *                         <void*>(ob),
 */
    try {
      __pyx_t_7 = new py_rocks::AssociativeMergeOperatorWrapper(__pyx_t_6, ((void *)__pyx_v_ob), __pyx_f_7rocksdb_8_rocksdb_merge_callback);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 327, __pyx_L1_error)
    }

    /* "rocksdb/_rocksdb.pyx":325
 *         self.ob = ob
 *         if isinstance(ob, IAssociativeMergeOperator):
 *             self.merge_op.reset(             # <<<<<<<<<<<<<<
 *                 <merge_operator.MergeOperator*>
 *                     new merge_operator.AssociativeMergeOperatorWrapper(
 */
    try {
      __pyx_v_self->merge_op.reset(((rocksdb::MergeOperator *)__pyx_t_7));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 325, __pyx_L1_error)
    }

    /* "rocksdb/_rocksdb.pyx":324
 *     def __cinit__(self, object ob):
 *         self.ob = ob
 *         if isinstance(ob, IAssociativeMergeOperator):             # <<<<<<<<<<<<<<
 *             self.merge_op.reset(
 *                 <merge_operator.MergeOperator*>
 */
    goto __pyx_L3;
  }

  /* "rocksdb/_rocksdb.pyx":332
 *                         merge_callback))
 * 
 *         elif isinstance(ob, IMergeOperator):             # <<<<<<<<<<<<<<
 *             self.merge_op.reset(
 *                 <merge_operator.MergeOperator*>
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_IMergeOperator); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 332, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyObject_IsInstance(__pyx_v_ob, __pyx_t_1); if (unlikely(__pyx_t_3 == -1)) __PYX_ERR(0, 332, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (__pyx_t_2) {

    /* "rocksdb/_rocksdb.pyx":336
 *                 <merge_operator.MergeOperator*>
 *                     new merge_operator.MergeOperatorWrapper(
 *                         bytes_to_string(ob.name()),             # <<<<<<<<<<<<<<
 *                         <void*>ob,
 *                         <void*>ob,
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_ob, __pyx_n_s_name); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 336, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (__pyx_t_5) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 336, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 336, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_6 = __pyx_f_7rocksdb_8_rocksdb_bytes_to_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 336, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "rocksdb/_rocksdb.pyx":335
 *             self.merge_op.reset(
 *                 <merge_operator.MergeOperator*>
 *                     new merge_operator.MergeOperatorWrapper(             # <<<<<<<<<<<<<<
 *                         bytes_to_string(ob.name()),
 *                         <void*>ob,
 */
    try {
      __pyx_t_8 = new py_rocks::MergeOperatorWrapper(__pyx_t_6, ((void *)__pyx_v_ob), ((void *)__pyx_v_ob), __pyx_f_7rocksdb_8_rocksdb_full_merge_callback, __pyx_f_7rocksdb_8_rocksdb_partial_merge_callback);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 335, __pyx_L1_error)
    }

    /* "rocksdb/_rocksdb.pyx":333
 * 
 *         elif isinstance(ob, IMergeOperator):
 *             self.merge_op.reset(             # <<<<<<<<<<<<<<
 *                 <merge_operator.MergeOperator*>
 *                     new merge_operator.MergeOperatorWrapper(
 */
    try {
      __pyx_v_self->merge_op.reset(((rocksdb::MergeOperator *)__pyx_t_8));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 333, __pyx_L1_error)
    }

    /* "rocksdb/_rocksdb.pyx":332
 *                         merge_callback))
 * 
 *         elif isinstance(ob, IMergeOperator):             # <<<<<<<<<<<<<<
 *             self.merge_op.reset(
 *                 <merge_operator.MergeOperator*>
 */
    goto __pyx_L3;
  }

  /* "rocksdb/_rocksdb.pyx":359
 *                 #  raise TypeError(msg)
 *         else:
 *             msg = "%s is not of this types %s"             # <<<<<<<<<<<<<<
 *             msg %= (ob, (IAssociativeMergeOperator, IMergeOperator))
 *             raise TypeError(msg)
 */
  /*else*/ {
    __Pyx_INCREF(__pyx_kp_s_s_is_not_of_this_types_s);
    __pyx_v_msg = __pyx_kp_s_s_is_not_of_this_types_s;

    /* "rocksdb/_rocksdb.pyx":360
 *         else:
 *             msg = "%s is not of this types %s"
 *             msg %= (ob, (IAssociativeMergeOperator, IMergeOperator))             # <<<<<<<<<<<<<<
 *             raise TypeError(msg)
 * 
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_IAssociativeMergeOperator); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 360, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_IMergeOperator); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 360, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 360, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_4);
    __pyx_t_1 = 0;
    __pyx_t_4 = 0;
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 360, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v_ob);
    __Pyx_GIVEREF(__pyx_v_ob);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_ob);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = PyNumber_InPlaceRemainder(__pyx_v_msg, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 360, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF_SET(__pyx_v_msg, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "rocksdb/_rocksdb.pyx":361
 *             msg = "%s is not of this types %s"
 *             msg %= (ob, (IAssociativeMergeOperator, IMergeOperator))
 *             raise TypeError(msg)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 361, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_v_msg);
    __Pyx_GIVEREF(__pyx_v_msg);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_msg);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 361, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 361, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "rocksdb/_rocksdb.pyx":322
 *     cdef object ob
 * 
 *     def __cinit__(self, object ob):             # <<<<<<<<<<<<<<
 *         self.ob = ob
 *         if isinstance(ob, IAssociativeMergeOperator):
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("rocksdb._rocksdb.PyMergeOperator.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_msg);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":364
 * 
 * 
 *     cdef object get_ob(self):             # <<<<<<<<<<<<<<
 *         return self.ob
 * 
 */

static PyObject *__pyx_f_7rocksdb_8_rocksdb_15PyMergeOperator_get_ob(struct __pyx_obj_7rocksdb_8_rocksdb_PyMergeOperator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_ob", 0);

  /* "rocksdb/_rocksdb.pyx":365
 * 
 *     cdef object get_ob(self):
 *         return self.ob             # <<<<<<<<<<<<<<
 * 
 *     cdef shared_ptr[merge_operator.MergeOperator] get_operator(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->ob);
  __pyx_r = __pyx_v_self->ob;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":364
 * 
 * 
 *     cdef object get_ob(self):             # <<<<<<<<<<<<<<
 *         return self.ob
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":367
 *         return self.ob
 * 
 *     cdef shared_ptr[merge_operator.MergeOperator] get_operator(self):             # <<<<<<<<<<<<<<
 *         return self.merge_op
 * 
 */

static std::shared_ptr<rocksdb::MergeOperator>  __pyx_f_7rocksdb_8_rocksdb_15PyMergeOperator_get_operator(struct __pyx_obj_7rocksdb_8_rocksdb_PyMergeOperator *__pyx_v_self) {
  std::shared_ptr<rocksdb::MergeOperator>  __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_operator", 0);

  /* "rocksdb/_rocksdb.pyx":368
 * 
 *     cdef shared_ptr[merge_operator.MergeOperator] get_operator(self):
 *         return self.merge_op             # <<<<<<<<<<<<<<
 * 
 * cdef cpp_bool merge_callback(
 */
  __pyx_r = __pyx_v_self->merge_op;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":367
 *         return self.ob
 * 
 *     cdef shared_ptr[merge_operator.MergeOperator] get_operator(self):             # <<<<<<<<<<<<<<
 *         return self.merge_op
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":370
 *         return self.merge_op
 * 
 * cdef cpp_bool merge_callback(             # <<<<<<<<<<<<<<
 *     void* ctx,
 *     const Slice& key,
 */

static bool __pyx_f_7rocksdb_8_rocksdb_merge_callback(void *__pyx_v_ctx, rocksdb::Slice const &__pyx_v_key, rocksdb::Slice const *__pyx_v_existing_value, rocksdb::Slice const &__pyx_v_value, std::string *__pyx_v_new_value, rocksdb::Logger *__pyx_v_log) {
  PyObject *__pyx_v_py_existing_value = NULL;
  PyObject *__pyx_v_ret = NULL;
  PyObject *__pyx_v_tb = NULL;
  bool __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  std::string __pyx_t_12;
  char *__pyx_t_13;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("merge_callback", 0);

  /* "rocksdb/_rocksdb.pyx":378
 *     logger.Logger* log) with gil:
 * 
 *     if existing_value == NULL:             # <<<<<<<<<<<<<<
 *         py_existing_value = None
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_existing_value == NULL) != 0);
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":379
 * 
 *     if existing_value == NULL:
 *         py_existing_value = None             # <<<<<<<<<<<<<<
 *     else:
 *         py_existing_value = slice_to_bytes(deref(existing_value))
 */
    __Pyx_INCREF(Py_None);
    __pyx_v_py_existing_value = Py_None;

    /* "rocksdb/_rocksdb.pyx":378
 *     logger.Logger* log) with gil:
 * 
 *     if existing_value == NULL:             # <<<<<<<<<<<<<<
 *         py_existing_value = None
 *     else:
 */
    goto __pyx_L3;
  }

  /* "rocksdb/_rocksdb.pyx":381
 *         py_existing_value = None
 *     else:
 *         py_existing_value = slice_to_bytes(deref(existing_value))             # <<<<<<<<<<<<<<
 * 
 *     try:
 */
  /*else*/ {
    __pyx_t_2 = __pyx_f_7rocksdb_8_rocksdb_slice_to_bytes((*__pyx_v_existing_value)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 381, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_py_existing_value = __pyx_t_2;
    __pyx_t_2 = 0;
  }
  __pyx_L3:;

  /* "rocksdb/_rocksdb.pyx":383
 *         py_existing_value = slice_to_bytes(deref(existing_value))
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         ret = (<object>ctx).merge(
 *             slice_to_bytes(key),
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_5);
    /*try:*/ {

      /* "rocksdb/_rocksdb.pyx":384
 * 
 *     try:
 *         ret = (<object>ctx).merge(             # <<<<<<<<<<<<<<
 *             slice_to_bytes(key),
 *             py_existing_value,
 */
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_ctx), __pyx_n_s_merge); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 384, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_6);

      /* "rocksdb/_rocksdb.pyx":385
 *     try:
 *         ret = (<object>ctx).merge(
 *             slice_to_bytes(key),             # <<<<<<<<<<<<<<
 *             py_existing_value,
 *             slice_to_bytes(value))
 */
      __pyx_t_7 = __pyx_f_7rocksdb_8_rocksdb_slice_to_bytes(__pyx_v_key); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 385, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_7);

      /* "rocksdb/_rocksdb.pyx":387
 *             slice_to_bytes(key),
 *             py_existing_value,
 *             slice_to_bytes(value))             # <<<<<<<<<<<<<<
 * 
 *         if ret[0]:
 */
      __pyx_t_8 = __pyx_f_7rocksdb_8_rocksdb_slice_to_bytes(__pyx_v_value); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 387, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = NULL;
      __pyx_t_10 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
          __pyx_t_10 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_6)) {
        PyObject *__pyx_temp[4] = {__pyx_t_9, __pyx_t_7, __pyx_v_py_existing_value, __pyx_t_8};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_10, 3+__pyx_t_10); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 384, __pyx_L4_error)
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
        PyObject *__pyx_temp[4] = {__pyx_t_9, __pyx_t_7, __pyx_v_py_existing_value, __pyx_t_8};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_10, 3+__pyx_t_10); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 384, __pyx_L4_error)
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      } else
      #endif
      {
        __pyx_t_11 = PyTuple_New(3+__pyx_t_10); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 384, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_11);
        if (__pyx_t_9) {
          __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_9); __pyx_t_9 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_11, 0+__pyx_t_10, __pyx_t_7);
        __Pyx_INCREF(__pyx_v_py_existing_value);
        __Pyx_GIVEREF(__pyx_v_py_existing_value);
        PyTuple_SET_ITEM(__pyx_t_11, 1+__pyx_t_10, __pyx_v_py_existing_value);
        __Pyx_GIVEREF(__pyx_t_8);
        PyTuple_SET_ITEM(__pyx_t_11, 2+__pyx_t_10, __pyx_t_8);
        __pyx_t_7 = 0;
        __pyx_t_8 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_11, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 384, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      }
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_v_ret = __pyx_t_2;
      __pyx_t_2 = 0;

      /* "rocksdb/_rocksdb.pyx":389
 *             slice_to_bytes(value))
 * 
 *         if ret[0]:             # <<<<<<<<<<<<<<
 *             new_value.assign(bytes_to_string(ret[1]))
 *             return True
 */
      __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_ret, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 389, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 389, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (__pyx_t_1) {

        /* "rocksdb/_rocksdb.pyx":390
 * 
 *         if ret[0]:
 *             new_value.assign(bytes_to_string(ret[1]))             # <<<<<<<<<<<<<<
 *             return True
 *         return False
 */
        __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_ret, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 390, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_12 = __pyx_f_7rocksdb_8_rocksdb_bytes_to_string(__pyx_t_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 390, __pyx_L4_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_v_new_value->assign(__pyx_t_12);

        /* "rocksdb/_rocksdb.pyx":391
 *         if ret[0]:
 *             new_value.assign(bytes_to_string(ret[1]))
 *             return True             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
        __pyx_r = 1;
        goto __pyx_L8_try_return;

        /* "rocksdb/_rocksdb.pyx":389
 *             slice_to_bytes(value))
 * 
 *         if ret[0]:             # <<<<<<<<<<<<<<
 *             new_value.assign(bytes_to_string(ret[1]))
 *             return True
 */
      }

      /* "rocksdb/_rocksdb.pyx":392
 *             new_value.assign(bytes_to_string(ret[1]))
 *             return True
 *         return False             # <<<<<<<<<<<<<<
 * 
 *     except:
 */
      __pyx_r = 0;
      goto __pyx_L8_try_return;

      /* "rocksdb/_rocksdb.pyx":383
 *         py_existing_value = slice_to_bytes(deref(existing_value))
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         ret = (<object>ctx).merge(
 *             slice_to_bytes(key),
 */
    }
    __pyx_L4_error:;
    __Pyx_PyThreadState_assign
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "rocksdb/_rocksdb.pyx":394
 *         return False
 * 
 *     except:             # <<<<<<<<<<<<<<
 *         tb = traceback.format_exc()
 *         logger.Log(log, "Error in merge_callback: %s", <bytes>tb)
 */
    /*except:*/ {
      __Pyx_AddTraceback("rocksdb._rocksdb.merge_callback", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_6, &__pyx_t_11) < 0) __PYX_ERR(0, 394, __pyx_L6_except_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_11);

      /* "rocksdb/_rocksdb.pyx":395
 * 
 *     except:
 *         tb = traceback.format_exc()             # <<<<<<<<<<<<<<
 *         logger.Log(log, "Error in merge_callback: %s", <bytes>tb)
 *         return False
 */
      __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_traceback); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 395, __pyx_L6_except_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_format_exc); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 395, __pyx_L6_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_9);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_9, function);
        }
      }
      if (__pyx_t_7) {
        __pyx_t_8 = __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 395, __pyx_L6_except_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      } else {
        __pyx_t_8 = __Pyx_PyObject_CallNoArg(__pyx_t_9); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 395, __pyx_L6_except_error)
      }
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_v_tb = __pyx_t_8;
      __pyx_t_8 = 0;

      /* "rocksdb/_rocksdb.pyx":396
 *     except:
 *         tb = traceback.format_exc()
 *         logger.Log(log, "Error in merge_callback: %s", <bytes>tb)             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
      __pyx_t_13 = __Pyx_PyObject_AsString(__pyx_v_tb); if (unlikely((!__pyx_t_13) && PyErr_Occurred())) __PYX_ERR(0, 396, __pyx_L6_except_error)
      try {
        rocksdb::Log(__pyx_v_log, ((char const *)"Error in merge_callback: %s"), __pyx_t_13);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 396, __pyx_L6_except_error)
      }

      /* "rocksdb/_rocksdb.pyx":397
 *         tb = traceback.format_exc()
 *         logger.Log(log, "Error in merge_callback: %s", <bytes>tb)
 *         return False             # <<<<<<<<<<<<<<
 * 
 * cdef cpp_bool full_merge_callback(
 */
      __pyx_r = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      goto __pyx_L7_except_return;
    }
    __pyx_L6_except_error:;

    /* "rocksdb/_rocksdb.pyx":383
 *         py_existing_value = slice_to_bytes(deref(existing_value))
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         ret = (<object>ctx).merge(
 *             slice_to_bytes(key),
 */
    __Pyx_PyThreadState_assign
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
    goto __pyx_L1_error;
    __pyx_L8_try_return:;
    __Pyx_PyThreadState_assign
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
    goto __pyx_L0;
    __pyx_L7_except_return:;
    __Pyx_PyThreadState_assign
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
    goto __pyx_L0;
  }

  /* "rocksdb/_rocksdb.pyx":370
 *         return self.merge_op
 * 
 * cdef cpp_bool merge_callback(             # <<<<<<<<<<<<<<
 *     void* ctx,
 *     const Slice& key,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_WriteUnraisable("rocksdb._rocksdb.merge_callback", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_existing_value);
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XDECREF(__pyx_v_tb);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":399
 *         return False
 * 
 * cdef cpp_bool full_merge_callback(             # <<<<<<<<<<<<<<
 *     void* ctx,
 *     const Slice& key,
 */

static bool __pyx_f_7rocksdb_8_rocksdb_full_merge_callback(void *__pyx_v_ctx, rocksdb::Slice const &__pyx_v_key, rocksdb::Slice const *__pyx_v_existing_value, std::deque<std::string>  const &__pyx_v_op_list, std::string *__pyx_v_new_value, rocksdb::Logger *__pyx_v_log) {
  PyObject *__pyx_v_py_existing_value = NULL;
  PyObject *__pyx_v_ret = NULL;
  PyObject *__pyx_v_tb = NULL;
  size_t __pyx_v_i;
  bool __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  size_t __pyx_t_9;
  size_t __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  std::string __pyx_t_14;
  char *__pyx_t_15;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("full_merge_callback", 0);

  /* "rocksdb/_rocksdb.pyx":407
 *     logger.Logger* log) with gil:
 * 
 *     if existing_value == NULL:             # <<<<<<<<<<<<<<
 *         py_existing_value = None
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_existing_value == NULL) != 0);
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":408
 * 
 *     if existing_value == NULL:
 *         py_existing_value = None             # <<<<<<<<<<<<<<
 *     else:
 *         py_existing_value = slice_to_bytes(deref(existing_value))
 */
    __Pyx_INCREF(Py_None);
    __pyx_v_py_existing_value = Py_None;

    /* "rocksdb/_rocksdb.pyx":407
 *     logger.Logger* log) with gil:
 * 
 *     if existing_value == NULL:             # <<<<<<<<<<<<<<
 *         py_existing_value = None
 *     else:
 */
    goto __pyx_L3;
  }

  /* "rocksdb/_rocksdb.pyx":410
 *         py_existing_value = None
 *     else:
 *         py_existing_value = slice_to_bytes(deref(existing_value))             # <<<<<<<<<<<<<<
 * 
 *     try:
 */
  /*else*/ {
    __pyx_t_2 = __pyx_f_7rocksdb_8_rocksdb_slice_to_bytes((*__pyx_v_existing_value)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 410, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_py_existing_value = __pyx_t_2;
    __pyx_t_2 = 0;
  }
  __pyx_L3:;

  /* "rocksdb/_rocksdb.pyx":412
 *         py_existing_value = slice_to_bytes(deref(existing_value))
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         ret = (<object>ctx).full_merge(
 *             slice_to_bytes(key),
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_5);
    /*try:*/ {

      /* "rocksdb/_rocksdb.pyx":413
 * 
 *     try:
 *         ret = (<object>ctx).full_merge(             # <<<<<<<<<<<<<<
 *             slice_to_bytes(key),
 *             py_existing_value,
 */
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_ctx), __pyx_n_s_full_merge); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 413, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_6);

      /* "rocksdb/_rocksdb.pyx":414
 *     try:
 *         ret = (<object>ctx).full_merge(
 *             slice_to_bytes(key),             # <<<<<<<<<<<<<<
 *             py_existing_value,
 *             [string_to_bytes(op_list[i]) for i in range(op_list.size())])
 */
      __pyx_t_7 = __pyx_f_7rocksdb_8_rocksdb_slice_to_bytes(__pyx_v_key); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 414, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_7);

      /* "rocksdb/_rocksdb.pyx":416
 *             slice_to_bytes(key),
 *             py_existing_value,
 *             [string_to_bytes(op_list[i]) for i in range(op_list.size())])             # <<<<<<<<<<<<<<
 * 
 *         if ret[0]:
 */
      __pyx_t_8 = PyList_New(0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 416, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = __pyx_v_op_list.size();
      for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
        __pyx_v_i = __pyx_t_10;
        __pyx_t_11 = __pyx_f_7rocksdb_8_rocksdb_string_to_bytes((__pyx_v_op_list[__pyx_v_i])); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 416, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_11);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_8, (PyObject*)__pyx_t_11))) __PYX_ERR(0, 416, __pyx_L4_error)
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      }
      __pyx_t_11 = NULL;
      __pyx_t_12 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_11)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_11);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
          __pyx_t_12 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_6)) {
        PyObject *__pyx_temp[4] = {__pyx_t_11, __pyx_t_7, __pyx_v_py_existing_value, __pyx_t_8};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_12, 3+__pyx_t_12); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 413, __pyx_L4_error)
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
        PyObject *__pyx_temp[4] = {__pyx_t_11, __pyx_t_7, __pyx_v_py_existing_value, __pyx_t_8};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_12, 3+__pyx_t_12); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 413, __pyx_L4_error)
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      } else
      #endif
      {
        __pyx_t_13 = PyTuple_New(3+__pyx_t_12); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 413, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_13);
        if (__pyx_t_11) {
          __Pyx_GIVEREF(__pyx_t_11); PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_11); __pyx_t_11 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_13, 0+__pyx_t_12, __pyx_t_7);
        __Pyx_INCREF(__pyx_v_py_existing_value);
        __Pyx_GIVEREF(__pyx_v_py_existing_value);
        PyTuple_SET_ITEM(__pyx_t_13, 1+__pyx_t_12, __pyx_v_py_existing_value);
        __Pyx_GIVEREF(__pyx_t_8);
        PyTuple_SET_ITEM(__pyx_t_13, 2+__pyx_t_12, __pyx_t_8);
        __pyx_t_7 = 0;
        __pyx_t_8 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_13, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 413, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      }
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_v_ret = __pyx_t_2;
      __pyx_t_2 = 0;

      /* "rocksdb/_rocksdb.pyx":418
 *             [string_to_bytes(op_list[i]) for i in range(op_list.size())])
 * 
 *         if ret[0]:             # <<<<<<<<<<<<<<
 *             new_value.assign(bytes_to_string(ret[1]))
 *             return True
 */
      __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_ret, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 418, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 418, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (__pyx_t_1) {

        /* "rocksdb/_rocksdb.pyx":419
 * 
 *         if ret[0]:
 *             new_value.assign(bytes_to_string(ret[1]))             # <<<<<<<<<<<<<<
 *             return True
 *         return False
 */
        __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_ret, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 419, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_14 = __pyx_f_7rocksdb_8_rocksdb_bytes_to_string(__pyx_t_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 419, __pyx_L4_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_v_new_value->assign(__pyx_t_14);

        /* "rocksdb/_rocksdb.pyx":420
 *         if ret[0]:
 *             new_value.assign(bytes_to_string(ret[1]))
 *             return True             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
        __pyx_r = 1;
        goto __pyx_L8_try_return;

        /* "rocksdb/_rocksdb.pyx":418
 *             [string_to_bytes(op_list[i]) for i in range(op_list.size())])
 * 
 *         if ret[0]:             # <<<<<<<<<<<<<<
 *             new_value.assign(bytes_to_string(ret[1]))
 *             return True
 */
      }

      /* "rocksdb/_rocksdb.pyx":421
 *             new_value.assign(bytes_to_string(ret[1]))
 *             return True
 *         return False             # <<<<<<<<<<<<<<
 * 
 *     except:
 */
      __pyx_r = 0;
      goto __pyx_L8_try_return;

      /* "rocksdb/_rocksdb.pyx":412
 *         py_existing_value = slice_to_bytes(deref(existing_value))
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         ret = (<object>ctx).full_merge(
 *             slice_to_bytes(key),
 */
    }
    __pyx_L4_error:;
    __Pyx_PyThreadState_assign
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "rocksdb/_rocksdb.pyx":423
 *         return False
 * 
 *     except:             # <<<<<<<<<<<<<<
 *         tb = traceback.format_exc()
 *         logger.Log(log, "Error in full_merge_callback: %s", <bytes>tb)
 */
    /*except:*/ {
      __Pyx_AddTraceback("rocksdb._rocksdb.full_merge_callback", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_6, &__pyx_t_13) < 0) __PYX_ERR(0, 423, __pyx_L6_except_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_13);

      /* "rocksdb/_rocksdb.pyx":424
 * 
 *     except:
 *         tb = traceback.format_exc()             # <<<<<<<<<<<<<<
 *         logger.Log(log, "Error in full_merge_callback: %s", <bytes>tb)
 *         return False
 */
      __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_traceback); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 424, __pyx_L6_except_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_format_exc); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 424, __pyx_L6_except_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_11))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_11);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_11, function);
        }
      }
      if (__pyx_t_7) {
        __pyx_t_8 = __Pyx_PyObject_CallOneArg(__pyx_t_11, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 424, __pyx_L6_except_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      } else {
        __pyx_t_8 = __Pyx_PyObject_CallNoArg(__pyx_t_11); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 424, __pyx_L6_except_error)
      }
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_v_tb = __pyx_t_8;
      __pyx_t_8 = 0;

      /* "rocksdb/_rocksdb.pyx":425
 *     except:
 *         tb = traceback.format_exc()
 *         logger.Log(log, "Error in full_merge_callback: %s", <bytes>tb)             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
      __pyx_t_15 = __Pyx_PyObject_AsString(__pyx_v_tb); if (unlikely((!__pyx_t_15) && PyErr_Occurred())) __PYX_ERR(0, 425, __pyx_L6_except_error)
      try {
        rocksdb::Log(__pyx_v_log, ((char const *)"Error in full_merge_callback: %s"), __pyx_t_15);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 425, __pyx_L6_except_error)
      }

      /* "rocksdb/_rocksdb.pyx":426
 *         tb = traceback.format_exc()
 *         logger.Log(log, "Error in full_merge_callback: %s", <bytes>tb)
 *         return False             # <<<<<<<<<<<<<<
 * 
 * cdef cpp_bool partial_merge_callback(
 */
      __pyx_r = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      goto __pyx_L7_except_return;
    }
    __pyx_L6_except_error:;

    /* "rocksdb/_rocksdb.pyx":412
 *         py_existing_value = slice_to_bytes(deref(existing_value))
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         ret = (<object>ctx).full_merge(
 *             slice_to_bytes(key),
 */
    __Pyx_PyThreadState_assign
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
    goto __pyx_L1_error;
    __pyx_L8_try_return:;
    __Pyx_PyThreadState_assign
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
    goto __pyx_L0;
    __pyx_L7_except_return:;
    __Pyx_PyThreadState_assign
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
    goto __pyx_L0;
  }

  /* "rocksdb/_rocksdb.pyx":399
 *         return False
 * 
 * cdef cpp_bool full_merge_callback(             # <<<<<<<<<<<<<<
 *     void* ctx,
 *     const Slice& key,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_WriteUnraisable("rocksdb._rocksdb.full_merge_callback", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_existing_value);
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XDECREF(__pyx_v_tb);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":428
 *         return False
 * 
 * cdef cpp_bool partial_merge_callback(             # <<<<<<<<<<<<<<
 *     void* ctx,
 *     const Slice& key,
 */

static bool __pyx_f_7rocksdb_8_rocksdb_partial_merge_callback(void *__pyx_v_ctx, rocksdb::Slice const &__pyx_v_key, rocksdb::Slice const &__pyx_v_left_op, rocksdb::Slice const &__pyx_v_right_op, std::string *__pyx_v_new_value, rocksdb::Logger *__pyx_v_log) {
  PyObject *__pyx_v_ret = NULL;
  PyObject *__pyx_v_tb = NULL;
  bool __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  std::string __pyx_t_13;
  char *__pyx_t_14;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("partial_merge_callback", 0);

  /* "rocksdb/_rocksdb.pyx":436
 *     logger.Logger* log) with gil:
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         ret = (<object>ctx).partial_merge(
 *             slice_to_bytes(key),
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "rocksdb/_rocksdb.pyx":437
 * 
 *     try:
 *         ret = (<object>ctx).partial_merge(             # <<<<<<<<<<<<<<
 *             slice_to_bytes(key),
 *             slice_to_bytes(left_op),
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_ctx), __pyx_n_s_partial_merge); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 437, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);

      /* "rocksdb/_rocksdb.pyx":438
 *     try:
 *         ret = (<object>ctx).partial_merge(
 *             slice_to_bytes(key),             # <<<<<<<<<<<<<<
 *             slice_to_bytes(left_op),
 *             slice_to_bytes(right_op))
 */
      __pyx_t_6 = __pyx_f_7rocksdb_8_rocksdb_slice_to_bytes(__pyx_v_key); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 438, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_6);

      /* "rocksdb/_rocksdb.pyx":439
 *         ret = (<object>ctx).partial_merge(
 *             slice_to_bytes(key),
 *             slice_to_bytes(left_op),             # <<<<<<<<<<<<<<
 *             slice_to_bytes(right_op))
 * 
 */
      __pyx_t_7 = __pyx_f_7rocksdb_8_rocksdb_slice_to_bytes(__pyx_v_left_op); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 439, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_7);

      /* "rocksdb/_rocksdb.pyx":440
 *             slice_to_bytes(key),
 *             slice_to_bytes(left_op),
 *             slice_to_bytes(right_op))             # <<<<<<<<<<<<<<
 * 
 *         if ret[0]:
 */
      __pyx_t_8 = __pyx_f_7rocksdb_8_rocksdb_slice_to_bytes(__pyx_v_right_op); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 440, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = NULL;
      __pyx_t_10 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_10 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[4] = {__pyx_t_9, __pyx_t_6, __pyx_t_7, __pyx_t_8};
        __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_10, 3+__pyx_t_10); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 437, __pyx_L3_error)
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[4] = {__pyx_t_9, __pyx_t_6, __pyx_t_7, __pyx_t_8};
        __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_10, 3+__pyx_t_10); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 437, __pyx_L3_error)
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      } else
      #endif
      {
        __pyx_t_11 = PyTuple_New(3+__pyx_t_10); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 437, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_11);
        if (__pyx_t_9) {
          __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_9); __pyx_t_9 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_11, 0+__pyx_t_10, __pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_11, 1+__pyx_t_10, __pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_8);
        PyTuple_SET_ITEM(__pyx_t_11, 2+__pyx_t_10, __pyx_t_8);
        __pyx_t_6 = 0;
        __pyx_t_7 = 0;
        __pyx_t_8 = 0;
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_11, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 437, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_v_ret = __pyx_t_4;
      __pyx_t_4 = 0;

      /* "rocksdb/_rocksdb.pyx":442
 *             slice_to_bytes(right_op))
 * 
 *         if ret[0]:             # <<<<<<<<<<<<<<
 *             new_value.assign(bytes_to_string(ret[1]))
 *             return True
 */
      __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_ret, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 442, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_12 < 0)) __PYX_ERR(0, 442, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_12) {

        /* "rocksdb/_rocksdb.pyx":443
 * 
 *         if ret[0]:
 *             new_value.assign(bytes_to_string(ret[1]))             # <<<<<<<<<<<<<<
 *             return True
 *         return False
 */
        __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_ret, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 443, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_13 = __pyx_f_7rocksdb_8_rocksdb_bytes_to_string(__pyx_t_4); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 443, __pyx_L3_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_v_new_value->assign(__pyx_t_13);

        /* "rocksdb/_rocksdb.pyx":444
 *         if ret[0]:
 *             new_value.assign(bytes_to_string(ret[1]))
 *             return True             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
        __pyx_r = 1;
        goto __pyx_L7_try_return;

        /* "rocksdb/_rocksdb.pyx":442
 *             slice_to_bytes(right_op))
 * 
 *         if ret[0]:             # <<<<<<<<<<<<<<
 *             new_value.assign(bytes_to_string(ret[1]))
 *             return True
 */
      }

      /* "rocksdb/_rocksdb.pyx":445
 *             new_value.assign(bytes_to_string(ret[1]))
 *             return True
 *         return False             # <<<<<<<<<<<<<<
 * 
 *     except:
 */
      __pyx_r = 0;
      goto __pyx_L7_try_return;

      /* "rocksdb/_rocksdb.pyx":436
 *     logger.Logger* log) with gil:
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         ret = (<object>ctx).partial_merge(
 *             slice_to_bytes(key),
 */
    }
    __pyx_L3_error:;
    __Pyx_PyThreadState_assign
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "rocksdb/_rocksdb.pyx":447
 *         return False
 * 
 *     except:             # <<<<<<<<<<<<<<
 *         tb = traceback.format_exc()
 *         logger.Log(log, "Error in partial_merge_callback: %s", <bytes>tb)
 */
    /*except:*/ {
      __Pyx_AddTraceback("rocksdb._rocksdb.partial_merge_callback", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_5, &__pyx_t_11) < 0) __PYX_ERR(0, 447, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_11);

      /* "rocksdb/_rocksdb.pyx":448
 * 
 *     except:
 *         tb = traceback.format_exc()             # <<<<<<<<<<<<<<
 *         logger.Log(log, "Error in partial_merge_callback: %s", <bytes>tb)
 *         return False
 */
      __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_traceback); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 448, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_format_exc); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 448, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
        }
      }
      if (__pyx_t_7) {
        __pyx_t_8 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 448, __pyx_L5_except_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      } else {
        __pyx_t_8 = __Pyx_PyObject_CallNoArg(__pyx_t_6); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 448, __pyx_L5_except_error)
      }
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_v_tb = __pyx_t_8;
      __pyx_t_8 = 0;

      /* "rocksdb/_rocksdb.pyx":449
 *     except:
 *         tb = traceback.format_exc()
 *         logger.Log(log, "Error in partial_merge_callback: %s", <bytes>tb)             # <<<<<<<<<<<<<<
 *         return False
 * ##############################################
 */
      __pyx_t_14 = __Pyx_PyObject_AsString(__pyx_v_tb); if (unlikely((!__pyx_t_14) && PyErr_Occurred())) __PYX_ERR(0, 449, __pyx_L5_except_error)
      try {
        rocksdb::Log(__pyx_v_log, ((char const *)"Error in partial_merge_callback: %s"), __pyx_t_14);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 449, __pyx_L5_except_error)
      }

      /* "rocksdb/_rocksdb.pyx":450
 *         tb = traceback.format_exc()
 *         logger.Log(log, "Error in partial_merge_callback: %s", <bytes>tb)
 *         return False             # <<<<<<<<<<<<<<
 * ##############################################
 * 
 */
      __pyx_r = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      goto __pyx_L6_except_return;
    }
    __pyx_L5_except_error:;

    /* "rocksdb/_rocksdb.pyx":436
 *     logger.Logger* log) with gil:
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         ret = (<object>ctx).partial_merge(
 *             slice_to_bytes(key),
 */
    __Pyx_PyThreadState_assign
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L7_try_return:;
    __Pyx_PyThreadState_assign
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L0;
    __pyx_L6_except_return:;
    __Pyx_PyThreadState_assign
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L0;
  }

  /* "rocksdb/_rocksdb.pyx":428
 *         return False
 * 
 * cdef cpp_bool partial_merge_callback(             # <<<<<<<<<<<<<<
 *     void* ctx,
 *     const Slice& key,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_WriteUnraisable("rocksdb._rocksdb.partial_merge_callback", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XDECREF(__pyx_v_tb);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":456
 * @cython.internal
 * cdef class PyCache(object):
 *     cdef shared_ptr[cache.Cache] get_cache(self):             # <<<<<<<<<<<<<<
 *         return shared_ptr[cache.Cache]()
 * 
 */

static std::shared_ptr<rocksdb::Cache>  __pyx_f_7rocksdb_8_rocksdb_7PyCache_get_cache(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_PyCache *__pyx_v_self) {
  std::shared_ptr<rocksdb::Cache>  __pyx_r;
  __Pyx_RefNannyDeclarations
  std::shared_ptr<rocksdb::Cache>  __pyx_t_1;
  __Pyx_RefNannySetupContext("get_cache", 0);

  /* "rocksdb/_rocksdb.pyx":457
 * cdef class PyCache(object):
 *     cdef shared_ptr[cache.Cache] get_cache(self):
 *         return shared_ptr[cache.Cache]()             # <<<<<<<<<<<<<<
 * 
 * @cython.internal
 */
  try {
    __pyx_t_1 = std::shared_ptr<rocksdb::Cache> ();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 457, __pyx_L1_error)
  }
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":456
 * @cython.internal
 * cdef class PyCache(object):
 *     cdef shared_ptr[cache.Cache] get_cache(self):             # <<<<<<<<<<<<<<
 *         return shared_ptr[cache.Cache]()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("rocksdb._rocksdb.PyCache.get_cache", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":463
 *     cdef shared_ptr[cache.Cache] cache_ob
 * 
 *     def __cinit__(self, capacity, shard_bits=None):             # <<<<<<<<<<<<<<
 *         if shard_bits is not None:
 *             self.cache_ob = cache.NewLRUCache(capacity, shard_bits)
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_10PyLRUCache_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_10PyLRUCache_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_capacity = 0;
  PyObject *__pyx_v_shard_bits = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_capacity,&__pyx_n_s_shard_bits,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_capacity)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_shard_bits);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 463, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_capacity = values[0];
    __pyx_v_shard_bits = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 463, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.PyLRUCache.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_10PyLRUCache___cinit__(((struct __pyx_obj_7rocksdb_8_rocksdb_PyLRUCache *)__pyx_v_self), __pyx_v_capacity, __pyx_v_shard_bits);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_10PyLRUCache___cinit__(struct __pyx_obj_7rocksdb_8_rocksdb_PyLRUCache *__pyx_v_self, PyObject *__pyx_v_capacity, PyObject *__pyx_v_shard_bits) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  size_t __pyx_t_3;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "rocksdb/_rocksdb.pyx":464
 * 
 *     def __cinit__(self, capacity, shard_bits=None):
 *         if shard_bits is not None:             # <<<<<<<<<<<<<<
 *             self.cache_ob = cache.NewLRUCache(capacity, shard_bits)
 *         else:
 */
  __pyx_t_1 = (__pyx_v_shard_bits != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "rocksdb/_rocksdb.pyx":465
 *     def __cinit__(self, capacity, shard_bits=None):
 *         if shard_bits is not None:
 *             self.cache_ob = cache.NewLRUCache(capacity, shard_bits)             # <<<<<<<<<<<<<<
 *         else:
 *             self.cache_ob = cache.NewLRUCache(capacity)
 */
    __pyx_t_3 = __Pyx_PyInt_As_size_t(__pyx_v_capacity); if (unlikely((__pyx_t_3 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 465, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_v_shard_bits); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 465, __pyx_L1_error)
    __pyx_v_self->cache_ob = rocksdb::NewLRUCache(__pyx_t_3, __pyx_t_4);

    /* "rocksdb/_rocksdb.pyx":464
 * 
 *     def __cinit__(self, capacity, shard_bits=None):
 *         if shard_bits is not None:             # <<<<<<<<<<<<<<
 *             self.cache_ob = cache.NewLRUCache(capacity, shard_bits)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "rocksdb/_rocksdb.pyx":467
 *             self.cache_ob = cache.NewLRUCache(capacity, shard_bits)
 *         else:
 *             self.cache_ob = cache.NewLRUCache(capacity)             # <<<<<<<<<<<<<<
 * 
 *     cdef shared_ptr[cache.Cache] get_cache(self):
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyInt_As_size_t(__pyx_v_capacity); if (unlikely((__pyx_t_3 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 467, __pyx_L1_error)
    __pyx_v_self->cache_ob = rocksdb::NewLRUCache(__pyx_t_3);
  }
  __pyx_L3:;

  /* "rocksdb/_rocksdb.pyx":463
 *     cdef shared_ptr[cache.Cache] cache_ob
 * 
 *     def __cinit__(self, capacity, shard_bits=None):             # <<<<<<<<<<<<<<
 *         if shard_bits is not None:
 *             self.cache_ob = cache.NewLRUCache(capacity, shard_bits)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.PyLRUCache.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":469
 *             self.cache_ob = cache.NewLRUCache(capacity)
 * 
 *     cdef shared_ptr[cache.Cache] get_cache(self):             # <<<<<<<<<<<<<<
 *         return self.cache_ob
 * 
 */

static std::shared_ptr<rocksdb::Cache>  __pyx_f_7rocksdb_8_rocksdb_10PyLRUCache_get_cache(struct __pyx_obj_7rocksdb_8_rocksdb_PyLRUCache *__pyx_v_self) {
  std::shared_ptr<rocksdb::Cache>  __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_cache", 0);

  /* "rocksdb/_rocksdb.pyx":470
 * 
 *     cdef shared_ptr[cache.Cache] get_cache(self):
 *         return self.cache_ob             # <<<<<<<<<<<<<<
 * 
 * LRUCache = PyLRUCache
 */
  __pyx_r = __pyx_v_self->cache_ob;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":469
 *             self.cache_ob = cache.NewLRUCache(capacity)
 * 
 *     cdef shared_ptr[cache.Cache] get_cache(self):             # <<<<<<<<<<<<<<
 *         return self.cache_ob
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":481
 *     cdef object ob
 * 
 *     def __cinit__(self, object ob):             # <<<<<<<<<<<<<<
 *         if not isinstance(ob, ISliceTransform):
 *             raise TypeError("%s is not of type %s" % (ob, ISliceTransform))
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_16PySliceTransform_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_16PySliceTransform_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_ob = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_ob,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ob)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 481, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_ob = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 481, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.PySliceTransform.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_16PySliceTransform___cinit__(((struct __pyx_obj_7rocksdb_8_rocksdb_PySliceTransform *)__pyx_v_self), __pyx_v_ob);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_16PySliceTransform___cinit__(struct __pyx_obj_7rocksdb_8_rocksdb_PySliceTransform *__pyx_v_self, PyObject *__pyx_v_ob) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  std::string __pyx_t_6;
  py_rocks::SliceTransformWrapper *__pyx_t_7;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "rocksdb/_rocksdb.pyx":482
 * 
 *     def __cinit__(self, object ob):
 *         if not isinstance(ob, ISliceTransform):             # <<<<<<<<<<<<<<
 *             raise TypeError("%s is not of type %s" % (ob, ISliceTransform))
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_ISliceTransform); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 482, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_IsInstance(__pyx_v_ob, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 482, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = ((!(__pyx_t_2 != 0)) != 0);
  if (__pyx_t_3) {

    /* "rocksdb/_rocksdb.pyx":483
 *     def __cinit__(self, object ob):
 *         if not isinstance(ob, ISliceTransform):
 *             raise TypeError("%s is not of type %s" % (ob, ISliceTransform))             # <<<<<<<<<<<<<<
 * 
 *         self.ob = ob
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_ISliceTransform); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 483, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 483, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v_ob);
    __Pyx_GIVEREF(__pyx_v_ob);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_ob);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_s_is_not_of_type_s, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 483, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 483, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 483, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 483, __pyx_L1_error)

    /* "rocksdb/_rocksdb.pyx":482
 * 
 *     def __cinit__(self, object ob):
 *         if not isinstance(ob, ISliceTransform):             # <<<<<<<<<<<<<<
 *             raise TypeError("%s is not of type %s" % (ob, ISliceTransform))
 * 
 */
  }

  /* "rocksdb/_rocksdb.pyx":485
 *             raise TypeError("%s is not of type %s" % (ob, ISliceTransform))
 * 
 *         self.ob = ob             # <<<<<<<<<<<<<<
 *         self.transfomer.reset(
 *             <slice_transform.SliceTransform*>
 */
  __Pyx_INCREF(__pyx_v_ob);
  __Pyx_GIVEREF(__pyx_v_ob);
  __Pyx_GOTREF(__pyx_v_self->ob);
  __Pyx_DECREF(__pyx_v_self->ob);
  __pyx_v_self->ob = __pyx_v_ob;

  /* "rocksdb/_rocksdb.pyx":489
 *             <slice_transform.SliceTransform*>
 *                 new slice_transform.SliceTransformWrapper(
 *                     bytes_to_string(ob.name()),             # <<<<<<<<<<<<<<
 *                     <void*>ob,
 *                     slice_transform_callback,
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_ob, __pyx_n_s_name); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 489, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_5) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 489, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 489, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = __pyx_f_7rocksdb_8_rocksdb_bytes_to_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 489, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":488
 *         self.transfomer.reset(
 *             <slice_transform.SliceTransform*>
 *                 new slice_transform.SliceTransformWrapper(             # <<<<<<<<<<<<<<
 *                     bytes_to_string(ob.name()),
 *                     <void*>ob,
 */
  try {
    __pyx_t_7 = new py_rocks::SliceTransformWrapper(__pyx_t_6, ((void *)__pyx_v_ob), __pyx_f_7rocksdb_8_rocksdb_slice_transform_callback, __pyx_f_7rocksdb_8_rocksdb_slice_in_domain_callback, __pyx_f_7rocksdb_8_rocksdb_slice_in_range_callback);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 488, __pyx_L1_error)
  }

  /* "rocksdb/_rocksdb.pyx":486
 * 
 *         self.ob = ob
 *         self.transfomer.reset(             # <<<<<<<<<<<<<<
 *             <slice_transform.SliceTransform*>
 *                 new slice_transform.SliceTransformWrapper(
 */
  try {
    __pyx_v_self->transfomer.reset(((rocksdb::SliceTransform *)__pyx_t_7));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 486, __pyx_L1_error)
  }

  /* "rocksdb/_rocksdb.pyx":481
 *     cdef object ob
 * 
 *     def __cinit__(self, object ob):             # <<<<<<<<<<<<<<
 *         if not isinstance(ob, ISliceTransform):
 *             raise TypeError("%s is not of type %s" % (ob, ISliceTransform))
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("rocksdb._rocksdb.PySliceTransform.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":495
 *                     slice_in_range_callback))
 * 
 *     cdef object get_ob(self):             # <<<<<<<<<<<<<<
 *         return self.ob
 * 
 */

static PyObject *__pyx_f_7rocksdb_8_rocksdb_16PySliceTransform_get_ob(struct __pyx_obj_7rocksdb_8_rocksdb_PySliceTransform *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_ob", 0);

  /* "rocksdb/_rocksdb.pyx":496
 * 
 *     cdef object get_ob(self):
 *         return self.ob             # <<<<<<<<<<<<<<
 * 
 *     cdef shared_ptr[slice_transform.SliceTransform] get_transformer(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->ob);
  __pyx_r = __pyx_v_self->ob;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":495
 *                     slice_in_range_callback))
 * 
 *     cdef object get_ob(self):             # <<<<<<<<<<<<<<
 *         return self.ob
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":498
 *         return self.ob
 * 
 *     cdef shared_ptr[slice_transform.SliceTransform] get_transformer(self):             # <<<<<<<<<<<<<<
 *         return self.transfomer
 * 
 */

static std::shared_ptr<rocksdb::SliceTransform>  __pyx_f_7rocksdb_8_rocksdb_16PySliceTransform_get_transformer(struct __pyx_obj_7rocksdb_8_rocksdb_PySliceTransform *__pyx_v_self) {
  std::shared_ptr<rocksdb::SliceTransform>  __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_transformer", 0);

  /* "rocksdb/_rocksdb.pyx":499
 * 
 *     cdef shared_ptr[slice_transform.SliceTransform] get_transformer(self):
 *         return self.transfomer             # <<<<<<<<<<<<<<
 * 
 *     cdef set_info_log(self, shared_ptr[logger.Logger] info_log):
 */
  __pyx_r = __pyx_v_self->transfomer;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":498
 *         return self.ob
 * 
 *     cdef shared_ptr[slice_transform.SliceTransform] get_transformer(self):             # <<<<<<<<<<<<<<
 *         return self.transfomer
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":501
 *         return self.transfomer
 * 
 *     cdef set_info_log(self, shared_ptr[logger.Logger] info_log):             # <<<<<<<<<<<<<<
 *         cdef slice_transform.SliceTransformWrapper* ptr
 *         ptr = <slice_transform.SliceTransformWrapper*> self.transfomer.get()
 */

static PyObject *__pyx_f_7rocksdb_8_rocksdb_16PySliceTransform_set_info_log(struct __pyx_obj_7rocksdb_8_rocksdb_PySliceTransform *__pyx_v_self, std::shared_ptr<rocksdb::Logger>  __pyx_v_info_log) {
  py_rocks::SliceTransformWrapper *__pyx_v_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  rocksdb::SliceTransform *__pyx_t_1;
  __Pyx_RefNannySetupContext("set_info_log", 0);

  /* "rocksdb/_rocksdb.pyx":503
 *     cdef set_info_log(self, shared_ptr[logger.Logger] info_log):
 *         cdef slice_transform.SliceTransformWrapper* ptr
 *         ptr = <slice_transform.SliceTransformWrapper*> self.transfomer.get()             # <<<<<<<<<<<<<<
 *         ptr.set_info_log(info_log)
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->transfomer.get();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 503, __pyx_L1_error)
  }
  __pyx_v_ptr = ((py_rocks::SliceTransformWrapper *)__pyx_t_1);

  /* "rocksdb/_rocksdb.pyx":504
 *         cdef slice_transform.SliceTransformWrapper* ptr
 *         ptr = <slice_transform.SliceTransformWrapper*> self.transfomer.get()
 *         ptr.set_info_log(info_log)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    __pyx_v_ptr->set_info_log(__pyx_v_info_log);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 504, __pyx_L1_error)
  }

  /* "rocksdb/_rocksdb.pyx":501
 *         return self.transfomer
 * 
 *     cdef set_info_log(self, shared_ptr[logger.Logger] info_log):             # <<<<<<<<<<<<<<
 *         cdef slice_transform.SliceTransformWrapper* ptr
 *         ptr = <slice_transform.SliceTransformWrapper*> self.transfomer.get()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.PySliceTransform.set_info_log", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":507
 * 
 * 
 * cdef Slice slice_transform_callback(             # <<<<<<<<<<<<<<
 *     void* ctx,
 *     logger.Logger* log,
 */

static rocksdb::Slice __pyx_f_7rocksdb_8_rocksdb_slice_transform_callback(void *__pyx_v_ctx, rocksdb::Logger *__pyx_v_log, std::string &__pyx_v_error_msg, rocksdb::Slice const &__pyx_v_src) {
  size_t __pyx_v_offset;
  size_t __pyx_v_size;
  PyObject *__pyx_v_ret = NULL;
  PyObject *__pyx_v_msg = NULL;
  PyObject *__pyx_v_error = NULL;
  PyObject *__pyx_v_tb = NULL;
  rocksdb::Slice __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  size_t __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  char *__pyx_t_13;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("slice_transform_callback", 0);

  /* "rocksdb/_rocksdb.pyx":516
 *     cdef size_t size
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         ret = (<object>ctx).transform(slice_to_bytes(src))
 *         offset = ret[0]
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "rocksdb/_rocksdb.pyx":517
 * 
 *     try:
 *         ret = (<object>ctx).transform(slice_to_bytes(src))             # <<<<<<<<<<<<<<
 *         offset = ret[0]
 *         size = ret[1]
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_ctx), __pyx_n_s_transform); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 517, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __pyx_f_7rocksdb_8_rocksdb_slice_to_bytes(__pyx_v_src); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 517, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      if (!__pyx_t_7) {
        __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 517, __pyx_L3_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_4);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_5)) {
          PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_6};
          __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 517, __pyx_L3_error)
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
          PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_6};
          __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 517, __pyx_L3_error)
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        } else
        #endif
        {
          __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 517, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7); __pyx_t_7 = NULL;
          __Pyx_GIVEREF(__pyx_t_6);
          PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_6);
          __pyx_t_6 = 0;
          __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 517, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_v_ret = __pyx_t_4;
      __pyx_t_4 = 0;

      /* "rocksdb/_rocksdb.pyx":518
 *     try:
 *         ret = (<object>ctx).transform(slice_to_bytes(src))
 *         offset = ret[0]             # <<<<<<<<<<<<<<
 *         size = ret[1]
 *         if (offset + size) > src.size():
 */
      __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_ret, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 518, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_9 = __Pyx_PyInt_As_size_t(__pyx_t_4); if (unlikely((__pyx_t_9 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 518, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_v_offset = __pyx_t_9;

      /* "rocksdb/_rocksdb.pyx":519
 *         ret = (<object>ctx).transform(slice_to_bytes(src))
 *         offset = ret[0]
 *         size = ret[1]             # <<<<<<<<<<<<<<
 *         if (offset + size) > src.size():
 *             msg = "offset(%i) + size(%i) is bigger than slice(%i)"
 */
      __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_ret, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 519, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_9 = __Pyx_PyInt_As_size_t(__pyx_t_4); if (unlikely((__pyx_t_9 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 519, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_v_size = __pyx_t_9;

      /* "rocksdb/_rocksdb.pyx":520
 *         offset = ret[0]
 *         size = ret[1]
 *         if (offset + size) > src.size():             # <<<<<<<<<<<<<<
 *             msg = "offset(%i) + size(%i) is bigger than slice(%i)"
 *             raise Exception(msg  % (offset, size, src.size()))
 */
      __pyx_t_10 = (((__pyx_v_offset + __pyx_v_size) > __pyx_v_src.size()) != 0);
      if (__pyx_t_10) {

        /* "rocksdb/_rocksdb.pyx":521
 *         size = ret[1]
 *         if (offset + size) > src.size():
 *             msg = "offset(%i) + size(%i) is bigger than slice(%i)"             # <<<<<<<<<<<<<<
 *             raise Exception(msg  % (offset, size, src.size()))
 * 
 */
        __Pyx_INCREF(__pyx_kp_s_offset_i_size_i_is_bigger_than_s);
        __pyx_v_msg = __pyx_kp_s_offset_i_size_i_is_bigger_than_s;

        /* "rocksdb/_rocksdb.pyx":522
 *         if (offset + size) > src.size():
 *             msg = "offset(%i) + size(%i) is bigger than slice(%i)"
 *             raise Exception(msg  % (offset, size, src.size()))             # <<<<<<<<<<<<<<
 * 
 *         return Slice(src.data() + offset, size)
 */
        __pyx_t_4 = __Pyx_PyInt_FromSize_t(__pyx_v_offset); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 522, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = __Pyx_PyInt_FromSize_t(__pyx_v_size); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 522, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_8 = __Pyx_PyInt_FromSize_t(__pyx_v_src.size()); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 522, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 522, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_8);
        PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_t_8);
        __pyx_t_4 = 0;
        __pyx_t_5 = 0;
        __pyx_t_8 = 0;
        __pyx_t_8 = PyNumber_Remainder(__pyx_v_msg, __pyx_t_6); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 522, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 522, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_8);
        PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_8);
        __pyx_t_8 = 0;
        __pyx_t_8 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_t_6, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 522, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_Raise(__pyx_t_8, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __PYX_ERR(0, 522, __pyx_L3_error)

        /* "rocksdb/_rocksdb.pyx":520
 *         offset = ret[0]
 *         size = ret[1]
 *         if (offset + size) > src.size():             # <<<<<<<<<<<<<<
 *             msg = "offset(%i) + size(%i) is bigger than slice(%i)"
 *             raise Exception(msg  % (offset, size, src.size()))
 */
      }

      /* "rocksdb/_rocksdb.pyx":524
 *             raise Exception(msg  % (offset, size, src.size()))
 * 
 *         return Slice(src.data() + offset, size)             # <<<<<<<<<<<<<<
 *     except BaseException as error:
 *         tb = traceback.format_exc()
 */
      __pyx_r = rocksdb::Slice((__pyx_v_src.data() + __pyx_v_offset), __pyx_v_size);
      goto __pyx_L7_try_return;

      /* "rocksdb/_rocksdb.pyx":516
 *     cdef size_t size
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         ret = (<object>ctx).transform(slice_to_bytes(src))
 *         offset = ret[0]
 */
    }
    __pyx_L3_error:;
    __Pyx_PyThreadState_assign
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "rocksdb/_rocksdb.pyx":525
 * 
 *         return Slice(src.data() + offset, size)
 *     except BaseException as error:             # <<<<<<<<<<<<<<
 *         tb = traceback.format_exc()
 *         logger.Log(log, "Error in slice transfrom callback: %s", <bytes>tb)
 */
    __pyx_t_11 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_BaseException);
    if (__pyx_t_11) {
      __Pyx_AddTraceback("rocksdb._rocksdb.slice_transform_callback", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_8, &__pyx_t_6, &__pyx_t_5) < 0) __PYX_ERR(0, 525, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __pyx_v_error = __pyx_t_6;

      /* "rocksdb/_rocksdb.pyx":526
 *         return Slice(src.data() + offset, size)
 *     except BaseException as error:
 *         tb = traceback.format_exc()             # <<<<<<<<<<<<<<
 *         logger.Log(log, "Error in slice transfrom callback: %s", <bytes>tb)
 *         error_msg.assign(<bytes>str(error))
 */
      __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_traceback); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 526, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_format_exc); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 526, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_12))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_12);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_12, function);
        }
      }
      if (__pyx_t_7) {
        __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_12, __pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 526, __pyx_L5_except_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      } else {
        __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_12); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 526, __pyx_L5_except_error)
      }
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __pyx_v_tb = __pyx_t_4;
      __pyx_t_4 = 0;

      /* "rocksdb/_rocksdb.pyx":527
 *     except BaseException as error:
 *         tb = traceback.format_exc()
 *         logger.Log(log, "Error in slice transfrom callback: %s", <bytes>tb)             # <<<<<<<<<<<<<<
 *         error_msg.assign(<bytes>str(error))
 * 
 */
      __pyx_t_13 = __Pyx_PyObject_AsString(__pyx_v_tb); if (unlikely((!__pyx_t_13) && PyErr_Occurred())) __PYX_ERR(0, 527, __pyx_L5_except_error)
      try {
        rocksdb::Log(__pyx_v_log, ((char const *)"Error in slice transfrom callback: %s"), __pyx_t_13);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 527, __pyx_L5_except_error)
      }

      /* "rocksdb/_rocksdb.pyx":528
 *         tb = traceback.format_exc()
 *         logger.Log(log, "Error in slice transfrom callback: %s", <bytes>tb)
 *         error_msg.assign(<bytes>str(error))             # <<<<<<<<<<<<<<
 * 
 * cdef cpp_bool slice_in_domain_callback(
 */
      __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 528, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_v_error);
      __Pyx_GIVEREF(__pyx_v_error);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_error);
      __pyx_t_12 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_4, NULL); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 528, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_13 = __Pyx_PyObject_AsString(__pyx_t_12); if (unlikely((!__pyx_t_13) && PyErr_Occurred())) __PYX_ERR(0, 528, __pyx_L5_except_error)
      __pyx_v_error_msg.assign(__pyx_t_13);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L4_exception_handled;
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "rocksdb/_rocksdb.pyx":516
 *     cdef size_t size
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         ret = (<object>ctx).transform(slice_to_bytes(src))
 *         offset = ret[0]
 */
    __Pyx_PyThreadState_assign
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L7_try_return:;
    __Pyx_PyThreadState_assign
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L0;
    __pyx_L4_exception_handled:;
    __Pyx_PyThreadState_assign
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
  }

  /* "rocksdb/_rocksdb.pyx":507
 * 
 * 
 * cdef Slice slice_transform_callback(             # <<<<<<<<<<<<<<
 *     void* ctx,
 *     logger.Logger* log,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_WriteUnraisable("rocksdb._rocksdb.slice_transform_callback", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XDECREF(__pyx_v_msg);
  __Pyx_XDECREF(__pyx_v_error);
  __Pyx_XDECREF(__pyx_v_tb);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":530
 *         error_msg.assign(<bytes>str(error))
 * 
 * cdef cpp_bool slice_in_domain_callback(             # <<<<<<<<<<<<<<
 *     void* ctx,
 *     logger.Logger* log,
 */

static bool __pyx_f_7rocksdb_8_rocksdb_slice_in_domain_callback(void *__pyx_v_ctx, rocksdb::Logger *__pyx_v_log, std::string &__pyx_v_error_msg, rocksdb::Slice const &__pyx_v_src) {
  PyObject *__pyx_v_error = NULL;
  PyObject *__pyx_v_tb = NULL;
  bool __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  bool __pyx_t_9;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  char *__pyx_t_12;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("slice_in_domain_callback", 0);

  /* "rocksdb/_rocksdb.pyx":536
 *     const Slice& src) with gil:
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         return (<object>ctx).in_domain(slice_to_bytes(src))
 *     except BaseException as error:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "rocksdb/_rocksdb.pyx":537
 * 
 *     try:
 *         return (<object>ctx).in_domain(slice_to_bytes(src))             # <<<<<<<<<<<<<<
 *     except BaseException as error:
 *         tb = traceback.format_exc()
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_ctx), __pyx_n_s_in_domain); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 537, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __pyx_f_7rocksdb_8_rocksdb_slice_to_bytes(__pyx_v_src); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 537, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      if (!__pyx_t_7) {
        __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 537, __pyx_L3_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_4);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_5)) {
          PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_6};
          __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 537, __pyx_L3_error)
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
          PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_6};
          __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 537, __pyx_L3_error)
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        } else
        #endif
        {
          __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 537, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7); __pyx_t_7 = NULL;
          __Pyx_GIVEREF(__pyx_t_6);
          PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_6);
          __pyx_t_6 = 0;
          __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 537, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_9 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 537, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_r = __pyx_t_9;
      goto __pyx_L7_try_return;

      /* "rocksdb/_rocksdb.pyx":536
 *     const Slice& src) with gil:
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         return (<object>ctx).in_domain(slice_to_bytes(src))
 *     except BaseException as error:
 */
    }
    __pyx_L3_error:;
    __Pyx_PyThreadState_assign
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "rocksdb/_rocksdb.pyx":538
 *     try:
 *         return (<object>ctx).in_domain(slice_to_bytes(src))
 *     except BaseException as error:             # <<<<<<<<<<<<<<
 *         tb = traceback.format_exc()
 *         logger.Log(log, "Error in slice transfrom callback: %s", <bytes>tb)
 */
    __pyx_t_10 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_BaseException);
    if (__pyx_t_10) {
      __Pyx_AddTraceback("rocksdb._rocksdb.slice_in_domain_callback", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_5, &__pyx_t_8) < 0) __PYX_ERR(0, 538, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_5);
      __pyx_v_error = __pyx_t_5;

      /* "rocksdb/_rocksdb.pyx":539
 *         return (<object>ctx).in_domain(slice_to_bytes(src))
 *     except BaseException as error:
 *         tb = traceback.format_exc()             # <<<<<<<<<<<<<<
 *         logger.Log(log, "Error in slice transfrom callback: %s", <bytes>tb)
 *         error_msg.assign(<bytes>str(error))
 */
      __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_traceback); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 539, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_format_exc); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 539, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_11))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_11);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_11, function);
        }
      }
      if (__pyx_t_7) {
        __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_11, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 539, __pyx_L5_except_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      } else {
        __pyx_t_6 = __Pyx_PyObject_CallNoArg(__pyx_t_11); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 539, __pyx_L5_except_error)
      }
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_v_tb = __pyx_t_6;
      __pyx_t_6 = 0;

      /* "rocksdb/_rocksdb.pyx":540
 *     except BaseException as error:
 *         tb = traceback.format_exc()
 *         logger.Log(log, "Error in slice transfrom callback: %s", <bytes>tb)             # <<<<<<<<<<<<<<
 *         error_msg.assign(<bytes>str(error))
 * 
 */
      __pyx_t_12 = __Pyx_PyObject_AsString(__pyx_v_tb); if (unlikely((!__pyx_t_12) && PyErr_Occurred())) __PYX_ERR(0, 540, __pyx_L5_except_error)
      try {
        rocksdb::Log(__pyx_v_log, ((char const *)"Error in slice transfrom callback: %s"), __pyx_t_12);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 540, __pyx_L5_except_error)
      }

      /* "rocksdb/_rocksdb.pyx":541
 *         tb = traceback.format_exc()
 *         logger.Log(log, "Error in slice transfrom callback: %s", <bytes>tb)
 *         error_msg.assign(<bytes>str(error))             # <<<<<<<<<<<<<<
 * 
 * cdef cpp_bool slice_in_range_callback(
 */
      __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 541, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_v_error);
      __Pyx_GIVEREF(__pyx_v_error);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_error);
      __pyx_t_11 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_6, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 541, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_12 = __Pyx_PyObject_AsString(__pyx_t_11); if (unlikely((!__pyx_t_12) && PyErr_Occurred())) __PYX_ERR(0, 541, __pyx_L5_except_error)
      __pyx_v_error_msg.assign(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L4_exception_handled;
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "rocksdb/_rocksdb.pyx":536
 *     const Slice& src) with gil:
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         return (<object>ctx).in_domain(slice_to_bytes(src))
 *     except BaseException as error:
 */
    __Pyx_PyThreadState_assign
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L7_try_return:;
    __Pyx_PyThreadState_assign
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L0;
    __pyx_L4_exception_handled:;
    __Pyx_PyThreadState_assign
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
  }

  /* "rocksdb/_rocksdb.pyx":530
 *         error_msg.assign(<bytes>str(error))
 * 
 * cdef cpp_bool slice_in_domain_callback(             # <<<<<<<<<<<<<<
 *     void* ctx,
 *     logger.Logger* log,
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_WriteUnraisable("rocksdb._rocksdb.slice_in_domain_callback", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_error);
  __Pyx_XDECREF(__pyx_v_tb);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":543
 *         error_msg.assign(<bytes>str(error))
 * 
 * cdef cpp_bool slice_in_range_callback(             # <<<<<<<<<<<<<<
 *     void* ctx,
 *     logger.Logger* log,
 */

static bool __pyx_f_7rocksdb_8_rocksdb_slice_in_range_callback(void *__pyx_v_ctx, rocksdb::Logger *__pyx_v_log, std::string &__pyx_v_error_msg, rocksdb::Slice const &__pyx_v_src) {
  PyObject *__pyx_v_error = NULL;
  PyObject *__pyx_v_tb = NULL;
  bool __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  bool __pyx_t_9;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  char *__pyx_t_12;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("slice_in_range_callback", 0);

  /* "rocksdb/_rocksdb.pyx":549
 *     const Slice& src) with gil:
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         return (<object>ctx).in_range(slice_to_bytes(src))
 *     except BaseException as error:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "rocksdb/_rocksdb.pyx":550
 * 
 *     try:
 *         return (<object>ctx).in_range(slice_to_bytes(src))             # <<<<<<<<<<<<<<
 *     except BaseException as error:
 *         tb = traceback.format_exc()
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_ctx), __pyx_n_s_in_range); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 550, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __pyx_f_7rocksdb_8_rocksdb_slice_to_bytes(__pyx_v_src); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 550, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      if (!__pyx_t_7) {
        __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 550, __pyx_L3_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_4);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_5)) {
          PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_6};
          __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 550, __pyx_L3_error)
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
          PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_6};
          __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 550, __pyx_L3_error)
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        } else
        #endif
        {
          __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 550, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7); __pyx_t_7 = NULL;
          __Pyx_GIVEREF(__pyx_t_6);
          PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_6);
          __pyx_t_6 = 0;
          __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 550, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_9 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 550, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_r = __pyx_t_9;
      goto __pyx_L7_try_return;

      /* "rocksdb/_rocksdb.pyx":549
 *     const Slice& src) with gil:
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         return (<object>ctx).in_range(slice_to_bytes(src))
 *     except BaseException as error:
 */
    }
    __pyx_L3_error:;
    __Pyx_PyThreadState_assign
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "rocksdb/_rocksdb.pyx":551
 *     try:
 *         return (<object>ctx).in_range(slice_to_bytes(src))
 *     except BaseException as error:             # <<<<<<<<<<<<<<
 *         tb = traceback.format_exc()
 *         logger.Log(log, "Error in slice transfrom callback: %s", <bytes>tb)
 */
    __pyx_t_10 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_BaseException);
    if (__pyx_t_10) {
      __Pyx_AddTraceback("rocksdb._rocksdb.slice_in_range_callback", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_5, &__pyx_t_8) < 0) __PYX_ERR(0, 551, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_5);
      __pyx_v_error = __pyx_t_5;

      /* "rocksdb/_rocksdb.pyx":552
 *         return (<object>ctx).in_range(slice_to_bytes(src))
 *     except BaseException as error:
 *         tb = traceback.format_exc()             # <<<<<<<<<<<<<<
 *         logger.Log(log, "Error in slice transfrom callback: %s", <bytes>tb)
 *         error_msg.assign(<bytes>str(error))
 */
      __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_traceback); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 552, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_format_exc); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 552, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_11))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_11);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_11, function);
        }
      }
      if (__pyx_t_7) {
        __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_11, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 552, __pyx_L5_except_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      } else {
        __pyx_t_6 = __Pyx_PyObject_CallNoArg(__pyx_t_11); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 552, __pyx_L5_except_error)
      }
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_v_tb = __pyx_t_6;
      __pyx_t_6 = 0;

      /* "rocksdb/_rocksdb.pyx":553
 *     except BaseException as error:
 *         tb = traceback.format_exc()
 *         logger.Log(log, "Error in slice transfrom callback: %s", <bytes>tb)             # <<<<<<<<<<<<<<
 *         error_msg.assign(<bytes>str(error))
 * ###########################################
 */
      __pyx_t_12 = __Pyx_PyObject_AsString(__pyx_v_tb); if (unlikely((!__pyx_t_12) && PyErr_Occurred())) __PYX_ERR(0, 553, __pyx_L5_except_error)
      try {
        rocksdb::Log(__pyx_v_log, ((char const *)"Error in slice transfrom callback: %s"), __pyx_t_12);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 553, __pyx_L5_except_error)
      }

      /* "rocksdb/_rocksdb.pyx":554
 *         tb = traceback.format_exc()
 *         logger.Log(log, "Error in slice transfrom callback: %s", <bytes>tb)
 *         error_msg.assign(<bytes>str(error))             # <<<<<<<<<<<<<<
 * ###########################################
 * 
 */
      __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 554, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_v_error);
      __Pyx_GIVEREF(__pyx_v_error);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_error);
      __pyx_t_11 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_6, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 554, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_12 = __Pyx_PyObject_AsString(__pyx_t_11); if (unlikely((!__pyx_t_12) && PyErr_Occurred())) __PYX_ERR(0, 554, __pyx_L5_except_error)
      __pyx_v_error_msg.assign(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L4_exception_handled;
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "rocksdb/_rocksdb.pyx":549
 *     const Slice& src) with gil:
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         return (<object>ctx).in_range(slice_to_bytes(src))
 *     except BaseException as error:
 */
    __Pyx_PyThreadState_assign
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L7_try_return:;
    __Pyx_PyThreadState_assign
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L0;
    __pyx_L4_exception_handled:;
    __Pyx_PyThreadState_assign
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
  }

  /* "rocksdb/_rocksdb.pyx":543
 *         error_msg.assign(<bytes>str(error))
 * 
 * cdef cpp_bool slice_in_range_callback(             # <<<<<<<<<<<<<<
 *     void* ctx,
 *     logger.Logger* log,
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_WriteUnraisable("rocksdb._rocksdb.slice_in_range_callback", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_error);
  __Pyx_XDECREF(__pyx_v_tb);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":562
 *     cdef shared_ptr[table_factory.TableFactory] factory
 * 
 *     cdef shared_ptr[table_factory.TableFactory] get_table_factory(self):             # <<<<<<<<<<<<<<
 *         return self.factory
 * 
 */

static std::shared_ptr<rocksdb::TableFactory>  __pyx_f_7rocksdb_8_rocksdb_14PyTableFactory_get_table_factory(struct __pyx_obj_7rocksdb_8_rocksdb_PyTableFactory *__pyx_v_self) {
  std::shared_ptr<rocksdb::TableFactory>  __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_table_factory", 0);

  /* "rocksdb/_rocksdb.pyx":563
 * 
 *     cdef shared_ptr[table_factory.TableFactory] get_table_factory(self):
 *         return self.factory             # <<<<<<<<<<<<<<
 * 
 *     cdef set_info_log(self, shared_ptr[logger.Logger] info_log):
 */
  __pyx_r = __pyx_v_self->factory;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":562
 *     cdef shared_ptr[table_factory.TableFactory] factory
 * 
 *     cdef shared_ptr[table_factory.TableFactory] get_table_factory(self):             # <<<<<<<<<<<<<<
 *         return self.factory
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":565
 *         return self.factory
 * 
 *     cdef set_info_log(self, shared_ptr[logger.Logger] info_log):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

static PyObject *__pyx_f_7rocksdb_8_rocksdb_14PyTableFactory_set_info_log(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_PyTableFactory *__pyx_v_self, CYTHON_UNUSED std::shared_ptr<rocksdb::Logger>  __pyx_v_info_log) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_info_log", 0);

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":571
 *     cdef PyFilterPolicy py_filter_policy
 * 
 *     def __init__(self,             # <<<<<<<<<<<<<<
 *             index_type='binary_search',
 *             py_bool hash_index_allow_collision=True,
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_22BlockBasedTableFactory_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_22BlockBasedTableFactory_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_index_type = 0;
  PyBoolObject *__pyx_v_hash_index_allow_collision = 0;
  PyObject *__pyx_v_checksum = 0;
  struct __pyx_obj_7rocksdb_8_rocksdb_PyCache *__pyx_v_block_cache = 0;
  struct __pyx_obj_7rocksdb_8_rocksdb_PyCache *__pyx_v_block_cache_compressed = 0;
  PyObject *__pyx_v_filter_policy = 0;
  PyObject *__pyx_v_no_block_cache = 0;
  PyObject *__pyx_v_block_size = 0;
  PyObject *__pyx_v_block_size_deviation = 0;
  PyObject *__pyx_v_block_restart_interval = 0;
  PyObject *__pyx_v_whole_key_filtering = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_index_type,&__pyx_n_s_hash_index_allow_collision,&__pyx_n_s_checksum,&__pyx_n_s_block_cache,&__pyx_n_s_block_cache_compressed,&__pyx_n_s_filter_policy,&__pyx_n_s_no_block_cache,&__pyx_n_s_block_size,&__pyx_n_s_block_size_deviation,&__pyx_n_s_block_restart_interval,&__pyx_n_s_whole_key_filtering,0};
    PyObject* values[11] = {0,0,0,0,0,0,0,0,0,0,0};
    values[0] = ((PyObject *)__pyx_n_s_binary_search);

    /* "rocksdb/_rocksdb.pyx":573
 *     def __init__(self,
 *             index_type='binary_search',
 *             py_bool hash_index_allow_collision=True,             # <<<<<<<<<<<<<<
 *             checksum='crc32',
 *             PyCache block_cache=None,
 */
    values[1] = (PyObject *)((PyBoolObject *)Py_True);
    values[2] = ((PyObject *)__pyx_n_s_crc32);

    /* "rocksdb/_rocksdb.pyx":575
 *             py_bool hash_index_allow_collision=True,
 *             checksum='crc32',
 *             PyCache block_cache=None,             # <<<<<<<<<<<<<<
 *             PyCache block_cache_compressed=None,
 *             filter_policy=None,
 */
    values[3] = (PyObject *)((struct __pyx_obj_7rocksdb_8_rocksdb_PyCache *)Py_None);

    /* "rocksdb/_rocksdb.pyx":576
 *             checksum='crc32',
 *             PyCache block_cache=None,
 *             PyCache block_cache_compressed=None,             # <<<<<<<<<<<<<<
 *             filter_policy=None,
 *             no_block_cache=False,
 */
    values[4] = (PyObject *)((struct __pyx_obj_7rocksdb_8_rocksdb_PyCache *)Py_None);

    /* "rocksdb/_rocksdb.pyx":577
 *             PyCache block_cache=None,
 *             PyCache block_cache_compressed=None,
 *             filter_policy=None,             # <<<<<<<<<<<<<<
 *             no_block_cache=False,
 *             block_size=None,
 */
    values[5] = ((PyObject *)Py_None);

    /* "rocksdb/_rocksdb.pyx":578
 *             PyCache block_cache_compressed=None,
 *             filter_policy=None,
 *             no_block_cache=False,             # <<<<<<<<<<<<<<
 *             block_size=None,
 *             block_size_deviation=None,
 */
    values[6] = ((PyObject *)Py_False);

    /* "rocksdb/_rocksdb.pyx":579
 *             filter_policy=None,
 *             no_block_cache=False,
 *             block_size=None,             # <<<<<<<<<<<<<<
 *             block_size_deviation=None,
 *             block_restart_interval=None,
 */
    values[7] = ((PyObject *)Py_None);

    /* "rocksdb/_rocksdb.pyx":580
 *             no_block_cache=False,
 *             block_size=None,
 *             block_size_deviation=None,             # <<<<<<<<<<<<<<
 *             block_restart_interval=None,
 *             whole_key_filtering=None):
 */
    values[8] = ((PyObject *)Py_None);

    /* "rocksdb/_rocksdb.pyx":581
 *             block_size=None,
 *             block_size_deviation=None,
 *             block_restart_interval=None,             # <<<<<<<<<<<<<<
 *             whole_key_filtering=None):
 * 
 */
    values[9] = ((PyObject *)Py_None);

    /* "rocksdb/_rocksdb.pyx":582
 *             block_size_deviation=None,
 *             block_restart_interval=None,
 *             whole_key_filtering=None):             # <<<<<<<<<<<<<<
 * 
 *         cdef table_factory.BlockBasedTableOptions table_options
 */
    values[10] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_index_type);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_hash_index_allow_collision);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_checksum);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_block_cache);
          if (value) { values[3] = value; kw_args--; }
        }
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_block_cache_compressed);
          if (value) { values[4] = value; kw_args--; }
        }
        case  5:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_filter_policy);
          if (value) { values[5] = value; kw_args--; }
        }
        case  6:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_no_block_cache);
          if (value) { values[6] = value; kw_args--; }
        }
        case  7:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_block_size);
          if (value) { values[7] = value; kw_args--; }
        }
        case  8:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_block_size_deviation);
          if (value) { values[8] = value; kw_args--; }
        }
        case  9:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_block_restart_interval);
          if (value) { values[9] = value; kw_args--; }
        }
        case 10:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_whole_key_filtering);
          if (value) { values[10] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 571, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_index_type = values[0];
    __pyx_v_hash_index_allow_collision = ((PyBoolObject *)values[1]);
    __pyx_v_checksum = values[2];
    __pyx_v_block_cache = ((struct __pyx_obj_7rocksdb_8_rocksdb_PyCache *)values[3]);
    __pyx_v_block_cache_compressed = ((struct __pyx_obj_7rocksdb_8_rocksdb_PyCache *)values[4]);
    __pyx_v_filter_policy = values[5];
    __pyx_v_no_block_cache = values[6];
    __pyx_v_block_size = values[7];
    __pyx_v_block_size_deviation = values[8];
    __pyx_v_block_restart_interval = values[9];
    __pyx_v_whole_key_filtering = values[10];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 11, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 571, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.BlockBasedTableFactory.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_hash_index_allow_collision), __pyx_ptype_7cpython_4bool_bool, 1, "hash_index_allow_collision", 0))) __PYX_ERR(0, 573, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_block_cache), __pyx_ptype_7rocksdb_8_rocksdb_PyCache, 1, "block_cache", 0))) __PYX_ERR(0, 575, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_block_cache_compressed), __pyx_ptype_7rocksdb_8_rocksdb_PyCache, 1, "block_cache_compressed", 0))) __PYX_ERR(0, 576, __pyx_L1_error)
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_22BlockBasedTableFactory___init__(((struct __pyx_obj_7rocksdb_8_rocksdb_BlockBasedTableFactory *)__pyx_v_self), __pyx_v_index_type, __pyx_v_hash_index_allow_collision, __pyx_v_checksum, __pyx_v_block_cache, __pyx_v_block_cache_compressed, __pyx_v_filter_policy, __pyx_v_no_block_cache, __pyx_v_block_size, __pyx_v_block_size_deviation, __pyx_v_block_restart_interval, __pyx_v_whole_key_filtering);

  /* "rocksdb/_rocksdb.pyx":571
 *     cdef PyFilterPolicy py_filter_policy
 * 
 *     def __init__(self,             # <<<<<<<<<<<<<<
 *             index_type='binary_search',
 *             py_bool hash_index_allow_collision=True,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_22BlockBasedTableFactory___init__(struct __pyx_obj_7rocksdb_8_rocksdb_BlockBasedTableFactory *__pyx_v_self, PyObject *__pyx_v_index_type, PyBoolObject *__pyx_v_hash_index_allow_collision, PyObject *__pyx_v_checksum, struct __pyx_obj_7rocksdb_8_rocksdb_PyCache *__pyx_v_block_cache, struct __pyx_obj_7rocksdb_8_rocksdb_PyCache *__pyx_v_block_cache_compressed, PyObject *__pyx_v_filter_policy, PyObject *__pyx_v_no_block_cache, PyObject *__pyx_v_block_size, PyObject *__pyx_v_block_size_deviation, PyObject *__pyx_v_block_restart_interval, PyObject *__pyx_v_whole_key_filtering) {
  rocksdb::BlockBasedTableOptions __pyx_v_table_options;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  size_t __pyx_t_5;
  int __pyx_t_6;
  __pyx_t_7rocksdb_8_rocksdb_ConstFilterPolicy *__pyx_t_7;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "rocksdb/_rocksdb.pyx":586
 *         cdef table_factory.BlockBasedTableOptions table_options
 * 
 *         if index_type == 'binary_search':             # <<<<<<<<<<<<<<
 *             table_options.index_type = table_factory.kBinarySearch
 *         elif index_type == 'hash_search':
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_index_type, __pyx_n_s_binary_search, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 586, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":587
 * 
 *         if index_type == 'binary_search':
 *             table_options.index_type = table_factory.kBinarySearch             # <<<<<<<<<<<<<<
 *         elif index_type == 'hash_search':
 *             table_options.index_type = table_factory.kHashSearch
 */
    __pyx_v_table_options.index_type = rocksdb::BlockBasedTableOptions::IndexType::kBinarySearch;

    /* "rocksdb/_rocksdb.pyx":586
 *         cdef table_factory.BlockBasedTableOptions table_options
 * 
 *         if index_type == 'binary_search':             # <<<<<<<<<<<<<<
 *             table_options.index_type = table_factory.kBinarySearch
 *         elif index_type == 'hash_search':
 */
    goto __pyx_L3;
  }

  /* "rocksdb/_rocksdb.pyx":588
 *         if index_type == 'binary_search':
 *             table_options.index_type = table_factory.kBinarySearch
 *         elif index_type == 'hash_search':             # <<<<<<<<<<<<<<
 *             table_options.index_type = table_factory.kHashSearch
 *         else:
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_index_type, __pyx_n_s_hash_search, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 588, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":589
 *             table_options.index_type = table_factory.kBinarySearch
 *         elif index_type == 'hash_search':
 *             table_options.index_type = table_factory.kHashSearch             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError("Unknown index_type: %s" % index_type)
 */
    __pyx_v_table_options.index_type = rocksdb::BlockBasedTableOptions::IndexType::kHashSearch;

    /* "rocksdb/_rocksdb.pyx":588
 *         if index_type == 'binary_search':
 *             table_options.index_type = table_factory.kBinarySearch
 *         elif index_type == 'hash_search':             # <<<<<<<<<<<<<<
 *             table_options.index_type = table_factory.kHashSearch
 *         else:
 */
    goto __pyx_L3;
  }

  /* "rocksdb/_rocksdb.pyx":591
 *             table_options.index_type = table_factory.kHashSearch
 *         else:
 *             raise ValueError("Unknown index_type: %s" % index_type)             # <<<<<<<<<<<<<<
 * 
 *         if hash_index_allow_collision:
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_Unknown_index_type_s, __pyx_v_index_type); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 591, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 591, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 591, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 591, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "rocksdb/_rocksdb.pyx":593
 *             raise ValueError("Unknown index_type: %s" % index_type)
 * 
 *         if hash_index_allow_collision:             # <<<<<<<<<<<<<<
 *             table_options.hash_index_allow_collision = True
 *         else:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_hash_index_allow_collision)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 593, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":594
 * 
 *         if hash_index_allow_collision:
 *             table_options.hash_index_allow_collision = True             # <<<<<<<<<<<<<<
 *         else:
 *             table_options.hash_index_allow_collision = False
 */
    __pyx_v_table_options.hash_index_allow_collision = 1;

    /* "rocksdb/_rocksdb.pyx":593
 *             raise ValueError("Unknown index_type: %s" % index_type)
 * 
 *         if hash_index_allow_collision:             # <<<<<<<<<<<<<<
 *             table_options.hash_index_allow_collision = True
 *         else:
 */
    goto __pyx_L4;
  }

  /* "rocksdb/_rocksdb.pyx":596
 *             table_options.hash_index_allow_collision = True
 *         else:
 *             table_options.hash_index_allow_collision = False             # <<<<<<<<<<<<<<
 * 
 *         if checksum == 'crc32':
 */
  /*else*/ {
    __pyx_v_table_options.hash_index_allow_collision = 0;
  }
  __pyx_L4:;

  /* "rocksdb/_rocksdb.pyx":598
 *             table_options.hash_index_allow_collision = False
 * 
 *         if checksum == 'crc32':             # <<<<<<<<<<<<<<
 *             table_options.checksum = table_factory.kCRC32c
 *         elif checksum == 'xxhash':
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_checksum, __pyx_n_s_crc32, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 598, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":599
 * 
 *         if checksum == 'crc32':
 *             table_options.checksum = table_factory.kCRC32c             # <<<<<<<<<<<<<<
 *         elif checksum == 'xxhash':
 *             table_options.checksum = table_factory.kxxHash
 */
    __pyx_v_table_options.checksum = rocksdb::kCRC32c;

    /* "rocksdb/_rocksdb.pyx":598
 *             table_options.hash_index_allow_collision = False
 * 
 *         if checksum == 'crc32':             # <<<<<<<<<<<<<<
 *             table_options.checksum = table_factory.kCRC32c
 *         elif checksum == 'xxhash':
 */
    goto __pyx_L5;
  }

  /* "rocksdb/_rocksdb.pyx":600
 *         if checksum == 'crc32':
 *             table_options.checksum = table_factory.kCRC32c
 *         elif checksum == 'xxhash':             # <<<<<<<<<<<<<<
 *             table_options.checksum = table_factory.kxxHash
 *         else:
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_checksum, __pyx_n_s_xxhash, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 600, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":601
 *             table_options.checksum = table_factory.kCRC32c
 *         elif checksum == 'xxhash':
 *             table_options.checksum = table_factory.kxxHash             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError("Unknown checksum: %s" % checksum)
 */
    __pyx_v_table_options.checksum = rocksdb::kxxHash;

    /* "rocksdb/_rocksdb.pyx":600
 *         if checksum == 'crc32':
 *             table_options.checksum = table_factory.kCRC32c
 *         elif checksum == 'xxhash':             # <<<<<<<<<<<<<<
 *             table_options.checksum = table_factory.kxxHash
 *         else:
 */
    goto __pyx_L5;
  }

  /* "rocksdb/_rocksdb.pyx":603
 *             table_options.checksum = table_factory.kxxHash
 *         else:
 *             raise ValueError("Unknown checksum: %s" % checksum)             # <<<<<<<<<<<<<<
 * 
 *         if no_block_cache:
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_Unknown_checksum_s, __pyx_v_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 603, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 603, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 603, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 603, __pyx_L1_error)
  }
  __pyx_L5:;

  /* "rocksdb/_rocksdb.pyx":605
 *             raise ValueError("Unknown checksum: %s" % checksum)
 * 
 *         if no_block_cache:             # <<<<<<<<<<<<<<
 *             table_options.no_block_cache = True
 *         else:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_no_block_cache); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 605, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":606
 * 
 *         if no_block_cache:
 *             table_options.no_block_cache = True             # <<<<<<<<<<<<<<
 *         else:
 *             table_options.no_block_cache = False
 */
    __pyx_v_table_options.no_block_cache = 1;

    /* "rocksdb/_rocksdb.pyx":605
 *             raise ValueError("Unknown checksum: %s" % checksum)
 * 
 *         if no_block_cache:             # <<<<<<<<<<<<<<
 *             table_options.no_block_cache = True
 *         else:
 */
    goto __pyx_L6;
  }

  /* "rocksdb/_rocksdb.pyx":608
 *             table_options.no_block_cache = True
 *         else:
 *             table_options.no_block_cache = False             # <<<<<<<<<<<<<<
 * 
 *         # If the following options are None use the rocksdb default.
 */
  /*else*/ {
    __pyx_v_table_options.no_block_cache = 0;
  }
  __pyx_L6:;

  /* "rocksdb/_rocksdb.pyx":611
 * 
 *         # If the following options are None use the rocksdb default.
 *         if block_size is not None:             # <<<<<<<<<<<<<<
 *             table_options.block_size = block_size
 * 
 */
  __pyx_t_1 = (__pyx_v_block_size != Py_None);
  __pyx_t_4 = (__pyx_t_1 != 0);
  if (__pyx_t_4) {

    /* "rocksdb/_rocksdb.pyx":612
 *         # If the following options are None use the rocksdb default.
 *         if block_size is not None:
 *             table_options.block_size = block_size             # <<<<<<<<<<<<<<
 * 
 *         if block_size_deviation is not None:
 */
    __pyx_t_5 = __Pyx_PyInt_As_size_t(__pyx_v_block_size); if (unlikely((__pyx_t_5 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 612, __pyx_L1_error)
    __pyx_v_table_options.block_size = __pyx_t_5;

    /* "rocksdb/_rocksdb.pyx":611
 * 
 *         # If the following options are None use the rocksdb default.
 *         if block_size is not None:             # <<<<<<<<<<<<<<
 *             table_options.block_size = block_size
 * 
 */
  }

  /* "rocksdb/_rocksdb.pyx":614
 *             table_options.block_size = block_size
 * 
 *         if block_size_deviation is not None:             # <<<<<<<<<<<<<<
 *             table_options.block_size_deviation = block_size_deviation
 * 
 */
  __pyx_t_4 = (__pyx_v_block_size_deviation != Py_None);
  __pyx_t_1 = (__pyx_t_4 != 0);
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":615
 * 
 *         if block_size_deviation is not None:
 *             table_options.block_size_deviation = block_size_deviation             # <<<<<<<<<<<<<<
 * 
 *         if block_restart_interval is not None:
 */
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_v_block_size_deviation); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 615, __pyx_L1_error)
    __pyx_v_table_options.block_size_deviation = __pyx_t_6;

    /* "rocksdb/_rocksdb.pyx":614
 *             table_options.block_size = block_size
 * 
 *         if block_size_deviation is not None:             # <<<<<<<<<<<<<<
 *             table_options.block_size_deviation = block_size_deviation
 * 
 */
  }

  /* "rocksdb/_rocksdb.pyx":617
 *             table_options.block_size_deviation = block_size_deviation
 * 
 *         if block_restart_interval is not None:             # <<<<<<<<<<<<<<
 *             table_options.block_restart_interval = block_restart_interval
 * 
 */
  __pyx_t_1 = (__pyx_v_block_restart_interval != Py_None);
  __pyx_t_4 = (__pyx_t_1 != 0);
  if (__pyx_t_4) {

    /* "rocksdb/_rocksdb.pyx":618
 * 
 *         if block_restart_interval is not None:
 *             table_options.block_restart_interval = block_restart_interval             # <<<<<<<<<<<<<<
 * 
 *         if whole_key_filtering is not None:
 */
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_v_block_restart_interval); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 618, __pyx_L1_error)
    __pyx_v_table_options.block_restart_interval = __pyx_t_6;

    /* "rocksdb/_rocksdb.pyx":617
 *             table_options.block_size_deviation = block_size_deviation
 * 
 *         if block_restart_interval is not None:             # <<<<<<<<<<<<<<
 *             table_options.block_restart_interval = block_restart_interval
 * 
 */
  }

  /* "rocksdb/_rocksdb.pyx":620
 *             table_options.block_restart_interval = block_restart_interval
 * 
 *         if whole_key_filtering is not None:             # <<<<<<<<<<<<<<
 *             if whole_key_filtering:
 *                 table_options.whole_key_filtering = True
 */
  __pyx_t_4 = (__pyx_v_whole_key_filtering != Py_None);
  __pyx_t_1 = (__pyx_t_4 != 0);
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":621
 * 
 *         if whole_key_filtering is not None:
 *             if whole_key_filtering:             # <<<<<<<<<<<<<<
 *                 table_options.whole_key_filtering = True
 *             else:
 */
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_whole_key_filtering); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 621, __pyx_L1_error)
    if (__pyx_t_1) {

      /* "rocksdb/_rocksdb.pyx":622
 *         if whole_key_filtering is not None:
 *             if whole_key_filtering:
 *                 table_options.whole_key_filtering = True             # <<<<<<<<<<<<<<
 *             else:
 *                 table_options.whole_key_filtering = False
 */
      __pyx_v_table_options.whole_key_filtering = 1;

      /* "rocksdb/_rocksdb.pyx":621
 * 
 *         if whole_key_filtering is not None:
 *             if whole_key_filtering:             # <<<<<<<<<<<<<<
 *                 table_options.whole_key_filtering = True
 *             else:
 */
      goto __pyx_L11;
    }

    /* "rocksdb/_rocksdb.pyx":624
 *                 table_options.whole_key_filtering = True
 *             else:
 *                 table_options.whole_key_filtering = False             # <<<<<<<<<<<<<<
 * 
 *         if block_cache is not None:
 */
    /*else*/ {
      __pyx_v_table_options.whole_key_filtering = 0;
    }
    __pyx_L11:;

    /* "rocksdb/_rocksdb.pyx":620
 *             table_options.block_restart_interval = block_restart_interval
 * 
 *         if whole_key_filtering is not None:             # <<<<<<<<<<<<<<
 *             if whole_key_filtering:
 *                 table_options.whole_key_filtering = True
 */
  }

  /* "rocksdb/_rocksdb.pyx":626
 *                 table_options.whole_key_filtering = False
 * 
 *         if block_cache is not None:             # <<<<<<<<<<<<<<
 *             table_options.block_cache = block_cache.get_cache()
 * 
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_block_cache) != Py_None);
  __pyx_t_4 = (__pyx_t_1 != 0);
  if (__pyx_t_4) {

    /* "rocksdb/_rocksdb.pyx":627
 * 
 *         if block_cache is not None:
 *             table_options.block_cache = block_cache.get_cache()             # <<<<<<<<<<<<<<
 * 
 *         if block_cache_compressed is not None:
 */
    __pyx_v_table_options.block_cache = ((struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyCache *)__pyx_v_block_cache->__pyx_vtab)->get_cache(__pyx_v_block_cache);

    /* "rocksdb/_rocksdb.pyx":626
 *                 table_options.whole_key_filtering = False
 * 
 *         if block_cache is not None:             # <<<<<<<<<<<<<<
 *             table_options.block_cache = block_cache.get_cache()
 * 
 */
  }

  /* "rocksdb/_rocksdb.pyx":629
 *             table_options.block_cache = block_cache.get_cache()
 * 
 *         if block_cache_compressed is not None:             # <<<<<<<<<<<<<<
 *             table_options.block_cache_compressed = block_cache_compressed.get_cache()
 * 
 */
  __pyx_t_4 = (((PyObject *)__pyx_v_block_cache_compressed) != Py_None);
  __pyx_t_1 = (__pyx_t_4 != 0);
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":630
 * 
 *         if block_cache_compressed is not None:
 *             table_options.block_cache_compressed = block_cache_compressed.get_cache()             # <<<<<<<<<<<<<<
 * 
 *         # Set the filter_policy
 */
    __pyx_v_table_options.block_cache_compressed = ((struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyCache *)__pyx_v_block_cache_compressed->__pyx_vtab)->get_cache(__pyx_v_block_cache_compressed);

    /* "rocksdb/_rocksdb.pyx":629
 *             table_options.block_cache = block_cache.get_cache()
 * 
 *         if block_cache_compressed is not None:             # <<<<<<<<<<<<<<
 *             table_options.block_cache_compressed = block_cache_compressed.get_cache()
 * 
 */
  }

  /* "rocksdb/_rocksdb.pyx":633
 * 
 *         # Set the filter_policy
 *         self.py_filter_policy = None             # <<<<<<<<<<<<<<
 *         if filter_policy is not None:
 *             if isinstance(filter_policy, PyFilterPolicy):
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->py_filter_policy);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->py_filter_policy));
  __pyx_v_self->py_filter_policy = ((struct __pyx_obj_7rocksdb_8_rocksdb_PyFilterPolicy *)Py_None);

  /* "rocksdb/_rocksdb.pyx":634
 *         # Set the filter_policy
 *         self.py_filter_policy = None
 *         if filter_policy is not None:             # <<<<<<<<<<<<<<
 *             if isinstance(filter_policy, PyFilterPolicy):
 *                 if (<PyFilterPolicy?>filter_policy).get_policy().get() == NULL:
 */
  __pyx_t_1 = (__pyx_v_filter_policy != Py_None);
  __pyx_t_4 = (__pyx_t_1 != 0);
  if (__pyx_t_4) {

    /* "rocksdb/_rocksdb.pyx":635
 *         self.py_filter_policy = None
 *         if filter_policy is not None:
 *             if isinstance(filter_policy, PyFilterPolicy):             # <<<<<<<<<<<<<<
 *                 if (<PyFilterPolicy?>filter_policy).get_policy().get() == NULL:
 *                     raise Exception("Cannot set filter policy: %s" % filter_policy)
 */
    __pyx_t_4 = __Pyx_TypeCheck(__pyx_v_filter_policy, __pyx_ptype_7rocksdb_8_rocksdb_PyFilterPolicy); 
    __pyx_t_1 = (__pyx_t_4 != 0);
    if (__pyx_t_1) {

      /* "rocksdb/_rocksdb.pyx":636
 *         if filter_policy is not None:
 *             if isinstance(filter_policy, PyFilterPolicy):
 *                 if (<PyFilterPolicy?>filter_policy).get_policy().get() == NULL:             # <<<<<<<<<<<<<<
 *                     raise Exception("Cannot set filter policy: %s" % filter_policy)
 *                 self.py_filter_policy = filter_policy
 */
      if (!(likely(__Pyx_TypeTest(__pyx_v_filter_policy, __pyx_ptype_7rocksdb_8_rocksdb_PyFilterPolicy)))) __PYX_ERR(0, 636, __pyx_L1_error)
      try {
        __pyx_t_7 = ((struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyFilterPolicy *)((struct __pyx_obj_7rocksdb_8_rocksdb_PyFilterPolicy *)__pyx_v_filter_policy)->__pyx_vtab)->get_policy(((struct __pyx_obj_7rocksdb_8_rocksdb_PyFilterPolicy *)__pyx_v_filter_policy)).get();
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 636, __pyx_L1_error)
      }
      __pyx_t_1 = ((__pyx_t_7 == NULL) != 0);
      if (__pyx_t_1) {

        /* "rocksdb/_rocksdb.pyx":637
 *             if isinstance(filter_policy, PyFilterPolicy):
 *                 if (<PyFilterPolicy?>filter_policy).get_policy().get() == NULL:
 *                     raise Exception("Cannot set filter policy: %s" % filter_policy)             # <<<<<<<<<<<<<<
 *                 self.py_filter_policy = filter_policy
 *             else:
 */
        __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_Cannot_set_filter_policy_s, __pyx_v_filter_policy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 637, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 637, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_2);
        PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
        __pyx_t_2 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 637, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_Raise(__pyx_t_2, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __PYX_ERR(0, 637, __pyx_L1_error)

        /* "rocksdb/_rocksdb.pyx":636
 *         if filter_policy is not None:
 *             if isinstance(filter_policy, PyFilterPolicy):
 *                 if (<PyFilterPolicy?>filter_policy).get_policy().get() == NULL:             # <<<<<<<<<<<<<<
 *                     raise Exception("Cannot set filter policy: %s" % filter_policy)
 *                 self.py_filter_policy = filter_policy
 */
      }

      /* "rocksdb/_rocksdb.pyx":638
 *                 if (<PyFilterPolicy?>filter_policy).get_policy().get() == NULL:
 *                     raise Exception("Cannot set filter policy: %s" % filter_policy)
 *                 self.py_filter_policy = filter_policy             # <<<<<<<<<<<<<<
 *             else:
 *                 self.py_filter_policy = PyGenericFilterPolicy(filter_policy)
 */
      if (!(likely(((__pyx_v_filter_policy) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_filter_policy, __pyx_ptype_7rocksdb_8_rocksdb_PyFilterPolicy))))) __PYX_ERR(0, 638, __pyx_L1_error)
      __pyx_t_2 = __pyx_v_filter_policy;
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __Pyx_GOTREF(__pyx_v_self->py_filter_policy);
      __Pyx_DECREF(((PyObject *)__pyx_v_self->py_filter_policy));
      __pyx_v_self->py_filter_policy = ((struct __pyx_obj_7rocksdb_8_rocksdb_PyFilterPolicy *)__pyx_t_2);
      __pyx_t_2 = 0;

      /* "rocksdb/_rocksdb.pyx":635
 *         self.py_filter_policy = None
 *         if filter_policy is not None:
 *             if isinstance(filter_policy, PyFilterPolicy):             # <<<<<<<<<<<<<<
 *                 if (<PyFilterPolicy?>filter_policy).get_policy().get() == NULL:
 *                     raise Exception("Cannot set filter policy: %s" % filter_policy)
 */
      goto __pyx_L15;
    }

    /* "rocksdb/_rocksdb.pyx":640
 *                 self.py_filter_policy = filter_policy
 *             else:
 *                 self.py_filter_policy = PyGenericFilterPolicy(filter_policy)             # <<<<<<<<<<<<<<
 * 
 *             table_options.filter_policy = self.py_filter_policy.get_policy()
 */
    /*else*/ {
      __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 640, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_v_filter_policy);
      __Pyx_GIVEREF(__pyx_v_filter_policy);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_filter_policy);
      __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_PyGenericFilterPolicy), __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 640, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GIVEREF(__pyx_t_3);
      __Pyx_GOTREF(__pyx_v_self->py_filter_policy);
      __Pyx_DECREF(((PyObject *)__pyx_v_self->py_filter_policy));
      __pyx_v_self->py_filter_policy = ((struct __pyx_obj_7rocksdb_8_rocksdb_PyFilterPolicy *)__pyx_t_3);
      __pyx_t_3 = 0;
    }
    __pyx_L15:;

    /* "rocksdb/_rocksdb.pyx":642
 *                 self.py_filter_policy = PyGenericFilterPolicy(filter_policy)
 * 
 *             table_options.filter_policy = self.py_filter_policy.get_policy()             # <<<<<<<<<<<<<<
 * 
 *         self.factory.reset(table_factory.NewBlockBasedTableFactory(table_options))
 */
    __pyx_v_table_options.filter_policy = ((struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyFilterPolicy *)__pyx_v_self->py_filter_policy->__pyx_vtab)->get_policy(__pyx_v_self->py_filter_policy);

    /* "rocksdb/_rocksdb.pyx":634
 *         # Set the filter_policy
 *         self.py_filter_policy = None
 *         if filter_policy is not None:             # <<<<<<<<<<<<<<
 *             if isinstance(filter_policy, PyFilterPolicy):
 *                 if (<PyFilterPolicy?>filter_policy).get_policy().get() == NULL:
 */
  }

  /* "rocksdb/_rocksdb.pyx":644
 *             table_options.filter_policy = self.py_filter_policy.get_policy()
 * 
 *         self.factory.reset(table_factory.NewBlockBasedTableFactory(table_options))             # <<<<<<<<<<<<<<
 * 
 *     cdef set_info_log(self, shared_ptr[logger.Logger] info_log):
 */
  try {
    __pyx_v_self->__pyx_base.factory.reset(rocksdb::NewBlockBasedTableFactory(__pyx_v_table_options));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 644, __pyx_L1_error)
  }

  /* "rocksdb/_rocksdb.pyx":571
 *     cdef PyFilterPolicy py_filter_policy
 * 
 *     def __init__(self,             # <<<<<<<<<<<<<<
 *             index_type='binary_search',
 *             py_bool hash_index_allow_collision=True,
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("rocksdb._rocksdb.BlockBasedTableFactory.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":646
 *         self.factory.reset(table_factory.NewBlockBasedTableFactory(table_options))
 * 
 *     cdef set_info_log(self, shared_ptr[logger.Logger] info_log):             # <<<<<<<<<<<<<<
 *         if self.py_filter_policy is not None:
 *             self.py_filter_policy.set_info_log(info_log)
 */

static PyObject *__pyx_f_7rocksdb_8_rocksdb_22BlockBasedTableFactory_set_info_log(struct __pyx_obj_7rocksdb_8_rocksdb_BlockBasedTableFactory *__pyx_v_self, std::shared_ptr<rocksdb::Logger>  __pyx_v_info_log) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("set_info_log", 0);

  /* "rocksdb/_rocksdb.pyx":647
 * 
 *     cdef set_info_log(self, shared_ptr[logger.Logger] info_log):
 *         if self.py_filter_policy is not None:             # <<<<<<<<<<<<<<
 *             self.py_filter_policy.set_info_log(info_log)
 * 
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_self->py_filter_policy) != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "rocksdb/_rocksdb.pyx":648
 *     cdef set_info_log(self, shared_ptr[logger.Logger] info_log):
 *         if self.py_filter_policy is not None:
 *             self.py_filter_policy.set_info_log(info_log)             # <<<<<<<<<<<<<<
 * 
 * cdef class PlainTableFactory(PyTableFactory):
 */
    __pyx_t_3 = ((struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyFilterPolicy *)__pyx_v_self->py_filter_policy->__pyx_vtab)->set_info_log(__pyx_v_self->py_filter_policy, __pyx_v_info_log); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 648, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "rocksdb/_rocksdb.pyx":647
 * 
 *     cdef set_info_log(self, shared_ptr[logger.Logger] info_log):
 *         if self.py_filter_policy is not None:             # <<<<<<<<<<<<<<
 *             self.py_filter_policy.set_info_log(info_log)
 * 
 */
  }

  /* "rocksdb/_rocksdb.pyx":646
 *         self.factory.reset(table_factory.NewBlockBasedTableFactory(table_options))
 * 
 *     cdef set_info_log(self, shared_ptr[logger.Logger] info_log):             # <<<<<<<<<<<<<<
 *         if self.py_filter_policy is not None:
 *             self.py_filter_policy.set_info_log(info_log)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("rocksdb._rocksdb.BlockBasedTableFactory.set_info_log", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":651
 * 
 * cdef class PlainTableFactory(PyTableFactory):
 *     def __init__(             # <<<<<<<<<<<<<<
 *             self,
 *             user_key_len=0,
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_17PlainTableFactory_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_17PlainTableFactory_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_user_key_len = 0;
  PyObject *__pyx_v_bloom_bits_per_key = 0;
  PyObject *__pyx_v_hash_table_ratio = 0;
  PyObject *__pyx_v_index_sparseness = 0;
  PyObject *__pyx_v_huge_page_tlb_size = 0;
  PyObject *__pyx_v_encoding_type = 0;
  PyBoolObject *__pyx_v_full_scan_mode = 0;
  PyBoolObject *__pyx_v_store_index_in_file = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_user_key_len,&__pyx_n_s_bloom_bits_per_key,&__pyx_n_s_hash_table_ratio,&__pyx_n_s_index_sparseness,&__pyx_n_s_huge_page_tlb_size,&__pyx_n_s_encoding_type,&__pyx_n_s_full_scan_mode,&__pyx_n_s_store_index_in_file,0};
    PyObject* values[8] = {0,0,0,0,0,0,0,0};
    values[0] = ((PyObject *)__pyx_int_0);
    values[1] = ((PyObject *)__pyx_int_10);
    values[2] = ((PyObject *)__pyx_float_0_75);
    values[3] = ((PyObject *)__pyx_int_10);
    values[4] = ((PyObject *)__pyx_int_0);
    values[5] = ((PyObject *)__pyx_n_s_plain);

    /* "rocksdb/_rocksdb.pyx":659
 *             huge_page_tlb_size=0,
 *             encoding_type='plain',
 *             py_bool full_scan_mode=False,             # <<<<<<<<<<<<<<
 *             py_bool store_index_in_file=False):
 * 
 */
    values[6] = (PyObject *)((PyBoolObject *)Py_False);

    /* "rocksdb/_rocksdb.pyx":660
 *             encoding_type='plain',
 *             py_bool full_scan_mode=False,
 *             py_bool store_index_in_file=False):             # <<<<<<<<<<<<<<
 * 
 *         cdef table_factory.PlainTableOptions table_options
 */
    values[7] = (PyObject *)((PyBoolObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_user_key_len);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bloom_bits_per_key);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_hash_table_ratio);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_index_sparseness);
          if (value) { values[3] = value; kw_args--; }
        }
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_huge_page_tlb_size);
          if (value) { values[4] = value; kw_args--; }
        }
        case  5:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_encoding_type);
          if (value) { values[5] = value; kw_args--; }
        }
        case  6:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_full_scan_mode);
          if (value) { values[6] = value; kw_args--; }
        }
        case  7:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_store_index_in_file);
          if (value) { values[7] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 651, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_user_key_len = values[0];
    __pyx_v_bloom_bits_per_key = values[1];
    __pyx_v_hash_table_ratio = values[2];
    __pyx_v_index_sparseness = values[3];
    __pyx_v_huge_page_tlb_size = values[4];
    __pyx_v_encoding_type = values[5];
    __pyx_v_full_scan_mode = ((PyBoolObject *)values[6]);
    __pyx_v_store_index_in_file = ((PyBoolObject *)values[7]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 8, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 651, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.PlainTableFactory.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_full_scan_mode), __pyx_ptype_7cpython_4bool_bool, 1, "full_scan_mode", 0))) __PYX_ERR(0, 659, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_store_index_in_file), __pyx_ptype_7cpython_4bool_bool, 1, "store_index_in_file", 0))) __PYX_ERR(0, 660, __pyx_L1_error)
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_17PlainTableFactory___init__(((struct __pyx_obj_7rocksdb_8_rocksdb_PlainTableFactory *)__pyx_v_self), __pyx_v_user_key_len, __pyx_v_bloom_bits_per_key, __pyx_v_hash_table_ratio, __pyx_v_index_sparseness, __pyx_v_huge_page_tlb_size, __pyx_v_encoding_type, __pyx_v_full_scan_mode, __pyx_v_store_index_in_file);

  /* "rocksdb/_rocksdb.pyx":651
 * 
 * cdef class PlainTableFactory(PyTableFactory):
 *     def __init__(             # <<<<<<<<<<<<<<
 *             self,
 *             user_key_len=0,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_17PlainTableFactory___init__(struct __pyx_obj_7rocksdb_8_rocksdb_PlainTableFactory *__pyx_v_self, PyObject *__pyx_v_user_key_len, PyObject *__pyx_v_bloom_bits_per_key, PyObject *__pyx_v_hash_table_ratio, PyObject *__pyx_v_index_sparseness, PyObject *__pyx_v_huge_page_tlb_size, PyObject *__pyx_v_encoding_type, PyBoolObject *__pyx_v_full_scan_mode, PyBoolObject *__pyx_v_store_index_in_file) {
  rocksdb::PlainTableOptions __pyx_v_table_options;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  uint32_t __pyx_t_1;
  int __pyx_t_2;
  double __pyx_t_3;
  size_t __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  bool __pyx_t_8;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "rocksdb/_rocksdb.pyx":664
 *         cdef table_factory.PlainTableOptions table_options
 * 
 *         table_options.user_key_len = user_key_len             # <<<<<<<<<<<<<<
 *         table_options.bloom_bits_per_key = bloom_bits_per_key
 *         table_options.hash_table_ratio = hash_table_ratio
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint32_t(__pyx_v_user_key_len); if (unlikely((__pyx_t_1 == ((uint32_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 664, __pyx_L1_error)
  __pyx_v_table_options.user_key_len = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":665
 * 
 *         table_options.user_key_len = user_key_len
 *         table_options.bloom_bits_per_key = bloom_bits_per_key             # <<<<<<<<<<<<<<
 *         table_options.hash_table_ratio = hash_table_ratio
 *         table_options.index_sparseness = index_sparseness
 */
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_v_bloom_bits_per_key); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 665, __pyx_L1_error)
  __pyx_v_table_options.bloom_bits_per_key = __pyx_t_2;

  /* "rocksdb/_rocksdb.pyx":666
 *         table_options.user_key_len = user_key_len
 *         table_options.bloom_bits_per_key = bloom_bits_per_key
 *         table_options.hash_table_ratio = hash_table_ratio             # <<<<<<<<<<<<<<
 *         table_options.index_sparseness = index_sparseness
 *         table_options.huge_page_tlb_size = huge_page_tlb_size
 */
  __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_v_hash_table_ratio); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 666, __pyx_L1_error)
  __pyx_v_table_options.hash_table_ratio = __pyx_t_3;

  /* "rocksdb/_rocksdb.pyx":667
 *         table_options.bloom_bits_per_key = bloom_bits_per_key
 *         table_options.hash_table_ratio = hash_table_ratio
 *         table_options.index_sparseness = index_sparseness             # <<<<<<<<<<<<<<
 *         table_options.huge_page_tlb_size = huge_page_tlb_size
 * 
 */
  __pyx_t_4 = __Pyx_PyInt_As_size_t(__pyx_v_index_sparseness); if (unlikely((__pyx_t_4 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 667, __pyx_L1_error)
  __pyx_v_table_options.index_sparseness = __pyx_t_4;

  /* "rocksdb/_rocksdb.pyx":668
 *         table_options.hash_table_ratio = hash_table_ratio
 *         table_options.index_sparseness = index_sparseness
 *         table_options.huge_page_tlb_size = huge_page_tlb_size             # <<<<<<<<<<<<<<
 * 
 *         if encoding_type == 'plain':
 */
  __pyx_t_4 = __Pyx_PyInt_As_size_t(__pyx_v_huge_page_tlb_size); if (unlikely((__pyx_t_4 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 668, __pyx_L1_error)
  __pyx_v_table_options.huge_page_tlb_size = __pyx_t_4;

  /* "rocksdb/_rocksdb.pyx":670
 *         table_options.huge_page_tlb_size = huge_page_tlb_size
 * 
 *         if encoding_type == 'plain':             # <<<<<<<<<<<<<<
 *             table_options.encoding_type = table_factory.kPlain
 *         elif encoding_type == 'prefix':
 */
  __pyx_t_5 = (__Pyx_PyString_Equals(__pyx_v_encoding_type, __pyx_n_s_plain, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 670, __pyx_L1_error)
  if (__pyx_t_5) {

    /* "rocksdb/_rocksdb.pyx":671
 * 
 *         if encoding_type == 'plain':
 *             table_options.encoding_type = table_factory.kPlain             # <<<<<<<<<<<<<<
 *         elif encoding_type == 'prefix':
 *             table_options.encoding_type = table_factory.kPrefix
 */
    __pyx_v_table_options.encoding_type = rocksdb::kPlain;

    /* "rocksdb/_rocksdb.pyx":670
 *         table_options.huge_page_tlb_size = huge_page_tlb_size
 * 
 *         if encoding_type == 'plain':             # <<<<<<<<<<<<<<
 *             table_options.encoding_type = table_factory.kPlain
 *         elif encoding_type == 'prefix':
 */
    goto __pyx_L3;
  }

  /* "rocksdb/_rocksdb.pyx":672
 *         if encoding_type == 'plain':
 *             table_options.encoding_type = table_factory.kPlain
 *         elif encoding_type == 'prefix':             # <<<<<<<<<<<<<<
 *             table_options.encoding_type = table_factory.kPrefix
 *         else:
 */
  __pyx_t_5 = (__Pyx_PyString_Equals(__pyx_v_encoding_type, __pyx_n_s_prefix, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 672, __pyx_L1_error)
  if (__pyx_t_5) {

    /* "rocksdb/_rocksdb.pyx":673
 *             table_options.encoding_type = table_factory.kPlain
 *         elif encoding_type == 'prefix':
 *             table_options.encoding_type = table_factory.kPrefix             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError("Unknown encoding_type: %s" % encoding_type)
 */
    __pyx_v_table_options.encoding_type = rocksdb::kPrefix;

    /* "rocksdb/_rocksdb.pyx":672
 *         if encoding_type == 'plain':
 *             table_options.encoding_type = table_factory.kPlain
 *         elif encoding_type == 'prefix':             # <<<<<<<<<<<<<<
 *             table_options.encoding_type = table_factory.kPrefix
 *         else:
 */
    goto __pyx_L3;
  }

  /* "rocksdb/_rocksdb.pyx":675
 *             table_options.encoding_type = table_factory.kPrefix
 *         else:
 *             raise ValueError("Unknown encoding_type: %s" % encoding_type)             # <<<<<<<<<<<<<<
 * 
 *         table_options.full_scan_mode = full_scan_mode
 */
  /*else*/ {
    __pyx_t_6 = __Pyx_PyString_Format(__pyx_kp_s_Unknown_encoding_type_s, __pyx_v_encoding_type); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 675, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 675, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_7, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 675, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __PYX_ERR(0, 675, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "rocksdb/_rocksdb.pyx":677
 *             raise ValueError("Unknown encoding_type: %s" % encoding_type)
 * 
 *         table_options.full_scan_mode = full_scan_mode             # <<<<<<<<<<<<<<
 *         table_options.store_index_in_file = store_index_in_file
 * 
 */
  __pyx_t_8 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_full_scan_mode)); if (unlikely((__pyx_t_8 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 677, __pyx_L1_error)
  __pyx_v_table_options.full_scan_mode = __pyx_t_8;

  /* "rocksdb/_rocksdb.pyx":678
 * 
 *         table_options.full_scan_mode = full_scan_mode
 *         table_options.store_index_in_file = store_index_in_file             # <<<<<<<<<<<<<<
 * 
 *         self.factory.reset( table_factory.NewPlainTableFactory(table_options))
 */
  __pyx_t_8 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_store_index_in_file)); if (unlikely((__pyx_t_8 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 678, __pyx_L1_error)
  __pyx_v_table_options.store_index_in_file = __pyx_t_8;

  /* "rocksdb/_rocksdb.pyx":680
 *         table_options.store_index_in_file = store_index_in_file
 * 
 *         self.factory.reset( table_factory.NewPlainTableFactory(table_options))             # <<<<<<<<<<<<<<
 * #############################################
 * 
 */
  try {
    __pyx_v_self->__pyx_base.factory.reset(rocksdb::NewPlainTableFactory(__pyx_v_table_options));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 680, __pyx_L1_error)
  }

  /* "rocksdb/_rocksdb.pyx":651
 * 
 * cdef class PlainTableFactory(PyTableFactory):
 *     def __init__(             # <<<<<<<<<<<<<<
 *             self,
 *             user_key_len=0,
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("rocksdb._rocksdb.PlainTableFactory.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":688
 *     cdef shared_ptr[memtablerep.MemTableRepFactory] factory
 * 
 *     cdef shared_ptr[memtablerep.MemTableRepFactory] get_memtable_factory(self):             # <<<<<<<<<<<<<<
 *         return self.factory
 * 
 */

static std::shared_ptr<rocksdb::MemTableRepFactory>  __pyx_f_7rocksdb_8_rocksdb_17PyMemtableFactory_get_memtable_factory(struct __pyx_obj_7rocksdb_8_rocksdb_PyMemtableFactory *__pyx_v_self) {
  std::shared_ptr<rocksdb::MemTableRepFactory>  __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_memtable_factory", 0);

  /* "rocksdb/_rocksdb.pyx":689
 * 
 *     cdef shared_ptr[memtablerep.MemTableRepFactory] get_memtable_factory(self):
 *         return self.factory             # <<<<<<<<<<<<<<
 * 
 * cdef class SkipListMemtableFactory(PyMemtableFactory):
 */
  __pyx_r = __pyx_v_self->factory;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":688
 *     cdef shared_ptr[memtablerep.MemTableRepFactory] factory
 * 
 *     cdef shared_ptr[memtablerep.MemTableRepFactory] get_memtable_factory(self):             # <<<<<<<<<<<<<<
 *         return self.factory
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":692
 * 
 * cdef class SkipListMemtableFactory(PyMemtableFactory):
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.factory.reset(memtablerep.NewSkipListFactory())
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_23SkipListMemtableFactory_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_23SkipListMemtableFactory_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_23SkipListMemtableFactory___init__(((struct __pyx_obj_7rocksdb_8_rocksdb_SkipListMemtableFactory *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_23SkipListMemtableFactory___init__(struct __pyx_obj_7rocksdb_8_rocksdb_SkipListMemtableFactory *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "rocksdb/_rocksdb.pyx":693
 * cdef class SkipListMemtableFactory(PyMemtableFactory):
 *     def __init__(self):
 *         self.factory.reset(memtablerep.NewSkipListFactory())             # <<<<<<<<<<<<<<
 * 
 * cdef class VectorMemtableFactory(PyMemtableFactory):
 */
  try {
    __pyx_v_self->__pyx_base.factory.reset(py_rocks::NewSkipListFactory());
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 693, __pyx_L1_error)
  }

  /* "rocksdb/_rocksdb.pyx":692
 * 
 * cdef class SkipListMemtableFactory(PyMemtableFactory):
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.factory.reset(memtablerep.NewSkipListFactory())
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.SkipListMemtableFactory.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":696
 * 
 * cdef class VectorMemtableFactory(PyMemtableFactory):
 *     def __init__(self, count=0):             # <<<<<<<<<<<<<<
 *         self.factory.reset(memtablerep.NewVectorRepFactory(count))
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_21VectorMemtableFactory_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_21VectorMemtableFactory_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_count = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_count,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)__pyx_int_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_count);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 696, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_count = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 696, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.VectorMemtableFactory.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_21VectorMemtableFactory___init__(((struct __pyx_obj_7rocksdb_8_rocksdb_VectorMemtableFactory *)__pyx_v_self), __pyx_v_count);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_21VectorMemtableFactory___init__(struct __pyx_obj_7rocksdb_8_rocksdb_VectorMemtableFactory *__pyx_v_self, PyObject *__pyx_v_count) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "rocksdb/_rocksdb.pyx":697
 * cdef class VectorMemtableFactory(PyMemtableFactory):
 *     def __init__(self, count=0):
 *         self.factory.reset(memtablerep.NewVectorRepFactory(count))             # <<<<<<<<<<<<<<
 * 
 * cdef class HashSkipListMemtableFactory(PyMemtableFactory):
 */
  __pyx_t_1 = __Pyx_PyInt_As_size_t(__pyx_v_count); if (unlikely((__pyx_t_1 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 697, __pyx_L1_error)
  try {
    __pyx_v_self->__pyx_base.factory.reset(py_rocks::NewVectorRepFactory(__pyx_t_1));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 697, __pyx_L1_error)
  }

  /* "rocksdb/_rocksdb.pyx":696
 * 
 * cdef class VectorMemtableFactory(PyMemtableFactory):
 *     def __init__(self, count=0):             # <<<<<<<<<<<<<<
 *         self.factory.reset(memtablerep.NewVectorRepFactory(count))
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.VectorMemtableFactory.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":700
 * 
 * cdef class HashSkipListMemtableFactory(PyMemtableFactory):
 *     def __init__(             # <<<<<<<<<<<<<<
 *             self,
 *             bucket_count=1000000,
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_27HashSkipListMemtableFactory_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_27HashSkipListMemtableFactory_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_bucket_count = 0;
  PyObject *__pyx_v_skiplist_height = 0;
  PyObject *__pyx_v_skiplist_branching_factor = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_bucket_count,&__pyx_n_s_skiplist_height,&__pyx_n_s_skiplist_branching_factor,0};
    PyObject* values[3] = {0,0,0};
    values[0] = ((PyObject *)__pyx_int_1000000);
    values[1] = ((PyObject *)__pyx_int_4);
    values[2] = ((PyObject *)__pyx_int_4);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bucket_count);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_skiplist_height);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_skiplist_branching_factor);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 700, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_bucket_count = values[0];
    __pyx_v_skiplist_height = values[1];
    __pyx_v_skiplist_branching_factor = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 700, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.HashSkipListMemtableFactory.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_27HashSkipListMemtableFactory___init__(((struct __pyx_obj_7rocksdb_8_rocksdb_HashSkipListMemtableFactory *)__pyx_v_self), __pyx_v_bucket_count, __pyx_v_skiplist_height, __pyx_v_skiplist_branching_factor);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_27HashSkipListMemtableFactory___init__(struct __pyx_obj_7rocksdb_8_rocksdb_HashSkipListMemtableFactory *__pyx_v_self, PyObject *__pyx_v_bucket_count, PyObject *__pyx_v_skiplist_height, PyObject *__pyx_v_skiplist_branching_factor) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  int32_t __pyx_t_2;
  int32_t __pyx_t_3;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "rocksdb/_rocksdb.pyx":708
 *         self.factory.reset(
 *             memtablerep.NewHashSkipListRepFactory(
 *                 bucket_count,             # <<<<<<<<<<<<<<
 *                 skiplist_height,
 *                 skiplist_branching_factor))
 */
  __pyx_t_1 = __Pyx_PyInt_As_size_t(__pyx_v_bucket_count); if (unlikely((__pyx_t_1 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 708, __pyx_L1_error)

  /* "rocksdb/_rocksdb.pyx":709
 *             memtablerep.NewHashSkipListRepFactory(
 *                 bucket_count,
 *                 skiplist_height,             # <<<<<<<<<<<<<<
 *                 skiplist_branching_factor))
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_As_int32_t(__pyx_v_skiplist_height); if (unlikely((__pyx_t_2 == ((int32_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 709, __pyx_L1_error)

  /* "rocksdb/_rocksdb.pyx":710
 *                 bucket_count,
 *                 skiplist_height,
 *                 skiplist_branching_factor))             # <<<<<<<<<<<<<<
 * 
 * cdef class HashLinkListMemtableFactory(PyMemtableFactory):
 */
  __pyx_t_3 = __Pyx_PyInt_As_int32_t(__pyx_v_skiplist_branching_factor); if (unlikely((__pyx_t_3 == ((int32_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 710, __pyx_L1_error)

  /* "rocksdb/_rocksdb.pyx":706
 *             skiplist_branching_factor=4):
 * 
 *         self.factory.reset(             # <<<<<<<<<<<<<<
 *             memtablerep.NewHashSkipListRepFactory(
 *                 bucket_count,
 */
  try {
    __pyx_v_self->__pyx_base.factory.reset(rocksdb::NewHashSkipListRepFactory(__pyx_t_1, __pyx_t_2, __pyx_t_3));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 706, __pyx_L1_error)
  }

  /* "rocksdb/_rocksdb.pyx":700
 * 
 * cdef class HashSkipListMemtableFactory(PyMemtableFactory):
 *     def __init__(             # <<<<<<<<<<<<<<
 *             self,
 *             bucket_count=1000000,
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.HashSkipListMemtableFactory.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":713
 * 
 * cdef class HashLinkListMemtableFactory(PyMemtableFactory):
 *     def __init__(self, bucket_count=50000):             # <<<<<<<<<<<<<<
 *         self.factory.reset(memtablerep.NewHashLinkListRepFactory(bucket_count))
 * ##################################
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_27HashLinkListMemtableFactory_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_27HashLinkListMemtableFactory_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_bucket_count = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_bucket_count,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)__pyx_int_50000);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bucket_count);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 713, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_bucket_count = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 713, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.HashLinkListMemtableFactory.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_27HashLinkListMemtableFactory___init__(((struct __pyx_obj_7rocksdb_8_rocksdb_HashLinkListMemtableFactory *)__pyx_v_self), __pyx_v_bucket_count);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_27HashLinkListMemtableFactory___init__(struct __pyx_obj_7rocksdb_8_rocksdb_HashLinkListMemtableFactory *__pyx_v_self, PyObject *__pyx_v_bucket_count) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "rocksdb/_rocksdb.pyx":714
 * cdef class HashLinkListMemtableFactory(PyMemtableFactory):
 *     def __init__(self, bucket_count=50000):
 *         self.factory.reset(memtablerep.NewHashLinkListRepFactory(bucket_count))             # <<<<<<<<<<<<<<
 * ##################################
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_As_size_t(__pyx_v_bucket_count); if (unlikely((__pyx_t_1 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 714, __pyx_L1_error)
  try {
    __pyx_v_self->__pyx_base.factory.reset(rocksdb::NewHashLinkListRepFactory(__pyx_t_1));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 714, __pyx_L1_error)
  }

  /* "rocksdb/_rocksdb.pyx":713
 * 
 * cdef class HashLinkListMemtableFactory(PyMemtableFactory):
 *     def __init__(self, bucket_count=50000):             # <<<<<<<<<<<<<<
 *         self.factory.reset(memtablerep.NewHashLinkListRepFactory(bucket_count))
 * ##################################
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.HashLinkListMemtableFactory.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":748
 *     cdef cpp_bool in_use
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.opts = NULL
 *         self.opts = new options.Options()
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options___cinit__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options___cinit__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  rocksdb::Options *__pyx_t_1;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "rocksdb/_rocksdb.pyx":749
 * 
 *     def __cinit__(self):
 *         self.opts = NULL             # <<<<<<<<<<<<<<
 *         self.opts = new options.Options()
 *         self.in_use = False
 */
  __pyx_v_self->opts = NULL;

  /* "rocksdb/_rocksdb.pyx":750
 *     def __cinit__(self):
 *         self.opts = NULL
 *         self.opts = new options.Options()             # <<<<<<<<<<<<<<
 *         self.in_use = False
 * 
 */
  try {
    __pyx_t_1 = new rocksdb::Options();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 750, __pyx_L1_error)
  }
  __pyx_v_self->opts = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":751
 *         self.opts = NULL
 *         self.opts = new options.Options()
 *         self.in_use = False             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->in_use = 0;

  /* "rocksdb/_rocksdb.pyx":748
 *     cdef cpp_bool in_use
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.opts = NULL
 *         self.opts = new options.Options()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":753
 *         self.in_use = False
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if not self.opts == NULL:
 *             del self.opts
 */

/* Python wrapper */
static void __pyx_pw_7rocksdb_8_rocksdb_7Options_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_7rocksdb_8_rocksdb_7Options_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_7rocksdb_8_rocksdb_7Options_2__dealloc__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_7rocksdb_8_rocksdb_7Options_2__dealloc__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "rocksdb/_rocksdb.pyx":754
 * 
 *     def __dealloc__(self):
 *         if not self.opts == NULL:             # <<<<<<<<<<<<<<
 *             del self.opts
 * 
 */
  __pyx_t_1 = ((!((__pyx_v_self->opts == NULL) != 0)) != 0);
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":755
 *     def __dealloc__(self):
 *         if not self.opts == NULL:
 *             del self.opts             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, **kwargs):
 */
    delete __pyx_v_self->opts;

    /* "rocksdb/_rocksdb.pyx":754
 * 
 *     def __dealloc__(self):
 *         if not self.opts == NULL:             # <<<<<<<<<<<<<<
 *             del self.opts
 * 
 */
  }

  /* "rocksdb/_rocksdb.pyx":753
 *         self.in_use = False
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if not self.opts == NULL:
 *             del self.opts
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "rocksdb/_rocksdb.pyx":757
 *             del self.opts
 * 
 *     def __init__(self, **kwargs):             # <<<<<<<<<<<<<<
 *         self.py_comparator = BytewiseComparator()
 *         self.py_merge_operator = None
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_5__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_5__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (__pyx_kwds && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  __pyx_v_kwargs = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_4__init__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_4__init__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_kwargs) {
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_value = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_t_9;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "rocksdb/_rocksdb.pyx":758
 * 
 *     def __init__(self, **kwargs):
 *         self.py_comparator = BytewiseComparator()             # <<<<<<<<<<<<<<
 *         self.py_merge_operator = None
 *         self.py_prefix_extractor = None
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_BytewiseComparator); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 758, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 758, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 758, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_7rocksdb_8_rocksdb_PyComparator))))) __PYX_ERR(0, 758, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->py_comparator);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->py_comparator));
  __pyx_v_self->py_comparator = ((struct __pyx_obj_7rocksdb_8_rocksdb_PyComparator *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":759
 *     def __init__(self, **kwargs):
 *         self.py_comparator = BytewiseComparator()
 *         self.py_merge_operator = None             # <<<<<<<<<<<<<<
 *         self.py_prefix_extractor = None
 *         self.py_table_factory = None
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->py_merge_operator);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->py_merge_operator));
  __pyx_v_self->py_merge_operator = ((struct __pyx_obj_7rocksdb_8_rocksdb_PyMergeOperator *)Py_None);

  /* "rocksdb/_rocksdb.pyx":760
 *         self.py_comparator = BytewiseComparator()
 *         self.py_merge_operator = None
 *         self.py_prefix_extractor = None             # <<<<<<<<<<<<<<
 *         self.py_table_factory = None
 *         self.py_memtable_factory = None
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->py_prefix_extractor);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->py_prefix_extractor));
  __pyx_v_self->py_prefix_extractor = ((struct __pyx_obj_7rocksdb_8_rocksdb_PySliceTransform *)Py_None);

  /* "rocksdb/_rocksdb.pyx":761
 *         self.py_merge_operator = None
 *         self.py_prefix_extractor = None
 *         self.py_table_factory = None             # <<<<<<<<<<<<<<
 *         self.py_memtable_factory = None
 *         self.py_row_cache = None
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->py_table_factory);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->py_table_factory));
  __pyx_v_self->py_table_factory = ((struct __pyx_obj_7rocksdb_8_rocksdb_PyTableFactory *)Py_None);

  /* "rocksdb/_rocksdb.pyx":762
 *         self.py_prefix_extractor = None
 *         self.py_table_factory = None
 *         self.py_memtable_factory = None             # <<<<<<<<<<<<<<
 *         self.py_row_cache = None
 * 
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->py_memtable_factory);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->py_memtable_factory));
  __pyx_v_self->py_memtable_factory = ((struct __pyx_obj_7rocksdb_8_rocksdb_PyMemtableFactory *)Py_None);

  /* "rocksdb/_rocksdb.pyx":763
 *         self.py_table_factory = None
 *         self.py_memtable_factory = None
 *         self.py_row_cache = None             # <<<<<<<<<<<<<<
 * 
 *         for key, value in kwargs.items():
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->py_row_cache);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->py_row_cache));
  __pyx_v_self->py_row_cache = ((struct __pyx_obj_7rocksdb_8_rocksdb_PyCache *)Py_None);

  /* "rocksdb/_rocksdb.pyx":765
 *         self.py_row_cache = None
 * 
 *         for key, value in kwargs.items():             # <<<<<<<<<<<<<<
 *             setattr(self, key, value)
 * 
 */
  __pyx_t_1 = __Pyx_PyDict_Items(__pyx_v_kwargs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 765, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 765, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 765, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 765, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 765, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 765, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 765, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_5(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 765, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
      PyObject* sequence = __pyx_t_1;
      #if !CYTHON_COMPILING_IN_PYPY
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 765, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_6);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 765, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 765, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_7 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 765, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
      index = 0; __pyx_t_3 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_3)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_3);
      index = 1; __pyx_t_6 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) __PYX_ERR(0, 765, __pyx_L1_error)
      __pyx_t_8 = NULL;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 765, __pyx_L1_error)
      __pyx_L6_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_3);
    __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "rocksdb/_rocksdb.pyx":766
 * 
 *         for key, value in kwargs.items():
 *             setattr(self, key, value)             # <<<<<<<<<<<<<<
 * 
 *     property create_if_missing:
 */
    __pyx_t_9 = PyObject_SetAttr(((PyObject *)__pyx_v_self), __pyx_v_key, __pyx_v_value); if (unlikely(__pyx_t_9 == -1)) __PYX_ERR(0, 766, __pyx_L1_error)

    /* "rocksdb/_rocksdb.pyx":765
 *         self.py_row_cache = None
 * 
 *         for key, value in kwargs.items():             # <<<<<<<<<<<<<<
 *             setattr(self, key, value)
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "rocksdb/_rocksdb.pyx":757
 *             del self.opts
 * 
 *     def __init__(self, **kwargs):             # <<<<<<<<<<<<<<
 *         self.py_comparator = BytewiseComparator()
 *         self.py_merge_operator = None
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":769
 * 
 *     property create_if_missing:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.create_if_missing
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_17create_if_missing_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_17create_if_missing_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_17create_if_missing___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_17create_if_missing___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":770
 *     property create_if_missing:
 *         def __get__(self):
 *             return self.opts.create_if_missing             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.create_if_missing = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->opts->create_if_missing); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 770, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":769
 * 
 *     property create_if_missing:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.create_if_missing
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.create_if_missing.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":771
 *         def __get__(self):
 *             return self.opts.create_if_missing
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.create_if_missing = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_17create_if_missing_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_17create_if_missing_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_17create_if_missing_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_17create_if_missing_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":772
 *             return self.opts.create_if_missing
 *         def __set__(self, value):
 *             self.opts.create_if_missing = value             # <<<<<<<<<<<<<<
 * 
 *     property error_if_exists:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 772, __pyx_L1_error)
  __pyx_v_self->opts->create_if_missing = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":771
 *         def __get__(self):
 *             return self.opts.create_if_missing
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.create_if_missing = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.create_if_missing.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":775
 * 
 *     property error_if_exists:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.error_if_exists
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_15error_if_exists_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_15error_if_exists_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_15error_if_exists___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_15error_if_exists___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":776
 *     property error_if_exists:
 *         def __get__(self):
 *             return self.opts.error_if_exists             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.error_if_exists = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->opts->error_if_exists); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 776, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":775
 * 
 *     property error_if_exists:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.error_if_exists
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.error_if_exists.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":777
 *         def __get__(self):
 *             return self.opts.error_if_exists
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.error_if_exists = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_15error_if_exists_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_15error_if_exists_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_15error_if_exists_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_15error_if_exists_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":778
 *             return self.opts.error_if_exists
 *         def __set__(self, value):
 *             self.opts.error_if_exists = value             # <<<<<<<<<<<<<<
 * 
 *     property paranoid_checks:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 778, __pyx_L1_error)
  __pyx_v_self->opts->error_if_exists = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":777
 *         def __get__(self):
 *             return self.opts.error_if_exists
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.error_if_exists = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.error_if_exists.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":781
 * 
 *     property paranoid_checks:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.paranoid_checks
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_15paranoid_checks_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_15paranoid_checks_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_15paranoid_checks___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_15paranoid_checks___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":782
 *     property paranoid_checks:
 *         def __get__(self):
 *             return self.opts.paranoid_checks             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.paranoid_checks = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->opts->paranoid_checks); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 782, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":781
 * 
 *     property paranoid_checks:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.paranoid_checks
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.paranoid_checks.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":783
 *         def __get__(self):
 *             return self.opts.paranoid_checks
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.paranoid_checks = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_15paranoid_checks_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_15paranoid_checks_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_15paranoid_checks_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_15paranoid_checks_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":784
 *             return self.opts.paranoid_checks
 *         def __set__(self, value):
 *             self.opts.paranoid_checks = value             # <<<<<<<<<<<<<<
 * 
 *     property write_buffer_size:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 784, __pyx_L1_error)
  __pyx_v_self->opts->paranoid_checks = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":783
 *         def __get__(self):
 *             return self.opts.paranoid_checks
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.paranoid_checks = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.paranoid_checks.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":787
 * 
 *     property write_buffer_size:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.write_buffer_size
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_17write_buffer_size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_17write_buffer_size_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_17write_buffer_size___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_17write_buffer_size___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":788
 *     property write_buffer_size:
 *         def __get__(self):
 *             return self.opts.write_buffer_size             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.write_buffer_size = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->opts->write_buffer_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 788, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":787
 * 
 *     property write_buffer_size:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.write_buffer_size
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.write_buffer_size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":789
 *         def __get__(self):
 *             return self.opts.write_buffer_size
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.write_buffer_size = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_17write_buffer_size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_17write_buffer_size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_17write_buffer_size_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_17write_buffer_size_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":790
 *             return self.opts.write_buffer_size
 *         def __set__(self, value):
 *             self.opts.write_buffer_size = value             # <<<<<<<<<<<<<<
 * 
 *     property max_write_buffer_number:
 */
  __pyx_t_1 = __Pyx_PyInt_As_size_t(__pyx_v_value); if (unlikely((__pyx_t_1 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 790, __pyx_L1_error)
  __pyx_v_self->opts->write_buffer_size = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":789
 *         def __get__(self):
 *             return self.opts.write_buffer_size
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.write_buffer_size = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.write_buffer_size.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":793
 * 
 *     property max_write_buffer_number:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.max_write_buffer_number
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_23max_write_buffer_number_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_23max_write_buffer_number_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_23max_write_buffer_number___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_23max_write_buffer_number___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":794
 *     property max_write_buffer_number:
 *         def __get__(self):
 *             return self.opts.max_write_buffer_number             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.max_write_buffer_number = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->opts->max_write_buffer_number); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 794, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":793
 * 
 *     property max_write_buffer_number:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.max_write_buffer_number
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.max_write_buffer_number.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":795
 *         def __get__(self):
 *             return self.opts.max_write_buffer_number
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.max_write_buffer_number = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_23max_write_buffer_number_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_23max_write_buffer_number_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_23max_write_buffer_number_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_23max_write_buffer_number_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":796
 *             return self.opts.max_write_buffer_number
 *         def __set__(self, value):
 *             self.opts.max_write_buffer_number = value             # <<<<<<<<<<<<<<
 * 
 *     property max_compaction_bytes:
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 796, __pyx_L1_error)
  __pyx_v_self->opts->max_write_buffer_number = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":795
 *         def __get__(self):
 *             return self.opts.max_write_buffer_number
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.max_write_buffer_number = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.max_write_buffer_number.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":799
 * 
 *     property max_compaction_bytes:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.max_compaction_bytes
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_20max_compaction_bytes_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_20max_compaction_bytes_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_20max_compaction_bytes___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_20max_compaction_bytes___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":800
 *     property max_compaction_bytes:
 *         def __get__(self):
 *             return self.opts.max_compaction_bytes             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.max_compaction_bytes = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_uint64_t(__pyx_v_self->opts->max_compaction_bytes); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 800, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":799
 * 
 *     property max_compaction_bytes:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.max_compaction_bytes
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.max_compaction_bytes.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":801
 *         def __get__(self):
 *             return self.opts.max_compaction_bytes
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.max_compaction_bytes = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_20max_compaction_bytes_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_20max_compaction_bytes_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_20max_compaction_bytes_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_20max_compaction_bytes_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  uint64_t __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":802
 *             return self.opts.max_compaction_bytes
 *         def __set__(self, value):
 *             self.opts.max_compaction_bytes = value             # <<<<<<<<<<<<<<
 * 
 *     property min_write_buffer_number_to_merge:
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_value); if (unlikely((__pyx_t_1 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 802, __pyx_L1_error)
  __pyx_v_self->opts->max_compaction_bytes = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":801
 *         def __get__(self):
 *             return self.opts.max_compaction_bytes
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.max_compaction_bytes = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.max_compaction_bytes.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":805
 * 
 *     property min_write_buffer_number_to_merge:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.min_write_buffer_number_to_merge
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_32min_write_buffer_number_to_merge_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_32min_write_buffer_number_to_merge_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_32min_write_buffer_number_to_merge___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_32min_write_buffer_number_to_merge___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":806
 *     property min_write_buffer_number_to_merge:
 *         def __get__(self):
 *             return self.opts.min_write_buffer_number_to_merge             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.min_write_buffer_number_to_merge = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->opts->min_write_buffer_number_to_merge); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 806, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":805
 * 
 *     property min_write_buffer_number_to_merge:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.min_write_buffer_number_to_merge
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.min_write_buffer_number_to_merge.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":807
 *         def __get__(self):
 *             return self.opts.min_write_buffer_number_to_merge
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.min_write_buffer_number_to_merge = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_32min_write_buffer_number_to_merge_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_32min_write_buffer_number_to_merge_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_32min_write_buffer_number_to_merge_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_32min_write_buffer_number_to_merge_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":808
 *             return self.opts.min_write_buffer_number_to_merge
 *         def __set__(self, value):
 *             self.opts.min_write_buffer_number_to_merge = value             # <<<<<<<<<<<<<<
 * 
 *     property max_open_files:
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 808, __pyx_L1_error)
  __pyx_v_self->opts->min_write_buffer_number_to_merge = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":807
 *         def __get__(self):
 *             return self.opts.min_write_buffer_number_to_merge
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.min_write_buffer_number_to_merge = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.min_write_buffer_number_to_merge.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":811
 * 
 *     property max_open_files:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.max_open_files
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_14max_open_files_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_14max_open_files_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_14max_open_files___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_14max_open_files___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":812
 *     property max_open_files:
 *         def __get__(self):
 *             return self.opts.max_open_files             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.max_open_files = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->opts->max_open_files); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 812, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":811
 * 
 *     property max_open_files:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.max_open_files
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.max_open_files.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":813
 *         def __get__(self):
 *             return self.opts.max_open_files
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.max_open_files = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_14max_open_files_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_14max_open_files_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_14max_open_files_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_14max_open_files_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":814
 *             return self.opts.max_open_files
 *         def __set__(self, value):
 *             self.opts.max_open_files = value             # <<<<<<<<<<<<<<
 * 
 *     property compression_opts:
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 814, __pyx_L1_error)
  __pyx_v_self->opts->max_open_files = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":813
 *         def __get__(self):
 *             return self.opts.max_open_files
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.max_open_files = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.max_open_files.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":817
 * 
 *     property compression_opts:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef dict ret_ob = {}
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_16compression_opts_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_16compression_opts_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_16compression_opts___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_16compression_opts___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_v_ret_ob = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":818
 *     property compression_opts:
 *         def __get__(self):
 *             cdef dict ret_ob = {}             # <<<<<<<<<<<<<<
 * 
 *             ret_ob['window_bits'] = self.opts.compression_opts.window_bits
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 818, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_ret_ob = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":820
 *             cdef dict ret_ob = {}
 * 
 *             ret_ob['window_bits'] = self.opts.compression_opts.window_bits             # <<<<<<<<<<<<<<
 *             ret_ob['level'] = self.opts.compression_opts.level
 *             ret_ob['strategy'] = self.opts.compression_opts.strategy
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->opts->compression_opts.window_bits); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 820, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyDict_SetItem(__pyx_v_ret_ob, __pyx_n_s_window_bits, __pyx_t_1) < 0)) __PYX_ERR(0, 820, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":821
 * 
 *             ret_ob['window_bits'] = self.opts.compression_opts.window_bits
 *             ret_ob['level'] = self.opts.compression_opts.level             # <<<<<<<<<<<<<<
 *             ret_ob['strategy'] = self.opts.compression_opts.strategy
 *             ret_ob['max_dict_bytes'] = self.opts.compression_opts.max_dict_bytes
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->opts->compression_opts.level); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 821, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyDict_SetItem(__pyx_v_ret_ob, __pyx_n_s_level, __pyx_t_1) < 0)) __PYX_ERR(0, 821, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":822
 *             ret_ob['window_bits'] = self.opts.compression_opts.window_bits
 *             ret_ob['level'] = self.opts.compression_opts.level
 *             ret_ob['strategy'] = self.opts.compression_opts.strategy             # <<<<<<<<<<<<<<
 *             ret_ob['max_dict_bytes'] = self.opts.compression_opts.max_dict_bytes
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->opts->compression_opts.strategy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 822, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyDict_SetItem(__pyx_v_ret_ob, __pyx_n_s_strategy, __pyx_t_1) < 0)) __PYX_ERR(0, 822, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":823
 *             ret_ob['level'] = self.opts.compression_opts.level
 *             ret_ob['strategy'] = self.opts.compression_opts.strategy
 *             ret_ob['max_dict_bytes'] = self.opts.compression_opts.max_dict_bytes             # <<<<<<<<<<<<<<
 * 
 *             return ret_ob
 */
  __pyx_t_1 = __Pyx_PyInt_From_uint32_t(__pyx_v_self->opts->compression_opts.max_dict_bytes); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 823, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyDict_SetItem(__pyx_v_ret_ob, __pyx_n_s_max_dict_bytes, __pyx_t_1) < 0)) __PYX_ERR(0, 823, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":825
 *             ret_ob['max_dict_bytes'] = self.opts.compression_opts.max_dict_bytes
 * 
 *             return ret_ob             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, dict value):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ret_ob);
  __pyx_r = __pyx_v_ret_ob;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":817
 * 
 *     property compression_opts:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef dict ret_ob = {}
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.compression_opts.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ret_ob);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":827
 *             return ret_ob
 * 
 *         def __set__(self, dict value):             # <<<<<<<<<<<<<<
 *             cdef options.CompressionOptions* copts
 *             copts = cython.address(self.opts.compression_opts)
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_16compression_opts_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_16compression_opts_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_value), (&PyDict_Type), 1, "value", 1))) __PYX_ERR(0, 827, __pyx_L1_error)
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_16compression_opts_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject*)__pyx_v_value));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_16compression_opts_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  rocksdb::CompressionOptions *__pyx_v_copts;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  uint32_t __pyx_t_5;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":829
 *         def __set__(self, dict value):
 *             cdef options.CompressionOptions* copts
 *             copts = cython.address(self.opts.compression_opts)             # <<<<<<<<<<<<<<
 *             #  CompressionOptions(int wbits, int _lev, int _strategy, int _max_dict_bytes)
 *             if 'window_bits' in value:
 */
  __pyx_v_copts = (&__pyx_v_self->opts->compression_opts);

  /* "rocksdb/_rocksdb.pyx":831
 *             copts = cython.address(self.opts.compression_opts)
 *             #  CompressionOptions(int wbits, int _lev, int _strategy, int _max_dict_bytes)
 *             if 'window_bits' in value:             # <<<<<<<<<<<<<<
 *                 copts.window_bits  = value['window_bits']
 *             if 'level' in value:
 */
  if (unlikely(__pyx_v_value == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 831, __pyx_L1_error)
  }
  __pyx_t_1 = (__Pyx_PyDict_ContainsTF(__pyx_n_s_window_bits, __pyx_v_value, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 831, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "rocksdb/_rocksdb.pyx":832
 *             #  CompressionOptions(int wbits, int _lev, int _strategy, int _max_dict_bytes)
 *             if 'window_bits' in value:
 *                 copts.window_bits  = value['window_bits']             # <<<<<<<<<<<<<<
 *             if 'level' in value:
 *                 copts.level = value['level']
 */
    if (unlikely(__pyx_v_value == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 832, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_value, __pyx_n_s_window_bits); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 832, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 832, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_copts->window_bits = __pyx_t_4;

    /* "rocksdb/_rocksdb.pyx":831
 *             copts = cython.address(self.opts.compression_opts)
 *             #  CompressionOptions(int wbits, int _lev, int _strategy, int _max_dict_bytes)
 *             if 'window_bits' in value:             # <<<<<<<<<<<<<<
 *                 copts.window_bits  = value['window_bits']
 *             if 'level' in value:
 */
  }

  /* "rocksdb/_rocksdb.pyx":833
 *             if 'window_bits' in value:
 *                 copts.window_bits  = value['window_bits']
 *             if 'level' in value:             # <<<<<<<<<<<<<<
 *                 copts.level = value['level']
 *             if 'strategy' in value:
 */
  if (unlikely(__pyx_v_value == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 833, __pyx_L1_error)
  }
  __pyx_t_2 = (__Pyx_PyDict_ContainsTF(__pyx_n_s_level, __pyx_v_value, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 833, __pyx_L1_error)
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":834
 *                 copts.window_bits  = value['window_bits']
 *             if 'level' in value:
 *                 copts.level = value['level']             # <<<<<<<<<<<<<<
 *             if 'strategy' in value:
 *                 copts.strategy = value['strategy']
 */
    if (unlikely(__pyx_v_value == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 834, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_value, __pyx_n_s_level); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 834, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 834, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_copts->level = __pyx_t_4;

    /* "rocksdb/_rocksdb.pyx":833
 *             if 'window_bits' in value:
 *                 copts.window_bits  = value['window_bits']
 *             if 'level' in value:             # <<<<<<<<<<<<<<
 *                 copts.level = value['level']
 *             if 'strategy' in value:
 */
  }

  /* "rocksdb/_rocksdb.pyx":835
 *             if 'level' in value:
 *                 copts.level = value['level']
 *             if 'strategy' in value:             # <<<<<<<<<<<<<<
 *                 copts.strategy = value['strategy']
 *             if 'max_dict_bytes' in value:
 */
  if (unlikely(__pyx_v_value == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 835, __pyx_L1_error)
  }
  __pyx_t_1 = (__Pyx_PyDict_ContainsTF(__pyx_n_s_strategy, __pyx_v_value, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 835, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "rocksdb/_rocksdb.pyx":836
 *                 copts.level = value['level']
 *             if 'strategy' in value:
 *                 copts.strategy = value['strategy']             # <<<<<<<<<<<<<<
 *             if 'max_dict_bytes' in value:
 *                 copts.max_dict_bytes = value['max_dict_bytes']
 */
    if (unlikely(__pyx_v_value == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 836, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_value, __pyx_n_s_strategy); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 836, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 836, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_copts->strategy = __pyx_t_4;

    /* "rocksdb/_rocksdb.pyx":835
 *             if 'level' in value:
 *                 copts.level = value['level']
 *             if 'strategy' in value:             # <<<<<<<<<<<<<<
 *                 copts.strategy = value['strategy']
 *             if 'max_dict_bytes' in value:
 */
  }

  /* "rocksdb/_rocksdb.pyx":837
 *             if 'strategy' in value:
 *                 copts.strategy = value['strategy']
 *             if 'max_dict_bytes' in value:             # <<<<<<<<<<<<<<
 *                 copts.max_dict_bytes = value['max_dict_bytes']
 * 
 */
  if (unlikely(__pyx_v_value == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 837, __pyx_L1_error)
  }
  __pyx_t_2 = (__Pyx_PyDict_ContainsTF(__pyx_n_s_max_dict_bytes, __pyx_v_value, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 837, __pyx_L1_error)
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":838
 *                 copts.strategy = value['strategy']
 *             if 'max_dict_bytes' in value:
 *                 copts.max_dict_bytes = value['max_dict_bytes']             # <<<<<<<<<<<<<<
 * 
 *     property compaction_pri:
 */
    if (unlikely(__pyx_v_value == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 838, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_value, __pyx_n_s_max_dict_bytes); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 838, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyInt_As_uint32_t(__pyx_t_3); if (unlikely((__pyx_t_5 == ((uint32_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 838, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_copts->max_dict_bytes = __pyx_t_5;

    /* "rocksdb/_rocksdb.pyx":837
 *             if 'strategy' in value:
 *                 copts.strategy = value['strategy']
 *             if 'max_dict_bytes' in value:             # <<<<<<<<<<<<<<
 *                 copts.max_dict_bytes = value['max_dict_bytes']
 * 
 */
  }

  /* "rocksdb/_rocksdb.pyx":827
 *             return ret_ob
 * 
 *         def __set__(self, dict value):             # <<<<<<<<<<<<<<
 *             cdef options.CompressionOptions* copts
 *             copts = cython.address(self.opts.compression_opts)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.compression_opts.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":841
 * 
 *     property compaction_pri:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self.opts.compaction_pri == options.kByCompensatedSize:
 *                 return CompactionPri.by_compensated_size
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_14compaction_pri_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_14compaction_pri_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_14compaction_pri___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_14compaction_pri___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":842
 *     property compaction_pri:
 *         def __get__(self):
 *             if self.opts.compaction_pri == options.kByCompensatedSize:             # <<<<<<<<<<<<<<
 *                 return CompactionPri.by_compensated_size
 *             if self.opts.compaction_pri == options.kOldestLargestSeqFirst:
 */
  __pyx_t_1 = ((__pyx_v_self->opts->compaction_pri == rocksdb::kByCompensatedSize) != 0);
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":843
 *         def __get__(self):
 *             if self.opts.compaction_pri == options.kByCompensatedSize:
 *                 return CompactionPri.by_compensated_size             # <<<<<<<<<<<<<<
 *             if self.opts.compaction_pri == options.kOldestLargestSeqFirst:
 *                 return CompactionPri.oldest_largest_seq_first
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_CompactionPri), __pyx_n_s_by_compensated_size); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 843, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "rocksdb/_rocksdb.pyx":842
 *     property compaction_pri:
 *         def __get__(self):
 *             if self.opts.compaction_pri == options.kByCompensatedSize:             # <<<<<<<<<<<<<<
 *                 return CompactionPri.by_compensated_size
 *             if self.opts.compaction_pri == options.kOldestLargestSeqFirst:
 */
  }

  /* "rocksdb/_rocksdb.pyx":844
 *             if self.opts.compaction_pri == options.kByCompensatedSize:
 *                 return CompactionPri.by_compensated_size
 *             if self.opts.compaction_pri == options.kOldestLargestSeqFirst:             # <<<<<<<<<<<<<<
 *                 return CompactionPri.oldest_largest_seq_first
 *             if self.opts.compaction_pri == options.kOldestSmallestSeqFirst:
 */
  __pyx_t_1 = ((__pyx_v_self->opts->compaction_pri == rocksdb::kOldestLargestSeqFirst) != 0);
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":845
 *                 return CompactionPri.by_compensated_size
 *             if self.opts.compaction_pri == options.kOldestLargestSeqFirst:
 *                 return CompactionPri.oldest_largest_seq_first             # <<<<<<<<<<<<<<
 *             if self.opts.compaction_pri == options.kOldestSmallestSeqFirst:
 *                 return CompactionPri.oldest_smallest_seq_first
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_CompactionPri), __pyx_n_s_oldest_largest_seq_first); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 845, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "rocksdb/_rocksdb.pyx":844
 *             if self.opts.compaction_pri == options.kByCompensatedSize:
 *                 return CompactionPri.by_compensated_size
 *             if self.opts.compaction_pri == options.kOldestLargestSeqFirst:             # <<<<<<<<<<<<<<
 *                 return CompactionPri.oldest_largest_seq_first
 *             if self.opts.compaction_pri == options.kOldestSmallestSeqFirst:
 */
  }

  /* "rocksdb/_rocksdb.pyx":846
 *             if self.opts.compaction_pri == options.kOldestLargestSeqFirst:
 *                 return CompactionPri.oldest_largest_seq_first
 *             if self.opts.compaction_pri == options.kOldestSmallestSeqFirst:             # <<<<<<<<<<<<<<
 *                 return CompactionPri.oldest_smallest_seq_first
 *             if self.opts.compaction_pri == options.kMinOverlappingRatio:
 */
  __pyx_t_1 = ((__pyx_v_self->opts->compaction_pri == rocksdb::kOldestSmallestSeqFirst) != 0);
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":847
 *                 return CompactionPri.oldest_largest_seq_first
 *             if self.opts.compaction_pri == options.kOldestSmallestSeqFirst:
 *                 return CompactionPri.oldest_smallest_seq_first             # <<<<<<<<<<<<<<
 *             if self.opts.compaction_pri == options.kMinOverlappingRatio:
 *                 return CompactionPri.min_overlapping_ratio
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_CompactionPri), __pyx_n_s_oldest_smallest_seq_first); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 847, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "rocksdb/_rocksdb.pyx":846
 *             if self.opts.compaction_pri == options.kOldestLargestSeqFirst:
 *                 return CompactionPri.oldest_largest_seq_first
 *             if self.opts.compaction_pri == options.kOldestSmallestSeqFirst:             # <<<<<<<<<<<<<<
 *                 return CompactionPri.oldest_smallest_seq_first
 *             if self.opts.compaction_pri == options.kMinOverlappingRatio:
 */
  }

  /* "rocksdb/_rocksdb.pyx":848
 *             if self.opts.compaction_pri == options.kOldestSmallestSeqFirst:
 *                 return CompactionPri.oldest_smallest_seq_first
 *             if self.opts.compaction_pri == options.kMinOverlappingRatio:             # <<<<<<<<<<<<<<
 *                 return CompactionPri.min_overlapping_ratio
 *         def __set__(self, value):
 */
  __pyx_t_1 = ((__pyx_v_self->opts->compaction_pri == rocksdb::kMinOverlappingRatio) != 0);
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":849
 *                 return CompactionPri.oldest_smallest_seq_first
 *             if self.opts.compaction_pri == options.kMinOverlappingRatio:
 *                 return CompactionPri.min_overlapping_ratio             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             if value == CompactionPri.by_compensated_size:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_CompactionPri), __pyx_n_s_min_overlapping_ratio); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 849, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "rocksdb/_rocksdb.pyx":848
 *             if self.opts.compaction_pri == options.kOldestSmallestSeqFirst:
 *                 return CompactionPri.oldest_smallest_seq_first
 *             if self.opts.compaction_pri == options.kMinOverlappingRatio:             # <<<<<<<<<<<<<<
 *                 return CompactionPri.min_overlapping_ratio
 *         def __set__(self, value):
 */
  }

  /* "rocksdb/_rocksdb.pyx":841
 * 
 *     property compaction_pri:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self.opts.compaction_pri == options.kByCompensatedSize:
 *                 return CompactionPri.by_compensated_size
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.compaction_pri.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":850
 *             if self.opts.compaction_pri == options.kMinOverlappingRatio:
 *                 return CompactionPri.min_overlapping_ratio
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             if value == CompactionPri.by_compensated_size:
 *                 self.opts.compaction_pri = options.kByCompensatedSize
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_14compaction_pri_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_14compaction_pri_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_14compaction_pri_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_14compaction_pri_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":851
 *                 return CompactionPri.min_overlapping_ratio
 *         def __set__(self, value):
 *             if value == CompactionPri.by_compensated_size:             # <<<<<<<<<<<<<<
 *                 self.opts.compaction_pri = options.kByCompensatedSize
 *             elif value == CompactionPri.oldest_largest_seq_first:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_CompactionPri), __pyx_n_s_by_compensated_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 851, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_value, __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 851, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 851, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "rocksdb/_rocksdb.pyx":852
 *         def __set__(self, value):
 *             if value == CompactionPri.by_compensated_size:
 *                 self.opts.compaction_pri = options.kByCompensatedSize             # <<<<<<<<<<<<<<
 *             elif value == CompactionPri.oldest_largest_seq_first:
 *                 self.opts.compaction_pri = options.kOldestLargestSeqFirst
 */
    __pyx_v_self->opts->compaction_pri = rocksdb::kByCompensatedSize;

    /* "rocksdb/_rocksdb.pyx":851
 *                 return CompactionPri.min_overlapping_ratio
 *         def __set__(self, value):
 *             if value == CompactionPri.by_compensated_size:             # <<<<<<<<<<<<<<
 *                 self.opts.compaction_pri = options.kByCompensatedSize
 *             elif value == CompactionPri.oldest_largest_seq_first:
 */
    goto __pyx_L3;
  }

  /* "rocksdb/_rocksdb.pyx":853
 *             if value == CompactionPri.by_compensated_size:
 *                 self.opts.compaction_pri = options.kByCompensatedSize
 *             elif value == CompactionPri.oldest_largest_seq_first:             # <<<<<<<<<<<<<<
 *                 self.opts.compaction_pri = options.kOldestLargestSeqFirst
 *             elif value == CompactionPri.oldest_smallest_seq_first:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_CompactionPri), __pyx_n_s_oldest_largest_seq_first); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 853, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_value, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 853, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 853, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "rocksdb/_rocksdb.pyx":854
 *                 self.opts.compaction_pri = options.kByCompensatedSize
 *             elif value == CompactionPri.oldest_largest_seq_first:
 *                 self.opts.compaction_pri = options.kOldestLargestSeqFirst             # <<<<<<<<<<<<<<
 *             elif value == CompactionPri.oldest_smallest_seq_first:
 *                 self.opts.compaction_pri = options.kOldestSmallestSeqFirst
 */
    __pyx_v_self->opts->compaction_pri = rocksdb::kOldestLargestSeqFirst;

    /* "rocksdb/_rocksdb.pyx":853
 *             if value == CompactionPri.by_compensated_size:
 *                 self.opts.compaction_pri = options.kByCompensatedSize
 *             elif value == CompactionPri.oldest_largest_seq_first:             # <<<<<<<<<<<<<<
 *                 self.opts.compaction_pri = options.kOldestLargestSeqFirst
 *             elif value == CompactionPri.oldest_smallest_seq_first:
 */
    goto __pyx_L3;
  }

  /* "rocksdb/_rocksdb.pyx":855
 *             elif value == CompactionPri.oldest_largest_seq_first:
 *                 self.opts.compaction_pri = options.kOldestLargestSeqFirst
 *             elif value == CompactionPri.oldest_smallest_seq_first:             # <<<<<<<<<<<<<<
 *                 self.opts.compaction_pri = options.kOldestSmallestSeqFirst
 *             elif value == CompactionPri.min_overlapping_ratio:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_CompactionPri), __pyx_n_s_oldest_smallest_seq_first); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 855, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_value, __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 855, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 855, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "rocksdb/_rocksdb.pyx":856
 *                 self.opts.compaction_pri = options.kOldestLargestSeqFirst
 *             elif value == CompactionPri.oldest_smallest_seq_first:
 *                 self.opts.compaction_pri = options.kOldestSmallestSeqFirst             # <<<<<<<<<<<<<<
 *             elif value == CompactionPri.min_overlapping_ratio:
 *                 self.opts.compaction_pri = options.kMinOverlappingRatio
 */
    __pyx_v_self->opts->compaction_pri = rocksdb::kOldestSmallestSeqFirst;

    /* "rocksdb/_rocksdb.pyx":855
 *             elif value == CompactionPri.oldest_largest_seq_first:
 *                 self.opts.compaction_pri = options.kOldestLargestSeqFirst
 *             elif value == CompactionPri.oldest_smallest_seq_first:             # <<<<<<<<<<<<<<
 *                 self.opts.compaction_pri = options.kOldestSmallestSeqFirst
 *             elif value == CompactionPri.min_overlapping_ratio:
 */
    goto __pyx_L3;
  }

  /* "rocksdb/_rocksdb.pyx":857
 *             elif value == CompactionPri.oldest_smallest_seq_first:
 *                 self.opts.compaction_pri = options.kOldestSmallestSeqFirst
 *             elif value == CompactionPri.min_overlapping_ratio:             # <<<<<<<<<<<<<<
 *                 self.opts.compaction_pri = options.kMinOverlappingRatio
 *             else:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_CompactionPri), __pyx_n_s_min_overlapping_ratio); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 857, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_value, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 857, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 857, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "rocksdb/_rocksdb.pyx":858
 *                 self.opts.compaction_pri = options.kOldestSmallestSeqFirst
 *             elif value == CompactionPri.min_overlapping_ratio:
 *                 self.opts.compaction_pri = options.kMinOverlappingRatio             # <<<<<<<<<<<<<<
 *             else:
 *                 raise TypeError("Unknown compaction pri: %s" % value)
 */
    __pyx_v_self->opts->compaction_pri = rocksdb::kMinOverlappingRatio;

    /* "rocksdb/_rocksdb.pyx":857
 *             elif value == CompactionPri.oldest_smallest_seq_first:
 *                 self.opts.compaction_pri = options.kOldestSmallestSeqFirst
 *             elif value == CompactionPri.min_overlapping_ratio:             # <<<<<<<<<<<<<<
 *                 self.opts.compaction_pri = options.kMinOverlappingRatio
 *             else:
 */
    goto __pyx_L3;
  }

  /* "rocksdb/_rocksdb.pyx":860
 *                 self.opts.compaction_pri = options.kMinOverlappingRatio
 *             else:
 *                 raise TypeError("Unknown compaction pri: %s" % value)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_Unknown_compaction_pri_s, __pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 860, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 860, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 860, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 860, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "rocksdb/_rocksdb.pyx":850
 *             if self.opts.compaction_pri == options.kMinOverlappingRatio:
 *                 return CompactionPri.min_overlapping_ratio
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             if value == CompactionPri.by_compensated_size:
 *                 self.opts.compaction_pri = options.kByCompensatedSize
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.compaction_pri.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":864
 * 
 *     property compression:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self.opts.compression == options.kNoCompression:
 *                 return CompressionType.no_compression
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_11compression_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_11compression_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_11compression___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_11compression___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":865
 *     property compression:
 *         def __get__(self):
 *             if self.opts.compression == options.kNoCompression:             # <<<<<<<<<<<<<<
 *                 return CompressionType.no_compression
 *             elif self.opts.compression  == options.kSnappyCompression:
 */
  switch (__pyx_v_self->opts->compression) {
    case rocksdb::kNoCompression:

    /* "rocksdb/_rocksdb.pyx":866
 *         def __get__(self):
 *             if self.opts.compression == options.kNoCompression:
 *                 return CompressionType.no_compression             # <<<<<<<<<<<<<<
 *             elif self.opts.compression  == options.kSnappyCompression:
 *                 return CompressionType.snappy_compression
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_CompressionType), __pyx_n_s_no_compression); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 866, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "rocksdb/_rocksdb.pyx":865
 *     property compression:
 *         def __get__(self):
 *             if self.opts.compression == options.kNoCompression:             # <<<<<<<<<<<<<<
 *                 return CompressionType.no_compression
 *             elif self.opts.compression  == options.kSnappyCompression:
 */
    break;

    /* "rocksdb/_rocksdb.pyx":867
 *             if self.opts.compression == options.kNoCompression:
 *                 return CompressionType.no_compression
 *             elif self.opts.compression  == options.kSnappyCompression:             # <<<<<<<<<<<<<<
 *                 return CompressionType.snappy_compression
 *             elif self.opts.compression == options.kZlibCompression:
 */
    case rocksdb::kSnappyCompression:

    /* "rocksdb/_rocksdb.pyx":868
 *                 return CompressionType.no_compression
 *             elif self.opts.compression  == options.kSnappyCompression:
 *                 return CompressionType.snappy_compression             # <<<<<<<<<<<<<<
 *             elif self.opts.compression == options.kZlibCompression:
 *                 return CompressionType.zlib_compression
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_CompressionType), __pyx_n_s_snappy_compression); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 868, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "rocksdb/_rocksdb.pyx":867
 *             if self.opts.compression == options.kNoCompression:
 *                 return CompressionType.no_compression
 *             elif self.opts.compression  == options.kSnappyCompression:             # <<<<<<<<<<<<<<
 *                 return CompressionType.snappy_compression
 *             elif self.opts.compression == options.kZlibCompression:
 */
    break;

    /* "rocksdb/_rocksdb.pyx":869
 *             elif self.opts.compression  == options.kSnappyCompression:
 *                 return CompressionType.snappy_compression
 *             elif self.opts.compression == options.kZlibCompression:             # <<<<<<<<<<<<<<
 *                 return CompressionType.zlib_compression
 *             elif self.opts.compression == options.kBZip2Compression:
 */
    case rocksdb::kZlibCompression:

    /* "rocksdb/_rocksdb.pyx":870
 *                 return CompressionType.snappy_compression
 *             elif self.opts.compression == options.kZlibCompression:
 *                 return CompressionType.zlib_compression             # <<<<<<<<<<<<<<
 *             elif self.opts.compression == options.kBZip2Compression:
 *                 return CompressionType.bzip2_compression
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_CompressionType), __pyx_n_s_zlib_compression); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 870, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "rocksdb/_rocksdb.pyx":869
 *             elif self.opts.compression  == options.kSnappyCompression:
 *                 return CompressionType.snappy_compression
 *             elif self.opts.compression == options.kZlibCompression:             # <<<<<<<<<<<<<<
 *                 return CompressionType.zlib_compression
 *             elif self.opts.compression == options.kBZip2Compression:
 */
    break;

    /* "rocksdb/_rocksdb.pyx":871
 *             elif self.opts.compression == options.kZlibCompression:
 *                 return CompressionType.zlib_compression
 *             elif self.opts.compression == options.kBZip2Compression:             # <<<<<<<<<<<<<<
 *                 return CompressionType.bzip2_compression
 *             elif self.opts.compression == options.kLZ4Compression:
 */
    case rocksdb::kBZip2Compression:

    /* "rocksdb/_rocksdb.pyx":872
 *                 return CompressionType.zlib_compression
 *             elif self.opts.compression == options.kBZip2Compression:
 *                 return CompressionType.bzip2_compression             # <<<<<<<<<<<<<<
 *             elif self.opts.compression == options.kLZ4Compression:
 *                 return CompressionType.lz4_compression
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_CompressionType), __pyx_n_s_bzip2_compression); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 872, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "rocksdb/_rocksdb.pyx":871
 *             elif self.opts.compression == options.kZlibCompression:
 *                 return CompressionType.zlib_compression
 *             elif self.opts.compression == options.kBZip2Compression:             # <<<<<<<<<<<<<<
 *                 return CompressionType.bzip2_compression
 *             elif self.opts.compression == options.kLZ4Compression:
 */
    break;

    /* "rocksdb/_rocksdb.pyx":873
 *             elif self.opts.compression == options.kBZip2Compression:
 *                 return CompressionType.bzip2_compression
 *             elif self.opts.compression == options.kLZ4Compression:             # <<<<<<<<<<<<<<
 *                 return CompressionType.lz4_compression
 *             elif self.opts.compression == options.kLZ4HCCompression:
 */
    case rocksdb::kLZ4Compression:

    /* "rocksdb/_rocksdb.pyx":874
 *                 return CompressionType.bzip2_compression
 *             elif self.opts.compression == options.kLZ4Compression:
 *                 return CompressionType.lz4_compression             # <<<<<<<<<<<<<<
 *             elif self.opts.compression == options.kLZ4HCCompression:
 *                 return CompressionType.lz4hc_compression
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_CompressionType), __pyx_n_s_lz4_compression); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 874, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "rocksdb/_rocksdb.pyx":873
 *             elif self.opts.compression == options.kBZip2Compression:
 *                 return CompressionType.bzip2_compression
 *             elif self.opts.compression == options.kLZ4Compression:             # <<<<<<<<<<<<<<
 *                 return CompressionType.lz4_compression
 *             elif self.opts.compression == options.kLZ4HCCompression:
 */
    break;

    /* "rocksdb/_rocksdb.pyx":875
 *             elif self.opts.compression == options.kLZ4Compression:
 *                 return CompressionType.lz4_compression
 *             elif self.opts.compression == options.kLZ4HCCompression:             # <<<<<<<<<<<<<<
 *                 return CompressionType.lz4hc_compression
 *             elif self.opts.compression == options.kXpressCompression:
 */
    case rocksdb::kLZ4HCCompression:

    /* "rocksdb/_rocksdb.pyx":876
 *                 return CompressionType.lz4_compression
 *             elif self.opts.compression == options.kLZ4HCCompression:
 *                 return CompressionType.lz4hc_compression             # <<<<<<<<<<<<<<
 *             elif self.opts.compression == options.kXpressCompression:
 *                 return CompressionType.xpress_compression
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_CompressionType), __pyx_n_s_lz4hc_compression); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 876, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "rocksdb/_rocksdb.pyx":875
 *             elif self.opts.compression == options.kLZ4Compression:
 *                 return CompressionType.lz4_compression
 *             elif self.opts.compression == options.kLZ4HCCompression:             # <<<<<<<<<<<<<<
 *                 return CompressionType.lz4hc_compression
 *             elif self.opts.compression == options.kXpressCompression:
 */
    break;

    /* "rocksdb/_rocksdb.pyx":877
 *             elif self.opts.compression == options.kLZ4HCCompression:
 *                 return CompressionType.lz4hc_compression
 *             elif self.opts.compression == options.kXpressCompression:             # <<<<<<<<<<<<<<
 *                 return CompressionType.xpress_compression
 *             elif self.opts.compression == options.kZSTD:
 */
    case rocksdb::kXpressCompression:

    /* "rocksdb/_rocksdb.pyx":878
 *                 return CompressionType.lz4hc_compression
 *             elif self.opts.compression == options.kXpressCompression:
 *                 return CompressionType.xpress_compression             # <<<<<<<<<<<<<<
 *             elif self.opts.compression == options.kZSTD:
 *                 return CompressionType.zstd_compression
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_CompressionType), __pyx_n_s_xpress_compression); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 878, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "rocksdb/_rocksdb.pyx":877
 *             elif self.opts.compression == options.kLZ4HCCompression:
 *                 return CompressionType.lz4hc_compression
 *             elif self.opts.compression == options.kXpressCompression:             # <<<<<<<<<<<<<<
 *                 return CompressionType.xpress_compression
 *             elif self.opts.compression == options.kZSTD:
 */
    break;

    /* "rocksdb/_rocksdb.pyx":879
 *             elif self.opts.compression == options.kXpressCompression:
 *                 return CompressionType.xpress_compression
 *             elif self.opts.compression == options.kZSTD:             # <<<<<<<<<<<<<<
 *                 return CompressionType.zstd_compression
 *             elif self.opts.compression == options.kZSTDNotFinalCompression:
 */
    case rocksdb::kZSTD:

    /* "rocksdb/_rocksdb.pyx":880
 *                 return CompressionType.xpress_compression
 *             elif self.opts.compression == options.kZSTD:
 *                 return CompressionType.zstd_compression             # <<<<<<<<<<<<<<
 *             elif self.opts.compression == options.kZSTDNotFinalCompression:
 *                 return CompressionType.zstdnotfinal_compression
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_CompressionType), __pyx_n_s_zstd_compression); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 880, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "rocksdb/_rocksdb.pyx":879
 *             elif self.opts.compression == options.kXpressCompression:
 *                 return CompressionType.xpress_compression
 *             elif self.opts.compression == options.kZSTD:             # <<<<<<<<<<<<<<
 *                 return CompressionType.zstd_compression
 *             elif self.opts.compression == options.kZSTDNotFinalCompression:
 */
    break;

    /* "rocksdb/_rocksdb.pyx":881
 *             elif self.opts.compression == options.kZSTD:
 *                 return CompressionType.zstd_compression
 *             elif self.opts.compression == options.kZSTDNotFinalCompression:             # <<<<<<<<<<<<<<
 *                 return CompressionType.zstdnotfinal_compression
 *             elif self.opts.compression == options.kDisableCompressionOption:
 */
    case rocksdb::kZSTDNotFinalCompression:

    /* "rocksdb/_rocksdb.pyx":882
 *                 return CompressionType.zstd_compression
 *             elif self.opts.compression == options.kZSTDNotFinalCompression:
 *                 return CompressionType.zstdnotfinal_compression             # <<<<<<<<<<<<<<
 *             elif self.opts.compression == options.kDisableCompressionOption:
 *                 return CompressionType.disable_compression
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_CompressionType), __pyx_n_s_zstdnotfinal_compression); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 882, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "rocksdb/_rocksdb.pyx":881
 *             elif self.opts.compression == options.kZSTD:
 *                 return CompressionType.zstd_compression
 *             elif self.opts.compression == options.kZSTDNotFinalCompression:             # <<<<<<<<<<<<<<
 *                 return CompressionType.zstdnotfinal_compression
 *             elif self.opts.compression == options.kDisableCompressionOption:
 */
    break;

    /* "rocksdb/_rocksdb.pyx":883
 *             elif self.opts.compression == options.kZSTDNotFinalCompression:
 *                 return CompressionType.zstdnotfinal_compression
 *             elif self.opts.compression == options.kDisableCompressionOption:             # <<<<<<<<<<<<<<
 *                 return CompressionType.disable_compression
 *             else:
 */
    case rocksdb::kDisableCompressionOption:

    /* "rocksdb/_rocksdb.pyx":884
 *                 return CompressionType.zstdnotfinal_compression
 *             elif self.opts.compression == options.kDisableCompressionOption:
 *                 return CompressionType.disable_compression             # <<<<<<<<<<<<<<
 *             else:
 *                 raise Exception("Unknonw type: %s" % self.opts.compression)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_CompressionType), __pyx_n_s_disable_compression); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 884, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "rocksdb/_rocksdb.pyx":883
 *             elif self.opts.compression == options.kZSTDNotFinalCompression:
 *                 return CompressionType.zstdnotfinal_compression
 *             elif self.opts.compression == options.kDisableCompressionOption:             # <<<<<<<<<<<<<<
 *                 return CompressionType.disable_compression
 *             else:
 */
    break;
    default:

    /* "rocksdb/_rocksdb.pyx":886
 *                 return CompressionType.disable_compression
 *             else:
 *                 raise Exception("Unknonw type: %s" % self.opts.compression)             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, value):
 */
    __pyx_t_1 = __Pyx_PyInt_From_rocksdb_3a__3a_CompressionType(__pyx_v_self->opts->compression); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 886, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_Unknonw_type_s, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 886, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 886, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 886, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 886, __pyx_L1_error)
    break;
  }

  /* "rocksdb/_rocksdb.pyx":864
 * 
 *     property compression:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self.opts.compression == options.kNoCompression:
 *                 return CompressionType.no_compression
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.compression.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":888
 *                 raise Exception("Unknonw type: %s" % self.opts.compression)
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             if value == CompressionType.no_compression:
 *                 self.opts.compression = options.kNoCompression
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_11compression_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_11compression_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_11compression_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_11compression_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":889
 * 
 *         def __set__(self, value):
 *             if value == CompressionType.no_compression:             # <<<<<<<<<<<<<<
 *                 self.opts.compression = options.kNoCompression
 *             elif value == CompressionType.snappy_compression:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_CompressionType), __pyx_n_s_no_compression); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 889, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_value, __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 889, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 889, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "rocksdb/_rocksdb.pyx":890
 *         def __set__(self, value):
 *             if value == CompressionType.no_compression:
 *                 self.opts.compression = options.kNoCompression             # <<<<<<<<<<<<<<
 *             elif value == CompressionType.snappy_compression:
 *                 self.opts.compression = options.kSnappyCompression
 */
    __pyx_v_self->opts->compression = rocksdb::kNoCompression;

    /* "rocksdb/_rocksdb.pyx":889
 * 
 *         def __set__(self, value):
 *             if value == CompressionType.no_compression:             # <<<<<<<<<<<<<<
 *                 self.opts.compression = options.kNoCompression
 *             elif value == CompressionType.snappy_compression:
 */
    goto __pyx_L3;
  }

  /* "rocksdb/_rocksdb.pyx":891
 *             if value == CompressionType.no_compression:
 *                 self.opts.compression = options.kNoCompression
 *             elif value == CompressionType.snappy_compression:             # <<<<<<<<<<<<<<
 *                 self.opts.compression = options.kSnappyCompression
 *             elif value == CompressionType.zlib_compression:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_CompressionType), __pyx_n_s_snappy_compression); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 891, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_value, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 891, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 891, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "rocksdb/_rocksdb.pyx":892
 *                 self.opts.compression = options.kNoCompression
 *             elif value == CompressionType.snappy_compression:
 *                 self.opts.compression = options.kSnappyCompression             # <<<<<<<<<<<<<<
 *             elif value == CompressionType.zlib_compression:
 *                 self.opts.compression = options.kZlibCompression
 */
    __pyx_v_self->opts->compression = rocksdb::kSnappyCompression;

    /* "rocksdb/_rocksdb.pyx":891
 *             if value == CompressionType.no_compression:
 *                 self.opts.compression = options.kNoCompression
 *             elif value == CompressionType.snappy_compression:             # <<<<<<<<<<<<<<
 *                 self.opts.compression = options.kSnappyCompression
 *             elif value == CompressionType.zlib_compression:
 */
    goto __pyx_L3;
  }

  /* "rocksdb/_rocksdb.pyx":893
 *             elif value == CompressionType.snappy_compression:
 *                 self.opts.compression = options.kSnappyCompression
 *             elif value == CompressionType.zlib_compression:             # <<<<<<<<<<<<<<
 *                 self.opts.compression = options.kZlibCompression
 *             elif value == CompressionType.bzip2_compression:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_CompressionType), __pyx_n_s_zlib_compression); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 893, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_value, __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 893, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 893, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "rocksdb/_rocksdb.pyx":894
 *                 self.opts.compression = options.kSnappyCompression
 *             elif value == CompressionType.zlib_compression:
 *                 self.opts.compression = options.kZlibCompression             # <<<<<<<<<<<<<<
 *             elif value == CompressionType.bzip2_compression:
 *                 self.opts.compression = options.kBZip2Compression
 */
    __pyx_v_self->opts->compression = rocksdb::kZlibCompression;

    /* "rocksdb/_rocksdb.pyx":893
 *             elif value == CompressionType.snappy_compression:
 *                 self.opts.compression = options.kSnappyCompression
 *             elif value == CompressionType.zlib_compression:             # <<<<<<<<<<<<<<
 *                 self.opts.compression = options.kZlibCompression
 *             elif value == CompressionType.bzip2_compression:
 */
    goto __pyx_L3;
  }

  /* "rocksdb/_rocksdb.pyx":895
 *             elif value == CompressionType.zlib_compression:
 *                 self.opts.compression = options.kZlibCompression
 *             elif value == CompressionType.bzip2_compression:             # <<<<<<<<<<<<<<
 *                 self.opts.compression = options.kBZip2Compression
 *             elif value == CompressionType.lz4_compression:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_CompressionType), __pyx_n_s_bzip2_compression); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 895, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_value, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 895, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 895, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "rocksdb/_rocksdb.pyx":896
 *                 self.opts.compression = options.kZlibCompression
 *             elif value == CompressionType.bzip2_compression:
 *                 self.opts.compression = options.kBZip2Compression             # <<<<<<<<<<<<<<
 *             elif value == CompressionType.lz4_compression:
 *                 self.opts.compression = options.kLZ4Compression
 */
    __pyx_v_self->opts->compression = rocksdb::kBZip2Compression;

    /* "rocksdb/_rocksdb.pyx":895
 *             elif value == CompressionType.zlib_compression:
 *                 self.opts.compression = options.kZlibCompression
 *             elif value == CompressionType.bzip2_compression:             # <<<<<<<<<<<<<<
 *                 self.opts.compression = options.kBZip2Compression
 *             elif value == CompressionType.lz4_compression:
 */
    goto __pyx_L3;
  }

  /* "rocksdb/_rocksdb.pyx":897
 *             elif value == CompressionType.bzip2_compression:
 *                 self.opts.compression = options.kBZip2Compression
 *             elif value == CompressionType.lz4_compression:             # <<<<<<<<<<<<<<
 *                 self.opts.compression = options.kLZ4Compression
 *             elif value == CompressionType.lz4hc_compression:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_CompressionType), __pyx_n_s_lz4_compression); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 897, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_value, __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 897, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 897, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "rocksdb/_rocksdb.pyx":898
 *                 self.opts.compression = options.kBZip2Compression
 *             elif value == CompressionType.lz4_compression:
 *                 self.opts.compression = options.kLZ4Compression             # <<<<<<<<<<<<<<
 *             elif value == CompressionType.lz4hc_compression:
 *                 self.opts.compression = options.kLZ4HCCompression
 */
    __pyx_v_self->opts->compression = rocksdb::kLZ4Compression;

    /* "rocksdb/_rocksdb.pyx":897
 *             elif value == CompressionType.bzip2_compression:
 *                 self.opts.compression = options.kBZip2Compression
 *             elif value == CompressionType.lz4_compression:             # <<<<<<<<<<<<<<
 *                 self.opts.compression = options.kLZ4Compression
 *             elif value == CompressionType.lz4hc_compression:
 */
    goto __pyx_L3;
  }

  /* "rocksdb/_rocksdb.pyx":899
 *             elif value == CompressionType.lz4_compression:
 *                 self.opts.compression = options.kLZ4Compression
 *             elif value == CompressionType.lz4hc_compression:             # <<<<<<<<<<<<<<
 *                 self.opts.compression = options.kLZ4HCCompression
 *             elif value == CompressionType.zstd_compression:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_CompressionType), __pyx_n_s_lz4hc_compression); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 899, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_value, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 899, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 899, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "rocksdb/_rocksdb.pyx":900
 *                 self.opts.compression = options.kLZ4Compression
 *             elif value == CompressionType.lz4hc_compression:
 *                 self.opts.compression = options.kLZ4HCCompression             # <<<<<<<<<<<<<<
 *             elif value == CompressionType.zstd_compression:
 *                 self.opts.compression = options.kZSTD
 */
    __pyx_v_self->opts->compression = rocksdb::kLZ4HCCompression;

    /* "rocksdb/_rocksdb.pyx":899
 *             elif value == CompressionType.lz4_compression:
 *                 self.opts.compression = options.kLZ4Compression
 *             elif value == CompressionType.lz4hc_compression:             # <<<<<<<<<<<<<<
 *                 self.opts.compression = options.kLZ4HCCompression
 *             elif value == CompressionType.zstd_compression:
 */
    goto __pyx_L3;
  }

  /* "rocksdb/_rocksdb.pyx":901
 *             elif value == CompressionType.lz4hc_compression:
 *                 self.opts.compression = options.kLZ4HCCompression
 *             elif value == CompressionType.zstd_compression:             # <<<<<<<<<<<<<<
 *                 self.opts.compression = options.kZSTD
 *             elif value == CompressionType.zstdnotfinal_compression:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_CompressionType), __pyx_n_s_zstd_compression); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 901, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_value, __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 901, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 901, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "rocksdb/_rocksdb.pyx":902
 *                 self.opts.compression = options.kLZ4HCCompression
 *             elif value == CompressionType.zstd_compression:
 *                 self.opts.compression = options.kZSTD             # <<<<<<<<<<<<<<
 *             elif value == CompressionType.zstdnotfinal_compression:
 *                 self.opts.compression = options.kZSTDNotFinalCompression
 */
    __pyx_v_self->opts->compression = rocksdb::kZSTD;

    /* "rocksdb/_rocksdb.pyx":901
 *             elif value == CompressionType.lz4hc_compression:
 *                 self.opts.compression = options.kLZ4HCCompression
 *             elif value == CompressionType.zstd_compression:             # <<<<<<<<<<<<<<
 *                 self.opts.compression = options.kZSTD
 *             elif value == CompressionType.zstdnotfinal_compression:
 */
    goto __pyx_L3;
  }

  /* "rocksdb/_rocksdb.pyx":903
 *             elif value == CompressionType.zstd_compression:
 *                 self.opts.compression = options.kZSTD
 *             elif value == CompressionType.zstdnotfinal_compression:             # <<<<<<<<<<<<<<
 *                 self.opts.compression = options.kZSTDNotFinalCompression
 *             elif value == CompressionType.disable_compression:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_CompressionType), __pyx_n_s_zstdnotfinal_compression); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 903, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_value, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 903, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 903, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "rocksdb/_rocksdb.pyx":904
 *                 self.opts.compression = options.kZSTD
 *             elif value == CompressionType.zstdnotfinal_compression:
 *                 self.opts.compression = options.kZSTDNotFinalCompression             # <<<<<<<<<<<<<<
 *             elif value == CompressionType.disable_compression:
 *                 self.opts.compression = options.kDisableCompressionOption
 */
    __pyx_v_self->opts->compression = rocksdb::kZSTDNotFinalCompression;

    /* "rocksdb/_rocksdb.pyx":903
 *             elif value == CompressionType.zstd_compression:
 *                 self.opts.compression = options.kZSTD
 *             elif value == CompressionType.zstdnotfinal_compression:             # <<<<<<<<<<<<<<
 *                 self.opts.compression = options.kZSTDNotFinalCompression
 *             elif value == CompressionType.disable_compression:
 */
    goto __pyx_L3;
  }

  /* "rocksdb/_rocksdb.pyx":905
 *             elif value == CompressionType.zstdnotfinal_compression:
 *                 self.opts.compression = options.kZSTDNotFinalCompression
 *             elif value == CompressionType.disable_compression:             # <<<<<<<<<<<<<<
 *                 self.opts.compression = options.kDisableCompressionOption
 *             else:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_CompressionType), __pyx_n_s_disable_compression); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 905, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_value, __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 905, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 905, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "rocksdb/_rocksdb.pyx":906
 *                 self.opts.compression = options.kZSTDNotFinalCompression
 *             elif value == CompressionType.disable_compression:
 *                 self.opts.compression = options.kDisableCompressionOption             # <<<<<<<<<<<<<<
 *             else:
 *                 raise TypeError("Unknown compression: %s" % value)
 */
    __pyx_v_self->opts->compression = rocksdb::kDisableCompressionOption;

    /* "rocksdb/_rocksdb.pyx":905
 *             elif value == CompressionType.zstdnotfinal_compression:
 *                 self.opts.compression = options.kZSTDNotFinalCompression
 *             elif value == CompressionType.disable_compression:             # <<<<<<<<<<<<<<
 *                 self.opts.compression = options.kDisableCompressionOption
 *             else:
 */
    goto __pyx_L3;
  }

  /* "rocksdb/_rocksdb.pyx":908
 *                 self.opts.compression = options.kDisableCompressionOption
 *             else:
 *                 raise TypeError("Unknown compression: %s" % value)             # <<<<<<<<<<<<<<
 * 
 *     property num_levels:
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_Unknown_compression_s, __pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 908, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 908, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 908, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 908, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "rocksdb/_rocksdb.pyx":888
 *                 raise Exception("Unknonw type: %s" % self.opts.compression)
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             if value == CompressionType.no_compression:
 *                 self.opts.compression = options.kNoCompression
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.compression.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":911
 * 
 *     property num_levels:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.num_levels
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_10num_levels_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_10num_levels_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_10num_levels___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_10num_levels___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":912
 *     property num_levels:
 *         def __get__(self):
 *             return self.opts.num_levels             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.num_levels = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->opts->num_levels); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 912, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":911
 * 
 *     property num_levels:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.num_levels
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.num_levels.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":913
 *         def __get__(self):
 *             return self.opts.num_levels
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.num_levels = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_10num_levels_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_10num_levels_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_10num_levels_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_10num_levels_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":914
 *             return self.opts.num_levels
 *         def __set__(self, value):
 *             self.opts.num_levels = value             # <<<<<<<<<<<<<<
 * 
 *     property level0_file_num_compaction_trigger:
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 914, __pyx_L1_error)
  __pyx_v_self->opts->num_levels = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":913
 *         def __get__(self):
 *             return self.opts.num_levels
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.num_levels = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.num_levels.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":917
 * 
 *     property level0_file_num_compaction_trigger:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.level0_file_num_compaction_trigger
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_34level0_file_num_compaction_trigger_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_34level0_file_num_compaction_trigger_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_34level0_file_num_compaction_trigger___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_34level0_file_num_compaction_trigger___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":918
 *     property level0_file_num_compaction_trigger:
 *         def __get__(self):
 *             return self.opts.level0_file_num_compaction_trigger             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.level0_file_num_compaction_trigger = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->opts->level0_file_num_compaction_trigger); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 918, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":917
 * 
 *     property level0_file_num_compaction_trigger:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.level0_file_num_compaction_trigger
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.level0_file_num_compaction_trigger.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":919
 *         def __get__(self):
 *             return self.opts.level0_file_num_compaction_trigger
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.level0_file_num_compaction_trigger = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_34level0_file_num_compaction_trigger_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_34level0_file_num_compaction_trigger_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_34level0_file_num_compaction_trigger_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_34level0_file_num_compaction_trigger_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":920
 *             return self.opts.level0_file_num_compaction_trigger
 *         def __set__(self, value):
 *             self.opts.level0_file_num_compaction_trigger = value             # <<<<<<<<<<<<<<
 * 
 *     property level0_slowdown_writes_trigger:
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 920, __pyx_L1_error)
  __pyx_v_self->opts->level0_file_num_compaction_trigger = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":919
 *         def __get__(self):
 *             return self.opts.level0_file_num_compaction_trigger
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.level0_file_num_compaction_trigger = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.level0_file_num_compaction_trigger.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":923
 * 
 *     property level0_slowdown_writes_trigger:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.level0_slowdown_writes_trigger
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_30level0_slowdown_writes_trigger_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_30level0_slowdown_writes_trigger_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_30level0_slowdown_writes_trigger___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_30level0_slowdown_writes_trigger___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":924
 *     property level0_slowdown_writes_trigger:
 *         def __get__(self):
 *             return self.opts.level0_slowdown_writes_trigger             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.level0_slowdown_writes_trigger = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->opts->level0_slowdown_writes_trigger); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 924, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":923
 * 
 *     property level0_slowdown_writes_trigger:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.level0_slowdown_writes_trigger
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.level0_slowdown_writes_trigger.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":925
 *         def __get__(self):
 *             return self.opts.level0_slowdown_writes_trigger
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.level0_slowdown_writes_trigger = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_30level0_slowdown_writes_trigger_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_30level0_slowdown_writes_trigger_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_30level0_slowdown_writes_trigger_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_30level0_slowdown_writes_trigger_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":926
 *             return self.opts.level0_slowdown_writes_trigger
 *         def __set__(self, value):
 *             self.opts.level0_slowdown_writes_trigger = value             # <<<<<<<<<<<<<<
 * 
 *     property level0_stop_writes_trigger:
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 926, __pyx_L1_error)
  __pyx_v_self->opts->level0_slowdown_writes_trigger = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":925
 *         def __get__(self):
 *             return self.opts.level0_slowdown_writes_trigger
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.level0_slowdown_writes_trigger = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.level0_slowdown_writes_trigger.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":929
 * 
 *     property level0_stop_writes_trigger:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.level0_stop_writes_trigger
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_26level0_stop_writes_trigger_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_26level0_stop_writes_trigger_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_26level0_stop_writes_trigger___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_26level0_stop_writes_trigger___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":930
 *     property level0_stop_writes_trigger:
 *         def __get__(self):
 *             return self.opts.level0_stop_writes_trigger             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.level0_stop_writes_trigger = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->opts->level0_stop_writes_trigger); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 930, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":929
 * 
 *     property level0_stop_writes_trigger:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.level0_stop_writes_trigger
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.level0_stop_writes_trigger.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":931
 *         def __get__(self):
 *             return self.opts.level0_stop_writes_trigger
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.level0_stop_writes_trigger = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_26level0_stop_writes_trigger_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_26level0_stop_writes_trigger_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_26level0_stop_writes_trigger_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_26level0_stop_writes_trigger_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":932
 *             return self.opts.level0_stop_writes_trigger
 *         def __set__(self, value):
 *             self.opts.level0_stop_writes_trigger = value             # <<<<<<<<<<<<<<
 * 
 *     property max_mem_compaction_level:
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 932, __pyx_L1_error)
  __pyx_v_self->opts->level0_stop_writes_trigger = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":931
 *         def __get__(self):
 *             return self.opts.level0_stop_writes_trigger
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.level0_stop_writes_trigger = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.level0_stop_writes_trigger.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":935
 * 
 *     property max_mem_compaction_level:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.max_mem_compaction_level
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_24max_mem_compaction_level_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_24max_mem_compaction_level_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_24max_mem_compaction_level___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_24max_mem_compaction_level___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":936
 *     property max_mem_compaction_level:
 *         def __get__(self):
 *             return self.opts.max_mem_compaction_level             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.max_mem_compaction_level = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->opts->max_mem_compaction_level); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 936, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":935
 * 
 *     property max_mem_compaction_level:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.max_mem_compaction_level
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.max_mem_compaction_level.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":937
 *         def __get__(self):
 *             return self.opts.max_mem_compaction_level
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.max_mem_compaction_level = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_24max_mem_compaction_level_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_24max_mem_compaction_level_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_24max_mem_compaction_level_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_24max_mem_compaction_level_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":938
 *             return self.opts.max_mem_compaction_level
 *         def __set__(self, value):
 *             self.opts.max_mem_compaction_level = value             # <<<<<<<<<<<<<<
 * 
 *     property target_file_size_base:
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 938, __pyx_L1_error)
  __pyx_v_self->opts->max_mem_compaction_level = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":937
 *         def __get__(self):
 *             return self.opts.max_mem_compaction_level
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.max_mem_compaction_level = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.max_mem_compaction_level.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":941
 * 
 *     property target_file_size_base:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.target_file_size_base
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_21target_file_size_base_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_21target_file_size_base_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_21target_file_size_base___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_21target_file_size_base___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":942
 *     property target_file_size_base:
 *         def __get__(self):
 *             return self.opts.target_file_size_base             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.target_file_size_base = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_uint64_t(__pyx_v_self->opts->target_file_size_base); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 942, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":941
 * 
 *     property target_file_size_base:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.target_file_size_base
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.target_file_size_base.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":943
 *         def __get__(self):
 *             return self.opts.target_file_size_base
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.target_file_size_base = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_21target_file_size_base_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_21target_file_size_base_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_21target_file_size_base_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_21target_file_size_base_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  uint64_t __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":944
 *             return self.opts.target_file_size_base
 *         def __set__(self, value):
 *             self.opts.target_file_size_base = value             # <<<<<<<<<<<<<<
 * 
 *     property target_file_size_multiplier:
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_value); if (unlikely((__pyx_t_1 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 944, __pyx_L1_error)
  __pyx_v_self->opts->target_file_size_base = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":943
 *         def __get__(self):
 *             return self.opts.target_file_size_base
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.target_file_size_base = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.target_file_size_base.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":947
 * 
 *     property target_file_size_multiplier:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.target_file_size_multiplier
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_27target_file_size_multiplier_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_27target_file_size_multiplier_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_27target_file_size_multiplier___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_27target_file_size_multiplier___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":948
 *     property target_file_size_multiplier:
 *         def __get__(self):
 *             return self.opts.target_file_size_multiplier             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.target_file_size_multiplier = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->opts->target_file_size_multiplier); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 948, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":947
 * 
 *     property target_file_size_multiplier:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.target_file_size_multiplier
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.target_file_size_multiplier.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":949
 *         def __get__(self):
 *             return self.opts.target_file_size_multiplier
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.target_file_size_multiplier = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_27target_file_size_multiplier_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_27target_file_size_multiplier_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_27target_file_size_multiplier_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_27target_file_size_multiplier_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":950
 *             return self.opts.target_file_size_multiplier
 *         def __set__(self, value):
 *             self.opts.target_file_size_multiplier = value             # <<<<<<<<<<<<<<
 * 
 *     property max_bytes_for_level_base:
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 950, __pyx_L1_error)
  __pyx_v_self->opts->target_file_size_multiplier = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":949
 *         def __get__(self):
 *             return self.opts.target_file_size_multiplier
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.target_file_size_multiplier = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.target_file_size_multiplier.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":953
 * 
 *     property max_bytes_for_level_base:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.max_bytes_for_level_base
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_24max_bytes_for_level_base_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_24max_bytes_for_level_base_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_24max_bytes_for_level_base___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_24max_bytes_for_level_base___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":954
 *     property max_bytes_for_level_base:
 *         def __get__(self):
 *             return self.opts.max_bytes_for_level_base             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.max_bytes_for_level_base = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_uint64_t(__pyx_v_self->opts->max_bytes_for_level_base); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 954, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":953
 * 
 *     property max_bytes_for_level_base:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.max_bytes_for_level_base
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.max_bytes_for_level_base.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":955
 *         def __get__(self):
 *             return self.opts.max_bytes_for_level_base
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.max_bytes_for_level_base = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_24max_bytes_for_level_base_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_24max_bytes_for_level_base_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_24max_bytes_for_level_base_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_24max_bytes_for_level_base_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  uint64_t __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":956
 *             return self.opts.max_bytes_for_level_base
 *         def __set__(self, value):
 *             self.opts.max_bytes_for_level_base = value             # <<<<<<<<<<<<<<
 * 
 *     property max_bytes_for_level_multiplier:
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_value); if (unlikely((__pyx_t_1 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 956, __pyx_L1_error)
  __pyx_v_self->opts->max_bytes_for_level_base = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":955
 *         def __get__(self):
 *             return self.opts.max_bytes_for_level_base
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.max_bytes_for_level_base = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.max_bytes_for_level_base.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":959
 * 
 *     property max_bytes_for_level_multiplier:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.max_bytes_for_level_multiplier
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_30max_bytes_for_level_multiplier_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_30max_bytes_for_level_multiplier_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_30max_bytes_for_level_multiplier___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_30max_bytes_for_level_multiplier___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":960
 *     property max_bytes_for_level_multiplier:
 *         def __get__(self):
 *             return self.opts.max_bytes_for_level_multiplier             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.max_bytes_for_level_multiplier = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->opts->max_bytes_for_level_multiplier); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 960, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":959
 * 
 *     property max_bytes_for_level_multiplier:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.max_bytes_for_level_multiplier
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.max_bytes_for_level_multiplier.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":961
 *         def __get__(self):
 *             return self.opts.max_bytes_for_level_multiplier
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.max_bytes_for_level_multiplier = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_30max_bytes_for_level_multiplier_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_30max_bytes_for_level_multiplier_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_30max_bytes_for_level_multiplier_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_30max_bytes_for_level_multiplier_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":962
 *             return self.opts.max_bytes_for_level_multiplier
 *         def __set__(self, value):
 *             self.opts.max_bytes_for_level_multiplier = value             # <<<<<<<<<<<<<<
 * 
 *     property max_bytes_for_level_multiplier_additional:
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 962, __pyx_L1_error)
  __pyx_v_self->opts->max_bytes_for_level_multiplier = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":961
 *         def __get__(self):
 *             return self.opts.max_bytes_for_level_multiplier
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.max_bytes_for_level_multiplier = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.max_bytes_for_level_multiplier.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":965
 * 
 *     property max_bytes_for_level_multiplier_additional:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.max_bytes_for_level_multiplier_additional
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_41max_bytes_for_level_multiplier_additional_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_41max_bytes_for_level_multiplier_additional_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_41max_bytes_for_level_multiplier_additional___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_41max_bytes_for_level_multiplier_additional___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":966
 *     property max_bytes_for_level_multiplier_additional:
 *         def __get__(self):
 *             return self.opts.max_bytes_for_level_multiplier_additional             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.max_bytes_for_level_multiplier_additional = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_vector_to_py_int(__pyx_v_self->opts->max_bytes_for_level_multiplier_additional); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 966, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":965
 * 
 *     property max_bytes_for_level_multiplier_additional:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.max_bytes_for_level_multiplier_additional
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.max_bytes_for_level_multiplier_additional.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":967
 *         def __get__(self):
 *             return self.opts.max_bytes_for_level_multiplier_additional
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.max_bytes_for_level_multiplier_additional = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_41max_bytes_for_level_multiplier_additional_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_41max_bytes_for_level_multiplier_additional_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_41max_bytes_for_level_multiplier_additional_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_41max_bytes_for_level_multiplier_additional_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  std::vector<int>  __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":968
 *             return self.opts.max_bytes_for_level_multiplier_additional
 *         def __set__(self, value):
 *             self.opts.max_bytes_for_level_multiplier_additional = value             # <<<<<<<<<<<<<<
 * 
 *     property use_fsync:
 */
  __pyx_t_1 = __pyx_convert_vector_from_py_int(__pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 968, __pyx_L1_error)
  __pyx_v_self->opts->max_bytes_for_level_multiplier_additional = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":967
 *         def __get__(self):
 *             return self.opts.max_bytes_for_level_multiplier_additional
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.max_bytes_for_level_multiplier_additional = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.max_bytes_for_level_multiplier_additional.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":971
 * 
 *     property use_fsync:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.use_fsync
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_9use_fsync_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_9use_fsync_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_9use_fsync___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_9use_fsync___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":972
 *     property use_fsync:
 *         def __get__(self):
 *             return self.opts.use_fsync             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.use_fsync = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->opts->use_fsync); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 972, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":971
 * 
 *     property use_fsync:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.use_fsync
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.use_fsync.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":973
 *         def __get__(self):
 *             return self.opts.use_fsync
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.use_fsync = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_9use_fsync_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_9use_fsync_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_9use_fsync_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_9use_fsync_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":974
 *             return self.opts.use_fsync
 *         def __set__(self, value):
 *             self.opts.use_fsync = value             # <<<<<<<<<<<<<<
 * 
 *     property db_log_dir:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 974, __pyx_L1_error)
  __pyx_v_self->opts->use_fsync = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":973
 *         def __get__(self):
 *             return self.opts.use_fsync
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.use_fsync = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.use_fsync.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":977
 * 
 *     property db_log_dir:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return string_to_path(self.opts.db_log_dir)
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_10db_log_dir_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_10db_log_dir_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_10db_log_dir___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_10db_log_dir___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":978
 *     property db_log_dir:
 *         def __get__(self):
 *             return string_to_path(self.opts.db_log_dir)             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.db_log_dir = path_to_string(value)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_7rocksdb_8_rocksdb_string_to_path(__pyx_v_self->opts->db_log_dir); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 978, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":977
 * 
 *     property db_log_dir:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return string_to_path(self.opts.db_log_dir)
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.db_log_dir.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":979
 *         def __get__(self):
 *             return string_to_path(self.opts.db_log_dir)
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.db_log_dir = path_to_string(value)
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_10db_log_dir_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_10db_log_dir_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_10db_log_dir_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_10db_log_dir_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":980
 *             return string_to_path(self.opts.db_log_dir)
 *         def __set__(self, value):
 *             self.opts.db_log_dir = path_to_string(value)             # <<<<<<<<<<<<<<
 * 
 *     property wal_dir:
 */
  __pyx_t_1 = __pyx_f_7rocksdb_8_rocksdb_path_to_string(__pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 980, __pyx_L1_error)
  __pyx_v_self->opts->db_log_dir = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":979
 *         def __get__(self):
 *             return string_to_path(self.opts.db_log_dir)
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.db_log_dir = path_to_string(value)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.db_log_dir.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":983
 * 
 *     property wal_dir:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return string_to_path(self.opts.wal_dir)
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_7wal_dir_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_7wal_dir_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_7wal_dir___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_7wal_dir___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":984
 *     property wal_dir:
 *         def __get__(self):
 *             return string_to_path(self.opts.wal_dir)             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.wal_dir = path_to_string(value)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_7rocksdb_8_rocksdb_string_to_path(__pyx_v_self->opts->wal_dir); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 984, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":983
 * 
 *     property wal_dir:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return string_to_path(self.opts.wal_dir)
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.wal_dir.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":985
 *         def __get__(self):
 *             return string_to_path(self.opts.wal_dir)
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.wal_dir = path_to_string(value)
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_7wal_dir_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_7wal_dir_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_7wal_dir_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_7wal_dir_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":986
 *             return string_to_path(self.opts.wal_dir)
 *         def __set__(self, value):
 *             self.opts.wal_dir = path_to_string(value)             # <<<<<<<<<<<<<<
 * 
 *     property delete_obsolete_files_period_micros:
 */
  __pyx_t_1 = __pyx_f_7rocksdb_8_rocksdb_path_to_string(__pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 986, __pyx_L1_error)
  __pyx_v_self->opts->wal_dir = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":985
 *         def __get__(self):
 *             return string_to_path(self.opts.wal_dir)
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.wal_dir = path_to_string(value)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.wal_dir.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":989
 * 
 *     property delete_obsolete_files_period_micros:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.delete_obsolete_files_period_micros
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_35delete_obsolete_files_period_micros_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_35delete_obsolete_files_period_micros_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_35delete_obsolete_files_period_micros___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_35delete_obsolete_files_period_micros___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":990
 *     property delete_obsolete_files_period_micros:
 *         def __get__(self):
 *             return self.opts.delete_obsolete_files_period_micros             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.delete_obsolete_files_period_micros = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_uint64_t(__pyx_v_self->opts->delete_obsolete_files_period_micros); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 990, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":989
 * 
 *     property delete_obsolete_files_period_micros:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.delete_obsolete_files_period_micros
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.delete_obsolete_files_period_micros.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":991
 *         def __get__(self):
 *             return self.opts.delete_obsolete_files_period_micros
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.delete_obsolete_files_period_micros = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_35delete_obsolete_files_period_micros_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_35delete_obsolete_files_period_micros_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_35delete_obsolete_files_period_micros_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_35delete_obsolete_files_period_micros_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  uint64_t __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":992
 *             return self.opts.delete_obsolete_files_period_micros
 *         def __set__(self, value):
 *             self.opts.delete_obsolete_files_period_micros = value             # <<<<<<<<<<<<<<
 * 
 *     property max_background_compactions:
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_value); if (unlikely((__pyx_t_1 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 992, __pyx_L1_error)
  __pyx_v_self->opts->delete_obsolete_files_period_micros = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":991
 *         def __get__(self):
 *             return self.opts.delete_obsolete_files_period_micros
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.delete_obsolete_files_period_micros = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.delete_obsolete_files_period_micros.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":995
 * 
 *     property max_background_compactions:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.max_background_compactions
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_26max_background_compactions_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_26max_background_compactions_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_26max_background_compactions___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_26max_background_compactions___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":996
 *     property max_background_compactions:
 *         def __get__(self):
 *             return self.opts.max_background_compactions             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.max_background_compactions = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->opts->max_background_compactions); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 996, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":995
 * 
 *     property max_background_compactions:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.max_background_compactions
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.max_background_compactions.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":997
 *         def __get__(self):
 *             return self.opts.max_background_compactions
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.max_background_compactions = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_26max_background_compactions_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_26max_background_compactions_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_26max_background_compactions_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_26max_background_compactions_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":998
 *             return self.opts.max_background_compactions
 *         def __set__(self, value):
 *             self.opts.max_background_compactions = value             # <<<<<<<<<<<<<<
 * 
 *     property max_background_flushes:
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 998, __pyx_L1_error)
  __pyx_v_self->opts->max_background_compactions = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":997
 *         def __get__(self):
 *             return self.opts.max_background_compactions
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.max_background_compactions = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.max_background_compactions.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1001
 * 
 *     property max_background_flushes:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.max_background_flushes
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_22max_background_flushes_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_22max_background_flushes_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_22max_background_flushes___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_22max_background_flushes___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1002
 *     property max_background_flushes:
 *         def __get__(self):
 *             return self.opts.max_background_flushes             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.max_background_flushes = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->opts->max_background_flushes); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1002, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1001
 * 
 *     property max_background_flushes:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.max_background_flushes
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.max_background_flushes.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1003
 *         def __get__(self):
 *             return self.opts.max_background_flushes
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.max_background_flushes = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_22max_background_flushes_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_22max_background_flushes_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_22max_background_flushes_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_22max_background_flushes_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1004
 *             return self.opts.max_background_flushes
 *         def __set__(self, value):
 *             self.opts.max_background_flushes = value             # <<<<<<<<<<<<<<
 * 
 *     property max_log_file_size:
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1004, __pyx_L1_error)
  __pyx_v_self->opts->max_background_flushes = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1003
 *         def __get__(self):
 *             return self.opts.max_background_flushes
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.max_background_flushes = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.max_background_flushes.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1007
 * 
 *     property max_log_file_size:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.max_log_file_size
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_17max_log_file_size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_17max_log_file_size_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_17max_log_file_size___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_17max_log_file_size___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1008
 *     property max_log_file_size:
 *         def __get__(self):
 *             return self.opts.max_log_file_size             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.max_log_file_size = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->opts->max_log_file_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1008, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1007
 * 
 *     property max_log_file_size:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.max_log_file_size
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.max_log_file_size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1009
 *         def __get__(self):
 *             return self.opts.max_log_file_size
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.max_log_file_size = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_17max_log_file_size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_17max_log_file_size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_17max_log_file_size_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_17max_log_file_size_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1010
 *             return self.opts.max_log_file_size
 *         def __set__(self, value):
 *             self.opts.max_log_file_size = value             # <<<<<<<<<<<<<<
 * 
 *     property log_file_time_to_roll:
 */
  __pyx_t_1 = __Pyx_PyInt_As_size_t(__pyx_v_value); if (unlikely((__pyx_t_1 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1010, __pyx_L1_error)
  __pyx_v_self->opts->max_log_file_size = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1009
 *         def __get__(self):
 *             return self.opts.max_log_file_size
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.max_log_file_size = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.max_log_file_size.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1013
 * 
 *     property log_file_time_to_roll:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.log_file_time_to_roll
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_21log_file_time_to_roll_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_21log_file_time_to_roll_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_21log_file_time_to_roll___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_21log_file_time_to_roll___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1014
 *     property log_file_time_to_roll:
 *         def __get__(self):
 *             return self.opts.log_file_time_to_roll             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.log_file_time_to_roll = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->opts->log_file_time_to_roll); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1014, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1013
 * 
 *     property log_file_time_to_roll:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.log_file_time_to_roll
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.log_file_time_to_roll.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1015
 *         def __get__(self):
 *             return self.opts.log_file_time_to_roll
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.log_file_time_to_roll = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_21log_file_time_to_roll_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_21log_file_time_to_roll_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_21log_file_time_to_roll_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_21log_file_time_to_roll_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1016
 *             return self.opts.log_file_time_to_roll
 *         def __set__(self, value):
 *             self.opts.log_file_time_to_roll = value             # <<<<<<<<<<<<<<
 * 
 *     property keep_log_file_num:
 */
  __pyx_t_1 = __Pyx_PyInt_As_size_t(__pyx_v_value); if (unlikely((__pyx_t_1 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1016, __pyx_L1_error)
  __pyx_v_self->opts->log_file_time_to_roll = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1015
 *         def __get__(self):
 *             return self.opts.log_file_time_to_roll
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.log_file_time_to_roll = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.log_file_time_to_roll.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1019
 * 
 *     property keep_log_file_num:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.keep_log_file_num
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_17keep_log_file_num_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_17keep_log_file_num_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_17keep_log_file_num___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_17keep_log_file_num___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1020
 *     property keep_log_file_num:
 *         def __get__(self):
 *             return self.opts.keep_log_file_num             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.keep_log_file_num = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->opts->keep_log_file_num); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1020, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1019
 * 
 *     property keep_log_file_num:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.keep_log_file_num
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.keep_log_file_num.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1021
 *         def __get__(self):
 *             return self.opts.keep_log_file_num
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.keep_log_file_num = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_17keep_log_file_num_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_17keep_log_file_num_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_17keep_log_file_num_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_17keep_log_file_num_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1022
 *             return self.opts.keep_log_file_num
 *         def __set__(self, value):
 *             self.opts.keep_log_file_num = value             # <<<<<<<<<<<<<<
 * 
 *     property soft_rate_limit:
 */
  __pyx_t_1 = __Pyx_PyInt_As_size_t(__pyx_v_value); if (unlikely((__pyx_t_1 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1022, __pyx_L1_error)
  __pyx_v_self->opts->keep_log_file_num = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1021
 *         def __get__(self):
 *             return self.opts.keep_log_file_num
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.keep_log_file_num = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.keep_log_file_num.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1025
 * 
 *     property soft_rate_limit:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.soft_rate_limit
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_15soft_rate_limit_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_15soft_rate_limit_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_15soft_rate_limit___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_15soft_rate_limit___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1026
 *     property soft_rate_limit:
 *         def __get__(self):
 *             return self.opts.soft_rate_limit             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.soft_rate_limit = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->opts->soft_rate_limit); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1026, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1025
 * 
 *     property soft_rate_limit:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.soft_rate_limit
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.soft_rate_limit.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1027
 *         def __get__(self):
 *             return self.opts.soft_rate_limit
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.soft_rate_limit = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_15soft_rate_limit_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_15soft_rate_limit_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_15soft_rate_limit_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_15soft_rate_limit_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1028
 *             return self.opts.soft_rate_limit
 *         def __set__(self, value):
 *             self.opts.soft_rate_limit = value             # <<<<<<<<<<<<<<
 * 
 *     property hard_rate_limit:
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1028, __pyx_L1_error)
  __pyx_v_self->opts->soft_rate_limit = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1027
 *         def __get__(self):
 *             return self.opts.soft_rate_limit
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.soft_rate_limit = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.soft_rate_limit.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1031
 * 
 *     property hard_rate_limit:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.hard_rate_limit
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_15hard_rate_limit_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_15hard_rate_limit_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_15hard_rate_limit___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_15hard_rate_limit___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1032
 *     property hard_rate_limit:
 *         def __get__(self):
 *             return self.opts.hard_rate_limit             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.hard_rate_limit = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->opts->hard_rate_limit); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1032, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1031
 * 
 *     property hard_rate_limit:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.hard_rate_limit
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.hard_rate_limit.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1033
 *         def __get__(self):
 *             return self.opts.hard_rate_limit
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.hard_rate_limit = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_15hard_rate_limit_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_15hard_rate_limit_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_15hard_rate_limit_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_15hard_rate_limit_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1034
 *             return self.opts.hard_rate_limit
 *         def __set__(self, value):
 *             self.opts.hard_rate_limit = value             # <<<<<<<<<<<<<<
 * 
 *     property rate_limit_delay_max_milliseconds:
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1034, __pyx_L1_error)
  __pyx_v_self->opts->hard_rate_limit = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1033
 *         def __get__(self):
 *             return self.opts.hard_rate_limit
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.hard_rate_limit = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.hard_rate_limit.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1037
 * 
 *     property rate_limit_delay_max_milliseconds:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.rate_limit_delay_max_milliseconds
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_33rate_limit_delay_max_milliseconds_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_33rate_limit_delay_max_milliseconds_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_33rate_limit_delay_max_milliseconds___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_33rate_limit_delay_max_milliseconds___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1038
 *     property rate_limit_delay_max_milliseconds:
 *         def __get__(self):
 *             return self.opts.rate_limit_delay_max_milliseconds             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.rate_limit_delay_max_milliseconds = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->opts->rate_limit_delay_max_milliseconds); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1038, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1037
 * 
 *     property rate_limit_delay_max_milliseconds:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.rate_limit_delay_max_milliseconds
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.rate_limit_delay_max_milliseconds.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1039
 *         def __get__(self):
 *             return self.opts.rate_limit_delay_max_milliseconds
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.rate_limit_delay_max_milliseconds = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_33rate_limit_delay_max_milliseconds_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_33rate_limit_delay_max_milliseconds_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_33rate_limit_delay_max_milliseconds_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_33rate_limit_delay_max_milliseconds_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  unsigned int __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1040
 *             return self.opts.rate_limit_delay_max_milliseconds
 *         def __set__(self, value):
 *             self.opts.rate_limit_delay_max_milliseconds = value             # <<<<<<<<<<<<<<
 * 
 *     property max_manifest_file_size:
 */
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1040, __pyx_L1_error)
  __pyx_v_self->opts->rate_limit_delay_max_milliseconds = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1039
 *         def __get__(self):
 *             return self.opts.rate_limit_delay_max_milliseconds
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.rate_limit_delay_max_milliseconds = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.rate_limit_delay_max_milliseconds.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1043
 * 
 *     property max_manifest_file_size:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.max_manifest_file_size
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_22max_manifest_file_size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_22max_manifest_file_size_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_22max_manifest_file_size___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_22max_manifest_file_size___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1044
 *     property max_manifest_file_size:
 *         def __get__(self):
 *             return self.opts.max_manifest_file_size             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.max_manifest_file_size = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_uint64_t(__pyx_v_self->opts->max_manifest_file_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1044, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1043
 * 
 *     property max_manifest_file_size:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.max_manifest_file_size
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.max_manifest_file_size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1045
 *         def __get__(self):
 *             return self.opts.max_manifest_file_size
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.max_manifest_file_size = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_22max_manifest_file_size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_22max_manifest_file_size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_22max_manifest_file_size_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_22max_manifest_file_size_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  uint64_t __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1046
 *             return self.opts.max_manifest_file_size
 *         def __set__(self, value):
 *             self.opts.max_manifest_file_size = value             # <<<<<<<<<<<<<<
 * 
 *     property table_cache_numshardbits:
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_value); if (unlikely((__pyx_t_1 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1046, __pyx_L1_error)
  __pyx_v_self->opts->max_manifest_file_size = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1045
 *         def __get__(self):
 *             return self.opts.max_manifest_file_size
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.max_manifest_file_size = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.max_manifest_file_size.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1049
 * 
 *     property table_cache_numshardbits:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.table_cache_numshardbits
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_24table_cache_numshardbits_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_24table_cache_numshardbits_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_24table_cache_numshardbits___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_24table_cache_numshardbits___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1050
 *     property table_cache_numshardbits:
 *         def __get__(self):
 *             return self.opts.table_cache_numshardbits             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.table_cache_numshardbits = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->opts->table_cache_numshardbits); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1050, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1049
 * 
 *     property table_cache_numshardbits:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.table_cache_numshardbits
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.table_cache_numshardbits.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1051
 *         def __get__(self):
 *             return self.opts.table_cache_numshardbits
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.table_cache_numshardbits = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_24table_cache_numshardbits_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_24table_cache_numshardbits_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_24table_cache_numshardbits_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_24table_cache_numshardbits_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1052
 *             return self.opts.table_cache_numshardbits
 *         def __set__(self, value):
 *             self.opts.table_cache_numshardbits = value             # <<<<<<<<<<<<<<
 * 
 *     property arena_block_size:
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1052, __pyx_L1_error)
  __pyx_v_self->opts->table_cache_numshardbits = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1051
 *         def __get__(self):
 *             return self.opts.table_cache_numshardbits
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.table_cache_numshardbits = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.table_cache_numshardbits.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1055
 * 
 *     property arena_block_size:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.arena_block_size
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_16arena_block_size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_16arena_block_size_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_16arena_block_size___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_16arena_block_size___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1056
 *     property arena_block_size:
 *         def __get__(self):
 *             return self.opts.arena_block_size             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.arena_block_size = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->opts->arena_block_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1056, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1055
 * 
 *     property arena_block_size:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.arena_block_size
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.arena_block_size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1057
 *         def __get__(self):
 *             return self.opts.arena_block_size
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.arena_block_size = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_16arena_block_size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_16arena_block_size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_16arena_block_size_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_16arena_block_size_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1058
 *             return self.opts.arena_block_size
 *         def __set__(self, value):
 *             self.opts.arena_block_size = value             # <<<<<<<<<<<<<<
 * 
 *     property disable_auto_compactions:
 */
  __pyx_t_1 = __Pyx_PyInt_As_size_t(__pyx_v_value); if (unlikely((__pyx_t_1 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1058, __pyx_L1_error)
  __pyx_v_self->opts->arena_block_size = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1057
 *         def __get__(self):
 *             return self.opts.arena_block_size
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.arena_block_size = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.arena_block_size.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1061
 * 
 *     property disable_auto_compactions:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.disable_auto_compactions
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_24disable_auto_compactions_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_24disable_auto_compactions_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_24disable_auto_compactions___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_24disable_auto_compactions___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1062
 *     property disable_auto_compactions:
 *         def __get__(self):
 *             return self.opts.disable_auto_compactions             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.disable_auto_compactions = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->opts->disable_auto_compactions); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1062, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1061
 * 
 *     property disable_auto_compactions:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.disable_auto_compactions
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.disable_auto_compactions.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1063
 *         def __get__(self):
 *             return self.opts.disable_auto_compactions
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.disable_auto_compactions = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_24disable_auto_compactions_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_24disable_auto_compactions_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_24disable_auto_compactions_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_24disable_auto_compactions_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1064
 *             return self.opts.disable_auto_compactions
 *         def __set__(self, value):
 *             self.opts.disable_auto_compactions = value             # <<<<<<<<<<<<<<
 * 
 *     property wal_ttl_seconds:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1064, __pyx_L1_error)
  __pyx_v_self->opts->disable_auto_compactions = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1063
 *         def __get__(self):
 *             return self.opts.disable_auto_compactions
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.disable_auto_compactions = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.disable_auto_compactions.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1067
 * 
 *     property wal_ttl_seconds:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.WAL_ttl_seconds
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_15wal_ttl_seconds_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_15wal_ttl_seconds_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_15wal_ttl_seconds___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_15wal_ttl_seconds___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1068
 *     property wal_ttl_seconds:
 *         def __get__(self):
 *             return self.opts.WAL_ttl_seconds             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.WAL_ttl_seconds = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_uint64_t(__pyx_v_self->opts->WAL_ttl_seconds); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1068, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1067
 * 
 *     property wal_ttl_seconds:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.WAL_ttl_seconds
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.wal_ttl_seconds.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1069
 *         def __get__(self):
 *             return self.opts.WAL_ttl_seconds
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.WAL_ttl_seconds = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_15wal_ttl_seconds_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_15wal_ttl_seconds_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_15wal_ttl_seconds_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_15wal_ttl_seconds_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  uint64_t __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1070
 *             return self.opts.WAL_ttl_seconds
 *         def __set__(self, value):
 *             self.opts.WAL_ttl_seconds = value             # <<<<<<<<<<<<<<
 * 
 *     property wal_size_limit_mb:
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_value); if (unlikely((__pyx_t_1 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1070, __pyx_L1_error)
  __pyx_v_self->opts->WAL_ttl_seconds = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1069
 *         def __get__(self):
 *             return self.opts.WAL_ttl_seconds
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.WAL_ttl_seconds = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.wal_ttl_seconds.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1073
 * 
 *     property wal_size_limit_mb:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.WAL_size_limit_MB
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_17wal_size_limit_mb_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_17wal_size_limit_mb_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_17wal_size_limit_mb___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_17wal_size_limit_mb___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1074
 *     property wal_size_limit_mb:
 *         def __get__(self):
 *             return self.opts.WAL_size_limit_MB             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.WAL_size_limit_MB = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_uint64_t(__pyx_v_self->opts->WAL_size_limit_MB); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1074, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1073
 * 
 *     property wal_size_limit_mb:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.WAL_size_limit_MB
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.wal_size_limit_mb.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1075
 *         def __get__(self):
 *             return self.opts.WAL_size_limit_MB
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.WAL_size_limit_MB = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_17wal_size_limit_mb_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_17wal_size_limit_mb_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_17wal_size_limit_mb_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_17wal_size_limit_mb_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  uint64_t __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1076
 *             return self.opts.WAL_size_limit_MB
 *         def __set__(self, value):
 *             self.opts.WAL_size_limit_MB = value             # <<<<<<<<<<<<<<
 * 
 *     property manifest_preallocation_size:
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_value); if (unlikely((__pyx_t_1 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1076, __pyx_L1_error)
  __pyx_v_self->opts->WAL_size_limit_MB = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1075
 *         def __get__(self):
 *             return self.opts.WAL_size_limit_MB
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.WAL_size_limit_MB = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.wal_size_limit_mb.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1079
 * 
 *     property manifest_preallocation_size:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.manifest_preallocation_size
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_27manifest_preallocation_size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_27manifest_preallocation_size_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_27manifest_preallocation_size___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_27manifest_preallocation_size___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1080
 *     property manifest_preallocation_size:
 *         def __get__(self):
 *             return self.opts.manifest_preallocation_size             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.manifest_preallocation_size = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->opts->manifest_preallocation_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1080, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1079
 * 
 *     property manifest_preallocation_size:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.manifest_preallocation_size
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.manifest_preallocation_size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1081
 *         def __get__(self):
 *             return self.opts.manifest_preallocation_size
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.manifest_preallocation_size = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_27manifest_preallocation_size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_27manifest_preallocation_size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_27manifest_preallocation_size_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_27manifest_preallocation_size_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1082
 *             return self.opts.manifest_preallocation_size
 *         def __set__(self, value):
 *             self.opts.manifest_preallocation_size = value             # <<<<<<<<<<<<<<
 * 
 *     property purge_redundant_kvs_while_flush:
 */
  __pyx_t_1 = __Pyx_PyInt_As_size_t(__pyx_v_value); if (unlikely((__pyx_t_1 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1082, __pyx_L1_error)
  __pyx_v_self->opts->manifest_preallocation_size = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1081
 *         def __get__(self):
 *             return self.opts.manifest_preallocation_size
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.manifest_preallocation_size = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.manifest_preallocation_size.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1085
 * 
 *     property purge_redundant_kvs_while_flush:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.purge_redundant_kvs_while_flush
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_31purge_redundant_kvs_while_flush_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_31purge_redundant_kvs_while_flush_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_31purge_redundant_kvs_while_flush___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_31purge_redundant_kvs_while_flush___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1086
 *     property purge_redundant_kvs_while_flush:
 *         def __get__(self):
 *             return self.opts.purge_redundant_kvs_while_flush             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.purge_redundant_kvs_while_flush = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->opts->purge_redundant_kvs_while_flush); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1086, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1085
 * 
 *     property purge_redundant_kvs_while_flush:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.purge_redundant_kvs_while_flush
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.purge_redundant_kvs_while_flush.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1087
 *         def __get__(self):
 *             return self.opts.purge_redundant_kvs_while_flush
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.purge_redundant_kvs_while_flush = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_31purge_redundant_kvs_while_flush_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_31purge_redundant_kvs_while_flush_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_31purge_redundant_kvs_while_flush_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_31purge_redundant_kvs_while_flush_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1088
 *             return self.opts.purge_redundant_kvs_while_flush
 *         def __set__(self, value):
 *             self.opts.purge_redundant_kvs_while_flush = value             # <<<<<<<<<<<<<<
 * 
 *     # FIXME: remove to util/options_helper.h
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1088, __pyx_L1_error)
  __pyx_v_self->opts->purge_redundant_kvs_while_flush = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1087
 *         def __get__(self):
 *             return self.opts.purge_redundant_kvs_while_flush
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.purge_redundant_kvs_while_flush = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.purge_redundant_kvs_while_flush.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1098
 * 
 *     property enable_write_thread_adaptive_yield:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.enable_write_thread_adaptive_yield
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_34enable_write_thread_adaptive_yield_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_34enable_write_thread_adaptive_yield_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_34enable_write_thread_adaptive_yield___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_34enable_write_thread_adaptive_yield___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1099
 *     property enable_write_thread_adaptive_yield:
 *         def __get__(self):
 *             return self.opts.enable_write_thread_adaptive_yield             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.enable_write_thread_adaptive_yield = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->opts->enable_write_thread_adaptive_yield); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1099, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1098
 * 
 *     property enable_write_thread_adaptive_yield:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.enable_write_thread_adaptive_yield
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.enable_write_thread_adaptive_yield.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1100
 *         def __get__(self):
 *             return self.opts.enable_write_thread_adaptive_yield
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.enable_write_thread_adaptive_yield = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_34enable_write_thread_adaptive_yield_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_34enable_write_thread_adaptive_yield_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_34enable_write_thread_adaptive_yield_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_34enable_write_thread_adaptive_yield_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1101
 *             return self.opts.enable_write_thread_adaptive_yield
 *         def __set__(self, value):
 *             self.opts.enable_write_thread_adaptive_yield = value             # <<<<<<<<<<<<<<
 * 
 *     property allow_concurrent_memtable_write:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1101, __pyx_L1_error)
  __pyx_v_self->opts->enable_write_thread_adaptive_yield = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1100
 *         def __get__(self):
 *             return self.opts.enable_write_thread_adaptive_yield
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.enable_write_thread_adaptive_yield = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.enable_write_thread_adaptive_yield.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1104
 * 
 *     property allow_concurrent_memtable_write:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.allow_concurrent_memtable_write
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_31allow_concurrent_memtable_write_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_31allow_concurrent_memtable_write_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_31allow_concurrent_memtable_write___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_31allow_concurrent_memtable_write___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1105
 *     property allow_concurrent_memtable_write:
 *         def __get__(self):
 *             return self.opts.allow_concurrent_memtable_write             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.allow_concurrent_memtable_write = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->opts->allow_concurrent_memtable_write); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1104
 * 
 *     property allow_concurrent_memtable_write:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.allow_concurrent_memtable_write
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.allow_concurrent_memtable_write.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1106
 *         def __get__(self):
 *             return self.opts.allow_concurrent_memtable_write
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.allow_concurrent_memtable_write = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_31allow_concurrent_memtable_write_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_31allow_concurrent_memtable_write_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_31allow_concurrent_memtable_write_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_31allow_concurrent_memtable_write_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1107
 *             return self.opts.allow_concurrent_memtable_write
 *         def __set__(self, value):
 *             self.opts.allow_concurrent_memtable_write = value             # <<<<<<<<<<<<<<
 * 
 *     property allow_mmap_reads:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1107, __pyx_L1_error)
  __pyx_v_self->opts->allow_concurrent_memtable_write = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1106
 *         def __get__(self):
 *             return self.opts.allow_concurrent_memtable_write
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.allow_concurrent_memtable_write = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.allow_concurrent_memtable_write.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1110
 * 
 *     property allow_mmap_reads:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.allow_mmap_reads
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_16allow_mmap_reads_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_16allow_mmap_reads_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_16allow_mmap_reads___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_16allow_mmap_reads___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1111
 *     property allow_mmap_reads:
 *         def __get__(self):
 *             return self.opts.allow_mmap_reads             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.allow_mmap_reads = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->opts->allow_mmap_reads); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1110
 * 
 *     property allow_mmap_reads:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.allow_mmap_reads
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.allow_mmap_reads.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1112
 *         def __get__(self):
 *             return self.opts.allow_mmap_reads
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.allow_mmap_reads = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_16allow_mmap_reads_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_16allow_mmap_reads_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_16allow_mmap_reads_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_16allow_mmap_reads_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1113
 *             return self.opts.allow_mmap_reads
 *         def __set__(self, value):
 *             self.opts.allow_mmap_reads = value             # <<<<<<<<<<<<<<
 * 
 *     property allow_mmap_writes:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1113, __pyx_L1_error)
  __pyx_v_self->opts->allow_mmap_reads = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1112
 *         def __get__(self):
 *             return self.opts.allow_mmap_reads
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.allow_mmap_reads = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.allow_mmap_reads.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1116
 * 
 *     property allow_mmap_writes:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.allow_mmap_writes
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_17allow_mmap_writes_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_17allow_mmap_writes_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_17allow_mmap_writes___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_17allow_mmap_writes___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1117
 *     property allow_mmap_writes:
 *         def __get__(self):
 *             return self.opts.allow_mmap_writes             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.allow_mmap_writes = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->opts->allow_mmap_writes); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1116
 * 
 *     property allow_mmap_writes:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.allow_mmap_writes
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.allow_mmap_writes.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1118
 *         def __get__(self):
 *             return self.opts.allow_mmap_writes
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.allow_mmap_writes = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_17allow_mmap_writes_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_17allow_mmap_writes_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_17allow_mmap_writes_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_17allow_mmap_writes_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1119
 *             return self.opts.allow_mmap_writes
 *         def __set__(self, value):
 *             self.opts.allow_mmap_writes = value             # <<<<<<<<<<<<<<
 * 
 *     property is_fd_close_on_exec:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1119, __pyx_L1_error)
  __pyx_v_self->opts->allow_mmap_writes = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1118
 *         def __get__(self):
 *             return self.opts.allow_mmap_writes
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.allow_mmap_writes = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.allow_mmap_writes.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1122
 * 
 *     property is_fd_close_on_exec:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.is_fd_close_on_exec
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_19is_fd_close_on_exec_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_19is_fd_close_on_exec_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_19is_fd_close_on_exec___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_19is_fd_close_on_exec___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1123
 *     property is_fd_close_on_exec:
 *         def __get__(self):
 *             return self.opts.is_fd_close_on_exec             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.is_fd_close_on_exec = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->opts->is_fd_close_on_exec); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1122
 * 
 *     property is_fd_close_on_exec:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.is_fd_close_on_exec
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.is_fd_close_on_exec.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1124
 *         def __get__(self):
 *             return self.opts.is_fd_close_on_exec
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.is_fd_close_on_exec = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_19is_fd_close_on_exec_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_19is_fd_close_on_exec_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_19is_fd_close_on_exec_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_19is_fd_close_on_exec_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1125
 *             return self.opts.is_fd_close_on_exec
 *         def __set__(self, value):
 *             self.opts.is_fd_close_on_exec = value             # <<<<<<<<<<<<<<
 * 
 *     property skip_log_error_on_recovery:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1125, __pyx_L1_error)
  __pyx_v_self->opts->is_fd_close_on_exec = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1124
 *         def __get__(self):
 *             return self.opts.is_fd_close_on_exec
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.is_fd_close_on_exec = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.is_fd_close_on_exec.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1128
 * 
 *     property skip_log_error_on_recovery:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.skip_log_error_on_recovery
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_26skip_log_error_on_recovery_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_26skip_log_error_on_recovery_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_26skip_log_error_on_recovery___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_26skip_log_error_on_recovery___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1129
 *     property skip_log_error_on_recovery:
 *         def __get__(self):
 *             return self.opts.skip_log_error_on_recovery             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.skip_log_error_on_recovery = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->opts->skip_log_error_on_recovery); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1128
 * 
 *     property skip_log_error_on_recovery:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.skip_log_error_on_recovery
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.skip_log_error_on_recovery.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1130
 *         def __get__(self):
 *             return self.opts.skip_log_error_on_recovery
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.skip_log_error_on_recovery = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_26skip_log_error_on_recovery_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_26skip_log_error_on_recovery_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_26skip_log_error_on_recovery_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_26skip_log_error_on_recovery_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1131
 *             return self.opts.skip_log_error_on_recovery
 *         def __set__(self, value):
 *             self.opts.skip_log_error_on_recovery = value             # <<<<<<<<<<<<<<
 * 
 *     property stats_dump_period_sec:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1131, __pyx_L1_error)
  __pyx_v_self->opts->skip_log_error_on_recovery = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1130
 *         def __get__(self):
 *             return self.opts.skip_log_error_on_recovery
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.skip_log_error_on_recovery = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.skip_log_error_on_recovery.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1134
 * 
 *     property stats_dump_period_sec:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.stats_dump_period_sec
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_21stats_dump_period_sec_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_21stats_dump_period_sec_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_21stats_dump_period_sec___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_21stats_dump_period_sec___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1135
 *     property stats_dump_period_sec:
 *         def __get__(self):
 *             return self.opts.stats_dump_period_sec             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.stats_dump_period_sec = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->opts->stats_dump_period_sec); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1134
 * 
 *     property stats_dump_period_sec:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.stats_dump_period_sec
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.stats_dump_period_sec.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1136
 *         def __get__(self):
 *             return self.opts.stats_dump_period_sec
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.stats_dump_period_sec = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_21stats_dump_period_sec_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_21stats_dump_period_sec_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_21stats_dump_period_sec_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_21stats_dump_period_sec_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  unsigned int __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1137
 *             return self.opts.stats_dump_period_sec
 *         def __set__(self, value):
 *             self.opts.stats_dump_period_sec = value             # <<<<<<<<<<<<<<
 * 
 *     property advise_random_on_open:
 */
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1137, __pyx_L1_error)
  __pyx_v_self->opts->stats_dump_period_sec = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1136
 *         def __get__(self):
 *             return self.opts.stats_dump_period_sec
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.stats_dump_period_sec = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.stats_dump_period_sec.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1140
 * 
 *     property advise_random_on_open:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.advise_random_on_open
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_21advise_random_on_open_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_21advise_random_on_open_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_21advise_random_on_open___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_21advise_random_on_open___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1141
 *     property advise_random_on_open:
 *         def __get__(self):
 *             return self.opts.advise_random_on_open             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.advise_random_on_open = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->opts->advise_random_on_open); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1140
 * 
 *     property advise_random_on_open:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.advise_random_on_open
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.advise_random_on_open.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1142
 *         def __get__(self):
 *             return self.opts.advise_random_on_open
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.advise_random_on_open = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_21advise_random_on_open_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_21advise_random_on_open_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_21advise_random_on_open_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_21advise_random_on_open_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1143
 *             return self.opts.advise_random_on_open
 *         def __set__(self, value):
 *             self.opts.advise_random_on_open = value             # <<<<<<<<<<<<<<
 * 
 *     property use_adaptive_mutex:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1143, __pyx_L1_error)
  __pyx_v_self->opts->advise_random_on_open = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1142
 *         def __get__(self):
 *             return self.opts.advise_random_on_open
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.advise_random_on_open = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.advise_random_on_open.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1146
 * 
 *     property use_adaptive_mutex:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.use_adaptive_mutex
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_18use_adaptive_mutex_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_18use_adaptive_mutex_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_18use_adaptive_mutex___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_18use_adaptive_mutex___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1147
 *     property use_adaptive_mutex:
 *         def __get__(self):
 *             return self.opts.use_adaptive_mutex             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.use_adaptive_mutex = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->opts->use_adaptive_mutex); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1146
 * 
 *     property use_adaptive_mutex:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.use_adaptive_mutex
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.use_adaptive_mutex.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1148
 *         def __get__(self):
 *             return self.opts.use_adaptive_mutex
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.use_adaptive_mutex = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_18use_adaptive_mutex_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_18use_adaptive_mutex_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_18use_adaptive_mutex_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_18use_adaptive_mutex_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1149
 *             return self.opts.use_adaptive_mutex
 *         def __set__(self, value):
 *             self.opts.use_adaptive_mutex = value             # <<<<<<<<<<<<<<
 * 
 *     property bytes_per_sync:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1149, __pyx_L1_error)
  __pyx_v_self->opts->use_adaptive_mutex = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1148
 *         def __get__(self):
 *             return self.opts.use_adaptive_mutex
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.use_adaptive_mutex = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.use_adaptive_mutex.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1152
 * 
 *     property bytes_per_sync:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.bytes_per_sync
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_14bytes_per_sync_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_14bytes_per_sync_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_14bytes_per_sync___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_14bytes_per_sync___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1153
 *     property bytes_per_sync:
 *         def __get__(self):
 *             return self.opts.bytes_per_sync             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.bytes_per_sync = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_uint64_t(__pyx_v_self->opts->bytes_per_sync); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1152
 * 
 *     property bytes_per_sync:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.bytes_per_sync
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.bytes_per_sync.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1154
 *         def __get__(self):
 *             return self.opts.bytes_per_sync
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.bytes_per_sync = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_14bytes_per_sync_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_14bytes_per_sync_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_14bytes_per_sync_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_14bytes_per_sync_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  uint64_t __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1155
 *             return self.opts.bytes_per_sync
 *         def __set__(self, value):
 *             self.opts.bytes_per_sync = value             # <<<<<<<<<<<<<<
 * 
 *     property compaction_style:
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_value); if (unlikely((__pyx_t_1 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1155, __pyx_L1_error)
  __pyx_v_self->opts->bytes_per_sync = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1154
 *         def __get__(self):
 *             return self.opts.bytes_per_sync
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.bytes_per_sync = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.bytes_per_sync.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1158
 * 
 *     property compaction_style:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self.opts.compaction_style == kCompactionStyleLevel:
 *                 return 'level'
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_16compaction_style_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_16compaction_style_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_16compaction_style___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_16compaction_style___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1159
 *     property compaction_style:
 *         def __get__(self):
 *             if self.opts.compaction_style == kCompactionStyleLevel:             # <<<<<<<<<<<<<<
 *                 return 'level'
 *             if self.opts.compaction_style == kCompactionStyleUniversal:
 */
  __pyx_t_1 = ((__pyx_v_self->opts->compaction_style == rocksdb::kCompactionStyleLevel) != 0);
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":1160
 *         def __get__(self):
 *             if self.opts.compaction_style == kCompactionStyleLevel:
 *                 return 'level'             # <<<<<<<<<<<<<<
 *             if self.opts.compaction_style == kCompactionStyleUniversal:
 *                 return 'universal'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_level);
    __pyx_r = __pyx_n_s_level;
    goto __pyx_L0;

    /* "rocksdb/_rocksdb.pyx":1159
 *     property compaction_style:
 *         def __get__(self):
 *             if self.opts.compaction_style == kCompactionStyleLevel:             # <<<<<<<<<<<<<<
 *                 return 'level'
 *             if self.opts.compaction_style == kCompactionStyleUniversal:
 */
  }

  /* "rocksdb/_rocksdb.pyx":1161
 *             if self.opts.compaction_style == kCompactionStyleLevel:
 *                 return 'level'
 *             if self.opts.compaction_style == kCompactionStyleUniversal:             # <<<<<<<<<<<<<<
 *                 return 'universal'
 *             if self.opts.compaction_style == kCompactionStyleFIFO:
 */
  __pyx_t_1 = ((__pyx_v_self->opts->compaction_style == rocksdb::kCompactionStyleUniversal) != 0);
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":1162
 *                 return 'level'
 *             if self.opts.compaction_style == kCompactionStyleUniversal:
 *                 return 'universal'             # <<<<<<<<<<<<<<
 *             if self.opts.compaction_style == kCompactionStyleFIFO:
 *                 return 'fifo'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_universal);
    __pyx_r = __pyx_n_s_universal;
    goto __pyx_L0;

    /* "rocksdb/_rocksdb.pyx":1161
 *             if self.opts.compaction_style == kCompactionStyleLevel:
 *                 return 'level'
 *             if self.opts.compaction_style == kCompactionStyleUniversal:             # <<<<<<<<<<<<<<
 *                 return 'universal'
 *             if self.opts.compaction_style == kCompactionStyleFIFO:
 */
  }

  /* "rocksdb/_rocksdb.pyx":1163
 *             if self.opts.compaction_style == kCompactionStyleUniversal:
 *                 return 'universal'
 *             if self.opts.compaction_style == kCompactionStyleFIFO:             # <<<<<<<<<<<<<<
 *                 return 'fifo'
 *             if self.opts.compaction_style == kCompactionStyleNone:
 */
  __pyx_t_1 = ((__pyx_v_self->opts->compaction_style == rocksdb::kCompactionStyleFIFO) != 0);
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":1164
 *                 return 'universal'
 *             if self.opts.compaction_style == kCompactionStyleFIFO:
 *                 return 'fifo'             # <<<<<<<<<<<<<<
 *             if self.opts.compaction_style == kCompactionStyleNone:
 *                 return 'none'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_fifo);
    __pyx_r = __pyx_n_s_fifo;
    goto __pyx_L0;

    /* "rocksdb/_rocksdb.pyx":1163
 *             if self.opts.compaction_style == kCompactionStyleUniversal:
 *                 return 'universal'
 *             if self.opts.compaction_style == kCompactionStyleFIFO:             # <<<<<<<<<<<<<<
 *                 return 'fifo'
 *             if self.opts.compaction_style == kCompactionStyleNone:
 */
  }

  /* "rocksdb/_rocksdb.pyx":1165
 *             if self.opts.compaction_style == kCompactionStyleFIFO:
 *                 return 'fifo'
 *             if self.opts.compaction_style == kCompactionStyleNone:             # <<<<<<<<<<<<<<
 *                 return 'none'
 *             raise Exception("Unknown compaction_style")
 */
  __pyx_t_1 = ((__pyx_v_self->opts->compaction_style == rocksdb::kCompactionStyleNone) != 0);
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":1166
 *                 return 'fifo'
 *             if self.opts.compaction_style == kCompactionStyleNone:
 *                 return 'none'             # <<<<<<<<<<<<<<
 *             raise Exception("Unknown compaction_style")
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_none);
    __pyx_r = __pyx_n_s_none;
    goto __pyx_L0;

    /* "rocksdb/_rocksdb.pyx":1165
 *             if self.opts.compaction_style == kCompactionStyleFIFO:
 *                 return 'fifo'
 *             if self.opts.compaction_style == kCompactionStyleNone:             # <<<<<<<<<<<<<<
 *                 return 'none'
 *             raise Exception("Unknown compaction_style")
 */
  }

  /* "rocksdb/_rocksdb.pyx":1167
 *             if self.opts.compaction_style == kCompactionStyleNone:
 *                 return 'none'
 *             raise Exception("Unknown compaction_style")             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, str value):
 */
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1167, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_Raise(__pyx_t_2, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __PYX_ERR(0, 1167, __pyx_L1_error)

  /* "rocksdb/_rocksdb.pyx":1158
 * 
 *     property compaction_style:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self.opts.compaction_style == kCompactionStyleLevel:
 *                 return 'level'
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.compaction_style.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1169
 *             raise Exception("Unknown compaction_style")
 * 
 *         def __set__(self, str value):             # <<<<<<<<<<<<<<
 *             if value == 'level':
 *                 self.opts.compaction_style = kCompactionStyleLevel
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_16compaction_style_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_16compaction_style_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_value), (&PyString_Type), 1, "value", 1))) __PYX_ERR(0, 1169, __pyx_L1_error)
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_16compaction_style_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject*)__pyx_v_value));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_16compaction_style_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1170
 * 
 *         def __set__(self, str value):
 *             if value == 'level':             # <<<<<<<<<<<<<<
 *                 self.opts.compaction_style = kCompactionStyleLevel
 *             elif value == 'universal':
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_value, __pyx_n_s_level, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1170, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "rocksdb/_rocksdb.pyx":1171
 *         def __set__(self, str value):
 *             if value == 'level':
 *                 self.opts.compaction_style = kCompactionStyleLevel             # <<<<<<<<<<<<<<
 *             elif value == 'universal':
 *                 self.opts.compaction_style = kCompactionStyleUniversal
 */
    __pyx_v_self->opts->compaction_style = rocksdb::kCompactionStyleLevel;

    /* "rocksdb/_rocksdb.pyx":1170
 * 
 *         def __set__(self, str value):
 *             if value == 'level':             # <<<<<<<<<<<<<<
 *                 self.opts.compaction_style = kCompactionStyleLevel
 *             elif value == 'universal':
 */
    goto __pyx_L3;
  }

  /* "rocksdb/_rocksdb.pyx":1172
 *             if value == 'level':
 *                 self.opts.compaction_style = kCompactionStyleLevel
 *             elif value == 'universal':             # <<<<<<<<<<<<<<
 *                 self.opts.compaction_style = kCompactionStyleUniversal
 *             elif value == 'fifo':
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_value, __pyx_n_s_universal, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1172, __pyx_L1_error)
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":1173
 *                 self.opts.compaction_style = kCompactionStyleLevel
 *             elif value == 'universal':
 *                 self.opts.compaction_style = kCompactionStyleUniversal             # <<<<<<<<<<<<<<
 *             elif value == 'fifo':
 *                 self.opts.compaction_style = kCompactionStyleFIFO
 */
    __pyx_v_self->opts->compaction_style = rocksdb::kCompactionStyleUniversal;

    /* "rocksdb/_rocksdb.pyx":1172
 *             if value == 'level':
 *                 self.opts.compaction_style = kCompactionStyleLevel
 *             elif value == 'universal':             # <<<<<<<<<<<<<<
 *                 self.opts.compaction_style = kCompactionStyleUniversal
 *             elif value == 'fifo':
 */
    goto __pyx_L3;
  }

  /* "rocksdb/_rocksdb.pyx":1174
 *             elif value == 'universal':
 *                 self.opts.compaction_style = kCompactionStyleUniversal
 *             elif value == 'fifo':             # <<<<<<<<<<<<<<
 *                 self.opts.compaction_style = kCompactionStyleFIFO
 *             elif value == 'none':
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_value, __pyx_n_s_fifo, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1174, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "rocksdb/_rocksdb.pyx":1175
 *                 self.opts.compaction_style = kCompactionStyleUniversal
 *             elif value == 'fifo':
 *                 self.opts.compaction_style = kCompactionStyleFIFO             # <<<<<<<<<<<<<<
 *             elif value == 'none':
 *                 self.opts.compaction_style = kCompactionStyleNone
 */
    __pyx_v_self->opts->compaction_style = rocksdb::kCompactionStyleFIFO;

    /* "rocksdb/_rocksdb.pyx":1174
 *             elif value == 'universal':
 *                 self.opts.compaction_style = kCompactionStyleUniversal
 *             elif value == 'fifo':             # <<<<<<<<<<<<<<
 *                 self.opts.compaction_style = kCompactionStyleFIFO
 *             elif value == 'none':
 */
    goto __pyx_L3;
  }

  /* "rocksdb/_rocksdb.pyx":1176
 *             elif value == 'fifo':
 *                 self.opts.compaction_style = kCompactionStyleFIFO
 *             elif value == 'none':             # <<<<<<<<<<<<<<
 *                 self.opts.compaction_style = kCompactionStyleNone
 *             else:
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_value, __pyx_n_s_none, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1176, __pyx_L1_error)
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":1177
 *                 self.opts.compaction_style = kCompactionStyleFIFO
 *             elif value == 'none':
 *                 self.opts.compaction_style = kCompactionStyleNone             # <<<<<<<<<<<<<<
 *             else:
 *                 raise Exception("Unknown compaction style")
 */
    __pyx_v_self->opts->compaction_style = rocksdb::kCompactionStyleNone;

    /* "rocksdb/_rocksdb.pyx":1176
 *             elif value == 'fifo':
 *                 self.opts.compaction_style = kCompactionStyleFIFO
 *             elif value == 'none':             # <<<<<<<<<<<<<<
 *                 self.opts.compaction_style = kCompactionStyleNone
 *             else:
 */
    goto __pyx_L3;
  }

  /* "rocksdb/_rocksdb.pyx":1179
 *                 self.opts.compaction_style = kCompactionStyleNone
 *             else:
 *                 raise Exception("Unknown compaction style")             # <<<<<<<<<<<<<<
 * 
 *     property compaction_options_universal:
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1179, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 1179, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "rocksdb/_rocksdb.pyx":1169
 *             raise Exception("Unknown compaction_style")
 * 
 *         def __set__(self, str value):             # <<<<<<<<<<<<<<
 *             if value == 'level':
 *                 self.opts.compaction_style = kCompactionStyleLevel
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.compaction_style.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1182
 * 
 *     property compaction_options_universal:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef universal_compaction.CompactionOptionsUniversal uopts
 *             cdef dict ret_ob = {}
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_28compaction_options_universal_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_28compaction_options_universal_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_28compaction_options_universal___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_28compaction_options_universal___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  rocksdb::CompactionOptionsUniversal __pyx_v_uopts;
  PyObject *__pyx_v_ret_ob = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  rocksdb::CompactionOptionsUniversal __pyx_t_2;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1184
 *         def __get__(self):
 *             cdef universal_compaction.CompactionOptionsUniversal uopts
 *             cdef dict ret_ob = {}             # <<<<<<<<<<<<<<
 * 
 *             uopts = self.opts.compaction_options_universal
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_ret_ob = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":1186
 *             cdef dict ret_ob = {}
 * 
 *             uopts = self.opts.compaction_options_universal             # <<<<<<<<<<<<<<
 * 
 *             ret_ob['size_ratio'] = uopts.size_ratio
 */
  __pyx_t_2 = __pyx_v_self->opts->compaction_options_universal;
  __pyx_v_uopts = __pyx_t_2;

  /* "rocksdb/_rocksdb.pyx":1188
 *             uopts = self.opts.compaction_options_universal
 * 
 *             ret_ob['size_ratio'] = uopts.size_ratio             # <<<<<<<<<<<<<<
 *             ret_ob['min_merge_width'] = uopts.min_merge_width
 *             ret_ob['max_merge_width'] = uopts.max_merge_width
 */
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_uopts.size_ratio); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1188, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyDict_SetItem(__pyx_v_ret_ob, __pyx_n_s_size_ratio, __pyx_t_1) < 0)) __PYX_ERR(0, 1188, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":1189
 * 
 *             ret_ob['size_ratio'] = uopts.size_ratio
 *             ret_ob['min_merge_width'] = uopts.min_merge_width             # <<<<<<<<<<<<<<
 *             ret_ob['max_merge_width'] = uopts.max_merge_width
 *             ret_ob['max_size_amplification_percent'] = uopts.max_size_amplification_percent
 */
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_uopts.min_merge_width); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1189, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyDict_SetItem(__pyx_v_ret_ob, __pyx_n_s_min_merge_width, __pyx_t_1) < 0)) __PYX_ERR(0, 1189, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":1190
 *             ret_ob['size_ratio'] = uopts.size_ratio
 *             ret_ob['min_merge_width'] = uopts.min_merge_width
 *             ret_ob['max_merge_width'] = uopts.max_merge_width             # <<<<<<<<<<<<<<
 *             ret_ob['max_size_amplification_percent'] = uopts.max_size_amplification_percent
 *             ret_ob['compression_size_percent'] = uopts.compression_size_percent
 */
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_uopts.max_merge_width); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyDict_SetItem(__pyx_v_ret_ob, __pyx_n_s_max_merge_width, __pyx_t_1) < 0)) __PYX_ERR(0, 1190, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":1191
 *             ret_ob['min_merge_width'] = uopts.min_merge_width
 *             ret_ob['max_merge_width'] = uopts.max_merge_width
 *             ret_ob['max_size_amplification_percent'] = uopts.max_size_amplification_percent             # <<<<<<<<<<<<<<
 *             ret_ob['compression_size_percent'] = uopts.compression_size_percent
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_uopts.max_size_amplification_percent); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyDict_SetItem(__pyx_v_ret_ob, __pyx_n_s_max_size_amplification_percent, __pyx_t_1) < 0)) __PYX_ERR(0, 1191, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":1192
 *             ret_ob['max_merge_width'] = uopts.max_merge_width
 *             ret_ob['max_size_amplification_percent'] = uopts.max_size_amplification_percent
 *             ret_ob['compression_size_percent'] = uopts.compression_size_percent             # <<<<<<<<<<<<<<
 * 
 *             if uopts.stop_style == kCompactionStopStyleSimilarSize:
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_uopts.compression_size_percent); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1192, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyDict_SetItem(__pyx_v_ret_ob, __pyx_n_s_compression_size_percent, __pyx_t_1) < 0)) __PYX_ERR(0, 1192, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":1194
 *             ret_ob['compression_size_percent'] = uopts.compression_size_percent
 * 
 *             if uopts.stop_style == kCompactionStopStyleSimilarSize:             # <<<<<<<<<<<<<<
 *                 ret_ob['stop_style'] = 'similar_size'
 *             elif uopts.stop_style == kCompactionStopStyleTotalSize:
 */
  switch (__pyx_v_uopts.stop_style) {
    case rocksdb::kCompactionStopStyleSimilarSize:

    /* "rocksdb/_rocksdb.pyx":1195
 * 
 *             if uopts.stop_style == kCompactionStopStyleSimilarSize:
 *                 ret_ob['stop_style'] = 'similar_size'             # <<<<<<<<<<<<<<
 *             elif uopts.stop_style == kCompactionStopStyleTotalSize:
 *                 ret_ob['stop_style'] = 'total_size'
 */
    if (unlikely(PyDict_SetItem(__pyx_v_ret_ob, __pyx_n_s_stop_style, __pyx_n_s_similar_size) < 0)) __PYX_ERR(0, 1195, __pyx_L1_error)

    /* "rocksdb/_rocksdb.pyx":1194
 *             ret_ob['compression_size_percent'] = uopts.compression_size_percent
 * 
 *             if uopts.stop_style == kCompactionStopStyleSimilarSize:             # <<<<<<<<<<<<<<
 *                 ret_ob['stop_style'] = 'similar_size'
 *             elif uopts.stop_style == kCompactionStopStyleTotalSize:
 */
    break;

    /* "rocksdb/_rocksdb.pyx":1196
 *             if uopts.stop_style == kCompactionStopStyleSimilarSize:
 *                 ret_ob['stop_style'] = 'similar_size'
 *             elif uopts.stop_style == kCompactionStopStyleTotalSize:             # <<<<<<<<<<<<<<
 *                 ret_ob['stop_style'] = 'total_size'
 *             else:
 */
    case rocksdb::kCompactionStopStyleTotalSize:

    /* "rocksdb/_rocksdb.pyx":1197
 *                 ret_ob['stop_style'] = 'similar_size'
 *             elif uopts.stop_style == kCompactionStopStyleTotalSize:
 *                 ret_ob['stop_style'] = 'total_size'             # <<<<<<<<<<<<<<
 *             else:
 *                 raise Exception("Unknown compaction style")
 */
    if (unlikely(PyDict_SetItem(__pyx_v_ret_ob, __pyx_n_s_stop_style, __pyx_n_s_total_size) < 0)) __PYX_ERR(0, 1197, __pyx_L1_error)

    /* "rocksdb/_rocksdb.pyx":1196
 *             if uopts.stop_style == kCompactionStopStyleSimilarSize:
 *                 ret_ob['stop_style'] = 'similar_size'
 *             elif uopts.stop_style == kCompactionStopStyleTotalSize:             # <<<<<<<<<<<<<<
 *                 ret_ob['stop_style'] = 'total_size'
 *             else:
 */
    break;
    default:

    /* "rocksdb/_rocksdb.pyx":1199
 *                 ret_ob['stop_style'] = 'total_size'
 *             else:
 *                 raise Exception("Unknown compaction style")             # <<<<<<<<<<<<<<
 * 
 *             return ret_ob
 */
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1199, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 1199, __pyx_L1_error)
    break;
  }

  /* "rocksdb/_rocksdb.pyx":1201
 *                 raise Exception("Unknown compaction style")
 * 
 *             return ret_ob             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, dict value):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ret_ob);
  __pyx_r = __pyx_v_ret_ob;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1182
 * 
 *     property compaction_options_universal:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef universal_compaction.CompactionOptionsUniversal uopts
 *             cdef dict ret_ob = {}
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.compaction_options_universal.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ret_ob);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1203
 *             return ret_ob
 * 
 *         def __set__(self, dict value):             # <<<<<<<<<<<<<<
 *             cdef universal_compaction.CompactionOptionsUniversal* uopts
 *             uopts = cython.address(self.opts.compaction_options_universal)
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_28compaction_options_universal_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_28compaction_options_universal_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_value), (&PyDict_Type), 1, "value", 1))) __PYX_ERR(0, 1203, __pyx_L1_error)
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_28compaction_options_universal_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject*)__pyx_v_value));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_28compaction_options_universal_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  rocksdb::CompactionOptionsUniversal *__pyx_v_uopts;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  unsigned int __pyx_t_4;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1205
 *         def __set__(self, dict value):
 *             cdef universal_compaction.CompactionOptionsUniversal* uopts
 *             uopts = cython.address(self.opts.compaction_options_universal)             # <<<<<<<<<<<<<<
 * 
 *             if 'size_ratio' in value:
 */
  __pyx_v_uopts = (&__pyx_v_self->opts->compaction_options_universal);

  /* "rocksdb/_rocksdb.pyx":1207
 *             uopts = cython.address(self.opts.compaction_options_universal)
 * 
 *             if 'size_ratio' in value:             # <<<<<<<<<<<<<<
 *                 uopts.size_ratio  = value['size_ratio']
 * 
 */
  if (unlikely(__pyx_v_value == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 1207, __pyx_L1_error)
  }
  __pyx_t_1 = (__Pyx_PyDict_ContainsTF(__pyx_n_s_size_ratio, __pyx_v_value, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1207, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "rocksdb/_rocksdb.pyx":1208
 * 
 *             if 'size_ratio' in value:
 *                 uopts.size_ratio  = value['size_ratio']             # <<<<<<<<<<<<<<
 * 
 *             if 'min_merge_width' in value:
 */
    if (unlikely(__pyx_v_value == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 1208, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_value, __pyx_n_s_size_ratio); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1208, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyInt_As_unsigned_int(__pyx_t_3); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1208, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_uopts->size_ratio = __pyx_t_4;

    /* "rocksdb/_rocksdb.pyx":1207
 *             uopts = cython.address(self.opts.compaction_options_universal)
 * 
 *             if 'size_ratio' in value:             # <<<<<<<<<<<<<<
 *                 uopts.size_ratio  = value['size_ratio']
 * 
 */
  }

  /* "rocksdb/_rocksdb.pyx":1210
 *                 uopts.size_ratio  = value['size_ratio']
 * 
 *             if 'min_merge_width' in value:             # <<<<<<<<<<<<<<
 *                 uopts.min_merge_width = value['min_merge_width']
 * 
 */
  if (unlikely(__pyx_v_value == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 1210, __pyx_L1_error)
  }
  __pyx_t_2 = (__Pyx_PyDict_ContainsTF(__pyx_n_s_min_merge_width, __pyx_v_value, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1210, __pyx_L1_error)
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":1211
 * 
 *             if 'min_merge_width' in value:
 *                 uopts.min_merge_width = value['min_merge_width']             # <<<<<<<<<<<<<<
 * 
 *             if 'max_merge_width' in value:
 */
    if (unlikely(__pyx_v_value == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 1211, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_value, __pyx_n_s_min_merge_width); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1211, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyInt_As_unsigned_int(__pyx_t_3); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1211, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_uopts->min_merge_width = __pyx_t_4;

    /* "rocksdb/_rocksdb.pyx":1210
 *                 uopts.size_ratio  = value['size_ratio']
 * 
 *             if 'min_merge_width' in value:             # <<<<<<<<<<<<<<
 *                 uopts.min_merge_width = value['min_merge_width']
 * 
 */
  }

  /* "rocksdb/_rocksdb.pyx":1213
 *                 uopts.min_merge_width = value['min_merge_width']
 * 
 *             if 'max_merge_width' in value:             # <<<<<<<<<<<<<<
 *                 uopts.max_merge_width = value['max_merge_width']
 * 
 */
  if (unlikely(__pyx_v_value == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 1213, __pyx_L1_error)
  }
  __pyx_t_1 = (__Pyx_PyDict_ContainsTF(__pyx_n_s_max_merge_width, __pyx_v_value, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1213, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "rocksdb/_rocksdb.pyx":1214
 * 
 *             if 'max_merge_width' in value:
 *                 uopts.max_merge_width = value['max_merge_width']             # <<<<<<<<<<<<<<
 * 
 *             if 'max_size_amplification_percent' in value:
 */
    if (unlikely(__pyx_v_value == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 1214, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_value, __pyx_n_s_max_merge_width); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1214, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyInt_As_unsigned_int(__pyx_t_3); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1214, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_uopts->max_merge_width = __pyx_t_4;

    /* "rocksdb/_rocksdb.pyx":1213
 *                 uopts.min_merge_width = value['min_merge_width']
 * 
 *             if 'max_merge_width' in value:             # <<<<<<<<<<<<<<
 *                 uopts.max_merge_width = value['max_merge_width']
 * 
 */
  }

  /* "rocksdb/_rocksdb.pyx":1216
 *                 uopts.max_merge_width = value['max_merge_width']
 * 
 *             if 'max_size_amplification_percent' in value:             # <<<<<<<<<<<<<<
 *                 uopts.max_size_amplification_percent = value['max_size_amplification_percent']
 * 
 */
  if (unlikely(__pyx_v_value == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 1216, __pyx_L1_error)
  }
  __pyx_t_2 = (__Pyx_PyDict_ContainsTF(__pyx_n_s_max_size_amplification_percent, __pyx_v_value, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1216, __pyx_L1_error)
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":1217
 * 
 *             if 'max_size_amplification_percent' in value:
 *                 uopts.max_size_amplification_percent = value['max_size_amplification_percent']             # <<<<<<<<<<<<<<
 * 
 *             if 'compression_size_percent' in value:
 */
    if (unlikely(__pyx_v_value == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 1217, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_value, __pyx_n_s_max_size_amplification_percent); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1217, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyInt_As_unsigned_int(__pyx_t_3); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1217, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_uopts->max_size_amplification_percent = __pyx_t_4;

    /* "rocksdb/_rocksdb.pyx":1216
 *                 uopts.max_merge_width = value['max_merge_width']
 * 
 *             if 'max_size_amplification_percent' in value:             # <<<<<<<<<<<<<<
 *                 uopts.max_size_amplification_percent = value['max_size_amplification_percent']
 * 
 */
  }

  /* "rocksdb/_rocksdb.pyx":1219
 *                 uopts.max_size_amplification_percent = value['max_size_amplification_percent']
 * 
 *             if 'compression_size_percent' in value:             # <<<<<<<<<<<<<<
 *                 uopts.compression_size_percent = value['compression_size_percent']
 * 
 */
  if (unlikely(__pyx_v_value == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 1219, __pyx_L1_error)
  }
  __pyx_t_1 = (__Pyx_PyDict_ContainsTF(__pyx_n_s_compression_size_percent, __pyx_v_value, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1219, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "rocksdb/_rocksdb.pyx":1220
 * 
 *             if 'compression_size_percent' in value:
 *                 uopts.compression_size_percent = value['compression_size_percent']             # <<<<<<<<<<<<<<
 * 
 *             if 'stop_style' in value:
 */
    if (unlikely(__pyx_v_value == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 1220, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_value, __pyx_n_s_compression_size_percent); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1220, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1220, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_uopts->compression_size_percent = __pyx_t_5;

    /* "rocksdb/_rocksdb.pyx":1219
 *                 uopts.max_size_amplification_percent = value['max_size_amplification_percent']
 * 
 *             if 'compression_size_percent' in value:             # <<<<<<<<<<<<<<
 *                 uopts.compression_size_percent = value['compression_size_percent']
 * 
 */
  }

  /* "rocksdb/_rocksdb.pyx":1222
 *                 uopts.compression_size_percent = value['compression_size_percent']
 * 
 *             if 'stop_style' in value:             # <<<<<<<<<<<<<<
 *                 if value['stop_style'] == 'similar_size':
 *                     uopts.stop_style = kCompactionStopStyleSimilarSize
 */
  if (unlikely(__pyx_v_value == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 1222, __pyx_L1_error)
  }
  __pyx_t_2 = (__Pyx_PyDict_ContainsTF(__pyx_n_s_stop_style, __pyx_v_value, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1222, __pyx_L1_error)
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":1223
 * 
 *             if 'stop_style' in value:
 *                 if value['stop_style'] == 'similar_size':             # <<<<<<<<<<<<<<
 *                     uopts.stop_style = kCompactionStopStyleSimilarSize
 *                 elif value['stop_style'] == 'total_size':
 */
    if (unlikely(__pyx_v_value == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 1223, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_value, __pyx_n_s_stop_style); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1223, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_similar_size, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1223, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_1) {

      /* "rocksdb/_rocksdb.pyx":1224
 *             if 'stop_style' in value:
 *                 if value['stop_style'] == 'similar_size':
 *                     uopts.stop_style = kCompactionStopStyleSimilarSize             # <<<<<<<<<<<<<<
 *                 elif value['stop_style'] == 'total_size':
 *                     uopts.stop_style = kCompactionStopStyleTotalSize
 */
      __pyx_v_uopts->stop_style = rocksdb::kCompactionStopStyleSimilarSize;

      /* "rocksdb/_rocksdb.pyx":1223
 * 
 *             if 'stop_style' in value:
 *                 if value['stop_style'] == 'similar_size':             # <<<<<<<<<<<<<<
 *                     uopts.stop_style = kCompactionStopStyleSimilarSize
 *                 elif value['stop_style'] == 'total_size':
 */
      goto __pyx_L9;
    }

    /* "rocksdb/_rocksdb.pyx":1225
 *                 if value['stop_style'] == 'similar_size':
 *                     uopts.stop_style = kCompactionStopStyleSimilarSize
 *                 elif value['stop_style'] == 'total_size':             # <<<<<<<<<<<<<<
 *                     uopts.stop_style = kCompactionStopStyleTotalSize
 *                 else:
 */
    if (unlikely(__pyx_v_value == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 1225, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_value, __pyx_n_s_stop_style); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1225, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_total_size, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1225, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_1) {

      /* "rocksdb/_rocksdb.pyx":1226
 *                     uopts.stop_style = kCompactionStopStyleSimilarSize
 *                 elif value['stop_style'] == 'total_size':
 *                     uopts.stop_style = kCompactionStopStyleTotalSize             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise Exception("Unknown compaction style")
 */
      __pyx_v_uopts->stop_style = rocksdb::kCompactionStopStyleTotalSize;

      /* "rocksdb/_rocksdb.pyx":1225
 *                 if value['stop_style'] == 'similar_size':
 *                     uopts.stop_style = kCompactionStopStyleSimilarSize
 *                 elif value['stop_style'] == 'total_size':             # <<<<<<<<<<<<<<
 *                     uopts.stop_style = kCompactionStopStyleTotalSize
 *                 else:
 */
      goto __pyx_L9;
    }

    /* "rocksdb/_rocksdb.pyx":1228
 *                     uopts.stop_style = kCompactionStopStyleTotalSize
 *                 else:
 *                     raise Exception("Unknown compaction style")             # <<<<<<<<<<<<<<
 * 
 *     # Deprecate
 */
    /*else*/ {
      __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1228, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(0, 1228, __pyx_L1_error)
    }
    __pyx_L9:;

    /* "rocksdb/_rocksdb.pyx":1222
 *                 uopts.compression_size_percent = value['compression_size_percent']
 * 
 *             if 'stop_style' in value:             # <<<<<<<<<<<<<<
 *                 if value['stop_style'] == 'similar_size':
 *                     uopts.stop_style = kCompactionStopStyleSimilarSize
 */
  }

  /* "rocksdb/_rocksdb.pyx":1203
 *             return ret_ob
 * 
 *         def __set__(self, dict value):             # <<<<<<<<<<<<<<
 *             cdef universal_compaction.CompactionOptionsUniversal* uopts
 *             uopts = cython.address(self.opts.compaction_options_universal)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.compaction_options_universal.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1238
 * 
 *     property max_sequential_skip_in_iterations:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.max_sequential_skip_in_iterations
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_33max_sequential_skip_in_iterations_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_33max_sequential_skip_in_iterations_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_33max_sequential_skip_in_iterations___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_33max_sequential_skip_in_iterations___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1239
 *     property max_sequential_skip_in_iterations:
 *         def __get__(self):
 *             return self.opts.max_sequential_skip_in_iterations             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.max_sequential_skip_in_iterations = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_uint64_t(__pyx_v_self->opts->max_sequential_skip_in_iterations); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1238
 * 
 *     property max_sequential_skip_in_iterations:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.max_sequential_skip_in_iterations
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.max_sequential_skip_in_iterations.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1240
 *         def __get__(self):
 *             return self.opts.max_sequential_skip_in_iterations
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.max_sequential_skip_in_iterations = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_33max_sequential_skip_in_iterations_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_33max_sequential_skip_in_iterations_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_33max_sequential_skip_in_iterations_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_33max_sequential_skip_in_iterations_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  uint64_t __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1241
 *             return self.opts.max_sequential_skip_in_iterations
 *         def __set__(self, value):
 *             self.opts.max_sequential_skip_in_iterations = value             # <<<<<<<<<<<<<<
 * 
 *     property inplace_update_support:
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_value); if (unlikely((__pyx_t_1 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1241, __pyx_L1_error)
  __pyx_v_self->opts->max_sequential_skip_in_iterations = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1240
 *         def __get__(self):
 *             return self.opts.max_sequential_skip_in_iterations
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.max_sequential_skip_in_iterations = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.max_sequential_skip_in_iterations.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1244
 * 
 *     property inplace_update_support:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.inplace_update_support
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_22inplace_update_support_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_22inplace_update_support_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_22inplace_update_support___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_22inplace_update_support___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1245
 *     property inplace_update_support:
 *         def __get__(self):
 *             return self.opts.inplace_update_support             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.inplace_update_support = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->opts->inplace_update_support); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1245, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1244
 * 
 *     property inplace_update_support:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.inplace_update_support
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.inplace_update_support.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1246
 *         def __get__(self):
 *             return self.opts.inplace_update_support
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.inplace_update_support = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_22inplace_update_support_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_22inplace_update_support_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_22inplace_update_support_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_22inplace_update_support_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1247
 *             return self.opts.inplace_update_support
 *         def __set__(self, value):
 *             self.opts.inplace_update_support = value             # <<<<<<<<<<<<<<
 * 
 *     property table_factory:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1247, __pyx_L1_error)
  __pyx_v_self->opts->inplace_update_support = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1246
 *         def __get__(self):
 *             return self.opts.inplace_update_support
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.inplace_update_support = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.inplace_update_support.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1250
 * 
 *     property table_factory:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.py_table_factory
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_13table_factory_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_13table_factory_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_13table_factory___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_13table_factory___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1251
 *     property table_factory:
 *         def __get__(self):
 *             return self.py_table_factory             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, PyTableFactory value):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->py_table_factory));
  __pyx_r = ((PyObject *)__pyx_v_self->py_table_factory);
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1250
 * 
 *     property table_factory:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.py_table_factory
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1253
 *             return self.py_table_factory
 * 
 *         def __set__(self, PyTableFactory value):             # <<<<<<<<<<<<<<
 *             self.py_table_factory = value
 *             self.opts.table_factory = value.get_table_factory()
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_13table_factory_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_13table_factory_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_value), __pyx_ptype_7rocksdb_8_rocksdb_PyTableFactory, 1, "value", 0))) __PYX_ERR(0, 1253, __pyx_L1_error)
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_13table_factory_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((struct __pyx_obj_7rocksdb_8_rocksdb_PyTableFactory *)__pyx_v_value));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_13table_factory_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, struct __pyx_obj_7rocksdb_8_rocksdb_PyTableFactory *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1254
 * 
 *         def __set__(self, PyTableFactory value):
 *             self.py_table_factory = value             # <<<<<<<<<<<<<<
 *             self.opts.table_factory = value.get_table_factory()
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_value));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_value));
  __Pyx_GOTREF(__pyx_v_self->py_table_factory);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->py_table_factory));
  __pyx_v_self->py_table_factory = __pyx_v_value;

  /* "rocksdb/_rocksdb.pyx":1255
 *         def __set__(self, PyTableFactory value):
 *             self.py_table_factory = value
 *             self.opts.table_factory = value.get_table_factory()             # <<<<<<<<<<<<<<
 * 
 *     property memtable_factory:
 */
  __pyx_v_self->opts->table_factory = ((struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyTableFactory *)__pyx_v_value->__pyx_vtab)->get_table_factory(__pyx_v_value);

  /* "rocksdb/_rocksdb.pyx":1253
 *             return self.py_table_factory
 * 
 *         def __set__(self, PyTableFactory value):             # <<<<<<<<<<<<<<
 *             self.py_table_factory = value
 *             self.opts.table_factory = value.get_table_factory()
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1258
 * 
 *     property memtable_factory:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.py_memtable_factory
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_16memtable_factory_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_16memtable_factory_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_16memtable_factory___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_16memtable_factory___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1259
 *     property memtable_factory:
 *         def __get__(self):
 *             return self.py_memtable_factory             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, PyMemtableFactory value):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->py_memtable_factory));
  __pyx_r = ((PyObject *)__pyx_v_self->py_memtable_factory);
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1258
 * 
 *     property memtable_factory:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.py_memtable_factory
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1261
 *             return self.py_memtable_factory
 * 
 *         def __set__(self, PyMemtableFactory value):             # <<<<<<<<<<<<<<
 *             self.py_memtable_factory = value
 *             self.opts.memtable_factory = value.get_memtable_factory()
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_16memtable_factory_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_16memtable_factory_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_value), __pyx_ptype_7rocksdb_8_rocksdb_PyMemtableFactory, 1, "value", 0))) __PYX_ERR(0, 1261, __pyx_L1_error)
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_16memtable_factory_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((struct __pyx_obj_7rocksdb_8_rocksdb_PyMemtableFactory *)__pyx_v_value));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_16memtable_factory_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, struct __pyx_obj_7rocksdb_8_rocksdb_PyMemtableFactory *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1262
 * 
 *         def __set__(self, PyMemtableFactory value):
 *             self.py_memtable_factory = value             # <<<<<<<<<<<<<<
 *             self.opts.memtable_factory = value.get_memtable_factory()
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_value));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_value));
  __Pyx_GOTREF(__pyx_v_self->py_memtable_factory);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->py_memtable_factory));
  __pyx_v_self->py_memtable_factory = __pyx_v_value;

  /* "rocksdb/_rocksdb.pyx":1263
 *         def __set__(self, PyMemtableFactory value):
 *             self.py_memtable_factory = value
 *             self.opts.memtable_factory = value.get_memtable_factory()             # <<<<<<<<<<<<<<
 * 
 *     property inplace_update_num_locks:
 */
  __pyx_v_self->opts->memtable_factory = ((struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyMemtableFactory *)__pyx_v_value->__pyx_vtab)->get_memtable_factory(__pyx_v_value);

  /* "rocksdb/_rocksdb.pyx":1261
 *             return self.py_memtable_factory
 * 
 *         def __set__(self, PyMemtableFactory value):             # <<<<<<<<<<<<<<
 *             self.py_memtable_factory = value
 *             self.opts.memtable_factory = value.get_memtable_factory()
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1266
 * 
 *     property inplace_update_num_locks:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.inplace_update_num_locks
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_24inplace_update_num_locks_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_24inplace_update_num_locks_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_24inplace_update_num_locks___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_24inplace_update_num_locks___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1267
 *     property inplace_update_num_locks:
 *         def __get__(self):
 *             return self.opts.inplace_update_num_locks             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self.opts.inplace_update_num_locks = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->opts->inplace_update_num_locks); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1267, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1266
 * 
 *     property inplace_update_num_locks:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts.inplace_update_num_locks
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.inplace_update_num_locks.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1268
 *         def __get__(self):
 *             return self.opts.inplace_update_num_locks
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.inplace_update_num_locks = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_24inplace_update_num_locks_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_24inplace_update_num_locks_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_24inplace_update_num_locks_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_24inplace_update_num_locks_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1269
 *             return self.opts.inplace_update_num_locks
 *         def __set__(self, value):
 *             self.opts.inplace_update_num_locks = value             # <<<<<<<<<<<<<<
 * 
 *     property comparator:
 */
  __pyx_t_1 = __Pyx_PyInt_As_size_t(__pyx_v_value); if (unlikely((__pyx_t_1 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1269, __pyx_L1_error)
  __pyx_v_self->opts->inplace_update_num_locks = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1268
 *         def __get__(self):
 *             return self.opts.inplace_update_num_locks
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.opts.inplace_update_num_locks = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.inplace_update_num_locks.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1272
 * 
 *     property comparator:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.py_comparator.get_ob()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_10comparator_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_10comparator_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_10comparator___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_10comparator___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1273
 *     property comparator:
 *         def __get__(self):
 *             return self.py_comparator.get_ob()             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyComparator *)__pyx_v_self->py_comparator->__pyx_vtab)->get_ob(__pyx_v_self->py_comparator); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1272
 * 
 *     property comparator:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.py_comparator.get_ob()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.comparator.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1275
 *             return self.py_comparator.get_ob()
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             if isinstance(value, PyComparator):
 *                 if (<PyComparator?>value).get_comparator() == NULL:
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_10comparator_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_10comparator_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_10comparator_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_10comparator_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1276
 * 
 *         def __set__(self, value):
 *             if isinstance(value, PyComparator):             # <<<<<<<<<<<<<<
 *                 if (<PyComparator?>value).get_comparator() == NULL:
 *                     raise Exception("Cannot set %s as comparator" % value)
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_value, __pyx_ptype_7rocksdb_8_rocksdb_PyComparator); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "rocksdb/_rocksdb.pyx":1277
 *         def __set__(self, value):
 *             if isinstance(value, PyComparator):
 *                 if (<PyComparator?>value).get_comparator() == NULL:             # <<<<<<<<<<<<<<
 *                     raise Exception("Cannot set %s as comparator" % value)
 *                 else:
 */
    if (!(likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_7rocksdb_8_rocksdb_PyComparator)))) __PYX_ERR(0, 1277, __pyx_L1_error)
    __pyx_t_2 = ((((struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyComparator *)((struct __pyx_obj_7rocksdb_8_rocksdb_PyComparator *)__pyx_v_value)->__pyx_vtab)->get_comparator(((struct __pyx_obj_7rocksdb_8_rocksdb_PyComparator *)__pyx_v_value)) == NULL) != 0);
    if (__pyx_t_2) {

      /* "rocksdb/_rocksdb.pyx":1278
 *             if isinstance(value, PyComparator):
 *                 if (<PyComparator?>value).get_comparator() == NULL:
 *                     raise Exception("Cannot set %s as comparator" % value)             # <<<<<<<<<<<<<<
 *                 else:
 *                     self.py_comparator = value
 */
      __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_Cannot_set_s_as_comparator, __pyx_v_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1278, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1278, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1278, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(0, 1278, __pyx_L1_error)

      /* "rocksdb/_rocksdb.pyx":1277
 *         def __set__(self, value):
 *             if isinstance(value, PyComparator):
 *                 if (<PyComparator?>value).get_comparator() == NULL:             # <<<<<<<<<<<<<<
 *                     raise Exception("Cannot set %s as comparator" % value)
 *                 else:
 */
    }

    /* "rocksdb/_rocksdb.pyx":1280
 *                     raise Exception("Cannot set %s as comparator" % value)
 *                 else:
 *                     self.py_comparator = value             # <<<<<<<<<<<<<<
 *             else:
 *                 self.py_comparator = PyGenericComparator(value)
 */
    /*else*/ {
      if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_7rocksdb_8_rocksdb_PyComparator))))) __PYX_ERR(0, 1280, __pyx_L1_error)
      __pyx_t_3 = __pyx_v_value;
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      __Pyx_GOTREF(__pyx_v_self->py_comparator);
      __Pyx_DECREF(((PyObject *)__pyx_v_self->py_comparator));
      __pyx_v_self->py_comparator = ((struct __pyx_obj_7rocksdb_8_rocksdb_PyComparator *)__pyx_t_3);
      __pyx_t_3 = 0;
    }

    /* "rocksdb/_rocksdb.pyx":1276
 * 
 *         def __set__(self, value):
 *             if isinstance(value, PyComparator):             # <<<<<<<<<<<<<<
 *                 if (<PyComparator?>value).get_comparator() == NULL:
 *                     raise Exception("Cannot set %s as comparator" % value)
 */
    goto __pyx_L3;
  }

  /* "rocksdb/_rocksdb.pyx":1282
 *                     self.py_comparator = value
 *             else:
 *                 self.py_comparator = PyGenericComparator(value)             # <<<<<<<<<<<<<<
 * 
 *             self.opts.comparator = self.py_comparator.get_comparator()
 */
  /*else*/ {
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1282, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_value);
    __Pyx_GIVEREF(__pyx_v_value);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_value);
    __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_PyGenericComparator), __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1282, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GIVEREF(__pyx_t_4);
    __Pyx_GOTREF(__pyx_v_self->py_comparator);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->py_comparator));
    __pyx_v_self->py_comparator = ((struct __pyx_obj_7rocksdb_8_rocksdb_PyComparator *)__pyx_t_4);
    __pyx_t_4 = 0;
  }
  __pyx_L3:;

  /* "rocksdb/_rocksdb.pyx":1284
 *                 self.py_comparator = PyGenericComparator(value)
 * 
 *             self.opts.comparator = self.py_comparator.get_comparator()             # <<<<<<<<<<<<<<
 * 
 *     property merge_operator:
 */
  __pyx_v_self->opts->comparator = ((struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyComparator *)__pyx_v_self->py_comparator->__pyx_vtab)->get_comparator(__pyx_v_self->py_comparator);

  /* "rocksdb/_rocksdb.pyx":1275
 *             return self.py_comparator.get_ob()
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             if isinstance(value, PyComparator):
 *                 if (<PyComparator?>value).get_comparator() == NULL:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.comparator.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1287
 * 
 *     property merge_operator:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self.py_merge_operator is None:
 *                 return None
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_14merge_operator_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_14merge_operator_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_14merge_operator___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_14merge_operator___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1288
 *     property merge_operator:
 *         def __get__(self):
 *             if self.py_merge_operator is None:             # <<<<<<<<<<<<<<
 *                 return None
 *             return self.py_merge_operator.get_ob()
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_self->py_merge_operator) == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "rocksdb/_rocksdb.pyx":1289
 *         def __get__(self):
 *             if self.py_merge_operator is None:
 *                 return None             # <<<<<<<<<<<<<<
 *             return self.py_merge_operator.get_ob()
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;

    /* "rocksdb/_rocksdb.pyx":1288
 *     property merge_operator:
 *         def __get__(self):
 *             if self.py_merge_operator is None:             # <<<<<<<<<<<<<<
 *                 return None
 *             return self.py_merge_operator.get_ob()
 */
  }

  /* "rocksdb/_rocksdb.pyx":1290
 *             if self.py_merge_operator is None:
 *                 return None
 *             return self.py_merge_operator.get_ob()             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = ((struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyMergeOperator *)__pyx_v_self->py_merge_operator->__pyx_vtab)->get_ob(__pyx_v_self->py_merge_operator); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1290, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1287
 * 
 *     property merge_operator:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self.py_merge_operator is None:
 *                 return None
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.merge_operator.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1292
 *             return self.py_merge_operator.get_ob()
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.py_merge_operator = PyMergeOperator(value)
 *             self.opts.merge_operator = self.py_merge_operator.get_operator()
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_14merge_operator_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_14merge_operator_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_14merge_operator_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_14merge_operator_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1293
 * 
 *         def __set__(self, value):
 *             self.py_merge_operator = PyMergeOperator(value)             # <<<<<<<<<<<<<<
 *             self.opts.merge_operator = self.py_merge_operator.get_operator()
 * 
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_value);
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_PyMergeOperator), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->py_merge_operator);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->py_merge_operator));
  __pyx_v_self->py_merge_operator = ((struct __pyx_obj_7rocksdb_8_rocksdb_PyMergeOperator *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "rocksdb/_rocksdb.pyx":1294
 *         def __set__(self, value):
 *             self.py_merge_operator = PyMergeOperator(value)
 *             self.opts.merge_operator = self.py_merge_operator.get_operator()             # <<<<<<<<<<<<<<
 * 
 *     property prefix_extractor:
 */
  __pyx_v_self->opts->merge_operator = ((struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyMergeOperator *)__pyx_v_self->py_merge_operator->__pyx_vtab)->get_operator(__pyx_v_self->py_merge_operator);

  /* "rocksdb/_rocksdb.pyx":1292
 *             return self.py_merge_operator.get_ob()
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.py_merge_operator = PyMergeOperator(value)
 *             self.opts.merge_operator = self.py_merge_operator.get_operator()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.merge_operator.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1297
 * 
 *     property prefix_extractor:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self.py_prefix_extractor is None:
 *                 return None
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_16prefix_extractor_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_16prefix_extractor_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_16prefix_extractor___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_16prefix_extractor___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1298
 *     property prefix_extractor:
 *         def __get__(self):
 *             if self.py_prefix_extractor is None:             # <<<<<<<<<<<<<<
 *                 return None
 *             return self.py_prefix_extractor.get_ob()
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_self->py_prefix_extractor) == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "rocksdb/_rocksdb.pyx":1299
 *         def __get__(self):
 *             if self.py_prefix_extractor is None:
 *                 return None             # <<<<<<<<<<<<<<
 *             return self.py_prefix_extractor.get_ob()
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;

    /* "rocksdb/_rocksdb.pyx":1298
 *     property prefix_extractor:
 *         def __get__(self):
 *             if self.py_prefix_extractor is None:             # <<<<<<<<<<<<<<
 *                 return None
 *             return self.py_prefix_extractor.get_ob()
 */
  }

  /* "rocksdb/_rocksdb.pyx":1300
 *             if self.py_prefix_extractor is None:
 *                 return None
 *             return self.py_prefix_extractor.get_ob()             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = ((struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PySliceTransform *)__pyx_v_self->py_prefix_extractor->__pyx_vtab)->get_ob(__pyx_v_self->py_prefix_extractor); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1300, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1297
 * 
 *     property prefix_extractor:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self.py_prefix_extractor is None:
 *                 return None
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.prefix_extractor.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1302
 *             return self.py_prefix_extractor.get_ob()
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.py_prefix_extractor = PySliceTransform(value)
 *             self.opts.prefix_extractor = self.py_prefix_extractor.get_transformer()
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_16prefix_extractor_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_16prefix_extractor_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_16prefix_extractor_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_16prefix_extractor_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1303
 * 
 *         def __set__(self, value):
 *             self.py_prefix_extractor = PySliceTransform(value)             # <<<<<<<<<<<<<<
 *             self.opts.prefix_extractor = self.py_prefix_extractor.get_transformer()
 * 
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1303, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_value);
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_PySliceTransform), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1303, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->py_prefix_extractor);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->py_prefix_extractor));
  __pyx_v_self->py_prefix_extractor = ((struct __pyx_obj_7rocksdb_8_rocksdb_PySliceTransform *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "rocksdb/_rocksdb.pyx":1304
 *         def __set__(self, value):
 *             self.py_prefix_extractor = PySliceTransform(value)
 *             self.opts.prefix_extractor = self.py_prefix_extractor.get_transformer()             # <<<<<<<<<<<<<<
 * 
 *     property row_cache:
 */
  __pyx_v_self->opts->prefix_extractor = ((struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PySliceTransform *)__pyx_v_self->py_prefix_extractor->__pyx_vtab)->get_transformer(__pyx_v_self->py_prefix_extractor);

  /* "rocksdb/_rocksdb.pyx":1302
 *             return self.py_prefix_extractor.get_ob()
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.py_prefix_extractor = PySliceTransform(value)
 *             self.opts.prefix_extractor = self.py_prefix_extractor.get_transformer()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.prefix_extractor.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1307
 * 
 *     property row_cache:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.py_row_cache
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_9row_cache_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_7Options_9row_cache_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_9row_cache___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_7Options_9row_cache___get__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1308
 *     property row_cache:
 *         def __get__(self):
 *             return self.py_row_cache             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->py_row_cache));
  __pyx_r = ((PyObject *)__pyx_v_self->py_row_cache);
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1307
 * 
 *     property row_cache:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.py_row_cache
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1310
 *             return self.py_row_cache
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             if value is None:
 *                 self.py_row_cache = None
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_9row_cache_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_7Options_9row_cache_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_7Options_9row_cache_2__set__(((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_7Options_9row_cache_2__set__(struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "rocksdb/_rocksdb.pyx":1311
 * 
 *         def __set__(self, value):
 *             if value is None:             # <<<<<<<<<<<<<<
 *                 self.py_row_cache = None
 *                 self.opts.row_cache.reset()
 */
  __pyx_t_1 = (__pyx_v_value == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "rocksdb/_rocksdb.pyx":1312
 *         def __set__(self, value):
 *             if value is None:
 *                 self.py_row_cache = None             # <<<<<<<<<<<<<<
 *                 self.opts.row_cache.reset()
 *             elif not isinstance(value, PyCache):
 */
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    __Pyx_GOTREF(__pyx_v_self->py_row_cache);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->py_row_cache));
    __pyx_v_self->py_row_cache = ((struct __pyx_obj_7rocksdb_8_rocksdb_PyCache *)Py_None);

    /* "rocksdb/_rocksdb.pyx":1313
 *             if value is None:
 *                 self.py_row_cache = None
 *                 self.opts.row_cache.reset()             # <<<<<<<<<<<<<<
 *             elif not isinstance(value, PyCache):
 *                 raise Exception("row_cache must be a Cache object")
 */
    try {
      __pyx_v_self->opts->row_cache.reset();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 1313, __pyx_L1_error)
    }

    /* "rocksdb/_rocksdb.pyx":1311
 * 
 *         def __set__(self, value):
 *             if value is None:             # <<<<<<<<<<<<<<
 *                 self.py_row_cache = None
 *                 self.opts.row_cache.reset()
 */
    goto __pyx_L3;
  }

  /* "rocksdb/_rocksdb.pyx":1314
 *                 self.py_row_cache = None
 *                 self.opts.row_cache.reset()
 *             elif not isinstance(value, PyCache):             # <<<<<<<<<<<<<<
 *                 raise Exception("row_cache must be a Cache object")
 *             else:
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_value, __pyx_ptype_7rocksdb_8_rocksdb_PyCache); 
  __pyx_t_1 = ((!(__pyx_t_2 != 0)) != 0);
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":1315
 *                 self.opts.row_cache.reset()
 *             elif not isinstance(value, PyCache):
 *                 raise Exception("row_cache must be a Cache object")             # <<<<<<<<<<<<<<
 *             else:
 *                 self.py_row_cache = value
 */
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1315, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 1315, __pyx_L1_error)

    /* "rocksdb/_rocksdb.pyx":1314
 *                 self.py_row_cache = None
 *                 self.opts.row_cache.reset()
 *             elif not isinstance(value, PyCache):             # <<<<<<<<<<<<<<
 *                 raise Exception("row_cache must be a Cache object")
 *             else:
 */
  }

  /* "rocksdb/_rocksdb.pyx":1317
 *                 raise Exception("row_cache must be a Cache object")
 *             else:
 *                 self.py_row_cache = value             # <<<<<<<<<<<<<<
 *                 self.opts.row_cache = self.py_row_cache.get_cache()
 * 
 */
  /*else*/ {
    if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_7rocksdb_8_rocksdb_PyCache))))) __PYX_ERR(0, 1317, __pyx_L1_error)
    __pyx_t_3 = __pyx_v_value;
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __Pyx_GOTREF(__pyx_v_self->py_row_cache);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->py_row_cache));
    __pyx_v_self->py_row_cache = ((struct __pyx_obj_7rocksdb_8_rocksdb_PyCache *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "rocksdb/_rocksdb.pyx":1318
 *             else:
 *                 self.py_row_cache = value
 *                 self.opts.row_cache = self.py_row_cache.get_cache()             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_v_self->opts->row_cache = ((struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyCache *)__pyx_v_self->py_row_cache->__pyx_vtab)->get_cache(__pyx_v_self->py_row_cache);
  }
  __pyx_L3:;

  /* "rocksdb/_rocksdb.pyx":1310
 *             return self.py_row_cache
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             if value is None:
 *                 self.py_row_cache = None
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("rocksdb._rocksdb.Options.row_cache.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1335
 *     cdef db.WriteBatch* batch
 * 
 *     def __cinit__(self, data=None):             # <<<<<<<<<<<<<<
 *         self.batch = NULL
 *         if data is not None:
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_10WriteBatch_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_10WriteBatch_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_data = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_data,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_data);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 1335, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_data = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1335, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.WriteBatch.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_10WriteBatch___cinit__(((struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatch *)__pyx_v_self), __pyx_v_data);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_10WriteBatch___cinit__(struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatch *__pyx_v_self, PyObject *__pyx_v_data) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  std::string __pyx_t_3;
  rocksdb::WriteBatch *__pyx_t_4;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "rocksdb/_rocksdb.pyx":1336
 * 
 *     def __cinit__(self, data=None):
 *         self.batch = NULL             # <<<<<<<<<<<<<<
 *         if data is not None:
 *             self.batch = new db.WriteBatch(bytes_to_string(data))
 */
  __pyx_v_self->batch = NULL;

  /* "rocksdb/_rocksdb.pyx":1337
 *     def __cinit__(self, data=None):
 *         self.batch = NULL
 *         if data is not None:             # <<<<<<<<<<<<<<
 *             self.batch = new db.WriteBatch(bytes_to_string(data))
 *         else:
 */
  __pyx_t_1 = (__pyx_v_data != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "rocksdb/_rocksdb.pyx":1338
 *         self.batch = NULL
 *         if data is not None:
 *             self.batch = new db.WriteBatch(bytes_to_string(data))             # <<<<<<<<<<<<<<
 *         else:
 *             self.batch = new db.WriteBatch()
 */
    __pyx_t_3 = __pyx_f_7rocksdb_8_rocksdb_bytes_to_string(__pyx_v_data); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1338, __pyx_L1_error)
    try {
      __pyx_t_4 = new rocksdb::WriteBatch(__pyx_t_3);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 1338, __pyx_L1_error)
    }
    __pyx_v_self->batch = __pyx_t_4;

    /* "rocksdb/_rocksdb.pyx":1337
 *     def __cinit__(self, data=None):
 *         self.batch = NULL
 *         if data is not None:             # <<<<<<<<<<<<<<
 *             self.batch = new db.WriteBatch(bytes_to_string(data))
 *         else:
 */
    goto __pyx_L3;
  }

  /* "rocksdb/_rocksdb.pyx":1340
 *             self.batch = new db.WriteBatch(bytes_to_string(data))
 *         else:
 *             self.batch = new db.WriteBatch()             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  /*else*/ {
    try {
      __pyx_t_4 = new rocksdb::WriteBatch();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 1340, __pyx_L1_error)
    }
    __pyx_v_self->batch = __pyx_t_4;
  }
  __pyx_L3:;

  /* "rocksdb/_rocksdb.pyx":1335
 *     cdef db.WriteBatch* batch
 * 
 *     def __cinit__(self, data=None):             # <<<<<<<<<<<<<<
 *         self.batch = NULL
 *         if data is not None:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.WriteBatch.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1342
 *             self.batch = new db.WriteBatch()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if not self.batch == NULL:
 *             del self.batch
 */

/* Python wrapper */
static void __pyx_pw_7rocksdb_8_rocksdb_10WriteBatch_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_7rocksdb_8_rocksdb_10WriteBatch_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_7rocksdb_8_rocksdb_10WriteBatch_2__dealloc__(((struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatch *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_7rocksdb_8_rocksdb_10WriteBatch_2__dealloc__(struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatch *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "rocksdb/_rocksdb.pyx":1343
 * 
 *     def __dealloc__(self):
 *         if not self.batch == NULL:             # <<<<<<<<<<<<<<
 *             del self.batch
 * 
 */
  __pyx_t_1 = ((!((__pyx_v_self->batch == NULL) != 0)) != 0);
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":1344
 *     def __dealloc__(self):
 *         if not self.batch == NULL:
 *             del self.batch             # <<<<<<<<<<<<<<
 * 
 *     def put(self, key, value):
 */
    delete __pyx_v_self->batch;

    /* "rocksdb/_rocksdb.pyx":1343
 * 
 *     def __dealloc__(self):
 *         if not self.batch == NULL:             # <<<<<<<<<<<<<<
 *             del self.batch
 * 
 */
  }

  /* "rocksdb/_rocksdb.pyx":1342
 *             self.batch = new db.WriteBatch()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if not self.batch == NULL:
 *             del self.batch
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "rocksdb/_rocksdb.pyx":1346
 *             del self.batch
 * 
 *     def put(self, key, value):             # <<<<<<<<<<<<<<
 *         self.batch.Put(bytes_to_slice(key), bytes_to_slice(value))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_10WriteBatch_5put(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_10WriteBatch_5put(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_key = 0;
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("put (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_key,&__pyx_n_s_value,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_key)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("put", 1, 2, 2, 1); __PYX_ERR(0, 1346, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "put") < 0)) __PYX_ERR(0, 1346, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_key = values[0];
    __pyx_v_value = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("put", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1346, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.WriteBatch.put", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_10WriteBatch_4put(((struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatch *)__pyx_v_self), __pyx_v_key, __pyx_v_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_10WriteBatch_4put(struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatch *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  rocksdb::Slice __pyx_t_1;
  rocksdb::Slice __pyx_t_2;
  __Pyx_RefNannySetupContext("put", 0);

  /* "rocksdb/_rocksdb.pyx":1347
 * 
 *     def put(self, key, value):
 *         self.batch.Put(bytes_to_slice(key), bytes_to_slice(value))             # <<<<<<<<<<<<<<
 * 
 *     def merge(self, key, value):
 */
  __pyx_t_1 = __pyx_f_7rocksdb_8_rocksdb_bytes_to_slice(__pyx_v_key); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1347, __pyx_L1_error)
  __pyx_t_2 = __pyx_f_7rocksdb_8_rocksdb_bytes_to_slice(__pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1347, __pyx_L1_error)
  try {
    __pyx_v_self->batch->Put(__pyx_t_1, __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1347, __pyx_L1_error)
  }

  /* "rocksdb/_rocksdb.pyx":1346
 *             del self.batch
 * 
 *     def put(self, key, value):             # <<<<<<<<<<<<<<
 *         self.batch.Put(bytes_to_slice(key), bytes_to_slice(value))
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.WriteBatch.put", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1349
 *         self.batch.Put(bytes_to_slice(key), bytes_to_slice(value))
 * 
 *     def merge(self, key, value):             # <<<<<<<<<<<<<<
 *         self.batch.Merge(bytes_to_slice(key), bytes_to_slice(value))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_10WriteBatch_7merge(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_10WriteBatch_7merge(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_key = 0;
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("merge (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_key,&__pyx_n_s_value,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_key)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("merge", 1, 2, 2, 1); __PYX_ERR(0, 1349, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "merge") < 0)) __PYX_ERR(0, 1349, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_key = values[0];
    __pyx_v_value = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("merge", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1349, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.WriteBatch.merge", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_10WriteBatch_6merge(((struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatch *)__pyx_v_self), __pyx_v_key, __pyx_v_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_10WriteBatch_6merge(struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatch *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  rocksdb::Slice __pyx_t_1;
  rocksdb::Slice __pyx_t_2;
  __Pyx_RefNannySetupContext("merge", 0);

  /* "rocksdb/_rocksdb.pyx":1350
 * 
 *     def merge(self, key, value):
 *         self.batch.Merge(bytes_to_slice(key), bytes_to_slice(value))             # <<<<<<<<<<<<<<
 * 
 *     def delete(self, key):
 */
  __pyx_t_1 = __pyx_f_7rocksdb_8_rocksdb_bytes_to_slice(__pyx_v_key); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1350, __pyx_L1_error)
  __pyx_t_2 = __pyx_f_7rocksdb_8_rocksdb_bytes_to_slice(__pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1350, __pyx_L1_error)
  try {
    __pyx_v_self->batch->Merge(__pyx_t_1, __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1350, __pyx_L1_error)
  }

  /* "rocksdb/_rocksdb.pyx":1349
 *         self.batch.Put(bytes_to_slice(key), bytes_to_slice(value))
 * 
 *     def merge(self, key, value):             # <<<<<<<<<<<<<<
 *         self.batch.Merge(bytes_to_slice(key), bytes_to_slice(value))
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.WriteBatch.merge", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1352
 *         self.batch.Merge(bytes_to_slice(key), bytes_to_slice(value))
 * 
 *     def delete(self, key):             # <<<<<<<<<<<<<<
 *         self.batch.Delete(bytes_to_slice(key))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_10WriteBatch_9delete(PyObject *__pyx_v_self, PyObject *__pyx_v_key); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_10WriteBatch_9delete(PyObject *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("delete (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_10WriteBatch_8delete(((struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatch *)__pyx_v_self), ((PyObject *)__pyx_v_key));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_10WriteBatch_8delete(struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatch *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  rocksdb::Slice __pyx_t_1;
  __Pyx_RefNannySetupContext("delete", 0);

  /* "rocksdb/_rocksdb.pyx":1353
 * 
 *     def delete(self, key):
 *         self.batch.Delete(bytes_to_slice(key))             # <<<<<<<<<<<<<<
 * 
 *     def clear(self):
 */
  __pyx_t_1 = __pyx_f_7rocksdb_8_rocksdb_bytes_to_slice(__pyx_v_key); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1353, __pyx_L1_error)
  try {
    __pyx_v_self->batch->Delete(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1353, __pyx_L1_error)
  }

  /* "rocksdb/_rocksdb.pyx":1352
 *         self.batch.Merge(bytes_to_slice(key), bytes_to_slice(value))
 * 
 *     def delete(self, key):             # <<<<<<<<<<<<<<
 *         self.batch.Delete(bytes_to_slice(key))
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.WriteBatch.delete", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1355
 *         self.batch.Delete(bytes_to_slice(key))
 * 
 *     def clear(self):             # <<<<<<<<<<<<<<
 *         self.batch.Clear()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_10WriteBatch_11clear(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_10WriteBatch_11clear(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_10WriteBatch_10clear(((struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatch *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_10WriteBatch_10clear(struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatch *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear", 0);

  /* "rocksdb/_rocksdb.pyx":1356
 * 
 *     def clear(self):
 *         self.batch.Clear()             # <<<<<<<<<<<<<<
 * 
 *     def data(self):
 */
  try {
    __pyx_v_self->batch->Clear();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1356, __pyx_L1_error)
  }

  /* "rocksdb/_rocksdb.pyx":1355
 *         self.batch.Delete(bytes_to_slice(key))
 * 
 *     def clear(self):             # <<<<<<<<<<<<<<
 *         self.batch.Clear()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.WriteBatch.clear", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1358
 *         self.batch.Clear()
 * 
 *     def data(self):             # <<<<<<<<<<<<<<
 *         return string_to_bytes(self.batch.Data())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_10WriteBatch_13data(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_10WriteBatch_13data(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("data (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_10WriteBatch_12data(((struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatch *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_10WriteBatch_12data(struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatch *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_FakeReference<std::string const > __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("data", 0);

  /* "rocksdb/_rocksdb.pyx":1359
 * 
 *     def data(self):
 *         return string_to_bytes(self.batch.Data())             # <<<<<<<<<<<<<<
 * 
 *     def count(self):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->batch->Data();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1359, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_f_7rocksdb_8_rocksdb_string_to_bytes(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1359, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1358
 *         self.batch.Clear()
 * 
 *     def data(self):             # <<<<<<<<<<<<<<
 *         return string_to_bytes(self.batch.Data())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("rocksdb._rocksdb.WriteBatch.data", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1361
 *         return string_to_bytes(self.batch.Data())
 * 
 *     def count(self):             # <<<<<<<<<<<<<<
 *         return self.batch.Count()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_10WriteBatch_15count(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_10WriteBatch_15count(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("count (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_10WriteBatch_14count(((struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatch *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_10WriteBatch_14count(struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatch *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("count", 0);

  /* "rocksdb/_rocksdb.pyx":1362
 * 
 *     def count(self):
 *         return self.batch.Count()             # <<<<<<<<<<<<<<
 * 
 *     def __iter__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->batch->Count();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1362, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1362, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1361
 *         return string_to_bytes(self.batch.Data())
 * 
 *     def count(self):             # <<<<<<<<<<<<<<
 *         return self.batch.Count()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("rocksdb._rocksdb.WriteBatch.count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1364
 *         return self.batch.Count()
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         return WriteBatchIterator(self)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_10WriteBatch_17__iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_10WriteBatch_17__iter__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_10WriteBatch_16__iter__(((struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatch *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_10WriteBatch_16__iter__(struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatch *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__iter__", 0);

  /* "rocksdb/_rocksdb.pyx":1365
 * 
 *     def __iter__(self):
 *         return WriteBatchIterator(self)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1365, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_WriteBatchIterator), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1365, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1364
 *         return self.batch.Count()
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         return WriteBatchIterator(self)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("rocksdb._rocksdb.WriteBatch.__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1376
 *     cdef size_t pos
 * 
 *     def __init__(self, WriteBatch batch):             # <<<<<<<<<<<<<<
 *         cdef Status st
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_18WriteBatchIterator_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_18WriteBatchIterator_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatch *__pyx_v_batch = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_batch,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_batch)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 1376, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_batch = ((struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatch *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1376, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.WriteBatchIterator.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_batch), __pyx_ptype_7rocksdb_8_rocksdb_WriteBatch, 1, "batch", 0))) __PYX_ERR(0, 1376, __pyx_L1_error)
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_18WriteBatchIterator___init__(((struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatchIterator *)__pyx_v_self), __pyx_v_batch);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_18WriteBatchIterator___init__(struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatchIterator *__pyx_v_self, struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatch *__pyx_v_batch) {
  rocksdb::Status __pyx_v_st;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "rocksdb/_rocksdb.pyx":1379
 *         cdef Status st
 * 
 *         self.batch = batch             # <<<<<<<<<<<<<<
 *         self.pos = 0
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_batch));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_batch));
  __Pyx_GOTREF(__pyx_v_self->batch);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->batch));
  __pyx_v_self->batch = __pyx_v_batch;

  /* "rocksdb/_rocksdb.pyx":1380
 * 
 *         self.batch = batch
 *         self.pos = 0             # <<<<<<<<<<<<<<
 * 
 *         st = db.get_batch_items(batch.batch, cython.address(self.items))
 */
  __pyx_v_self->pos = 0;

  /* "rocksdb/_rocksdb.pyx":1382
 *         self.pos = 0
 * 
 *         st = db.get_batch_items(batch.batch, cython.address(self.items))             # <<<<<<<<<<<<<<
 *         check_status(st)
 * 
 */
  __pyx_v_st = py_rocks::get_batch_items(__pyx_v_batch->batch, (&__pyx_v_self->items));

  /* "rocksdb/_rocksdb.pyx":1383
 * 
 *         st = db.get_batch_items(batch.batch, cython.address(self.items))
 *         check_status(st)             # <<<<<<<<<<<<<<
 * 
 *     def __iter__(self):
 */
  __pyx_t_1 = __pyx_f_7rocksdb_8_rocksdb_check_status(__pyx_v_st); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1383, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":1376
 *     cdef size_t pos
 * 
 *     def __init__(self, WriteBatch batch):             # <<<<<<<<<<<<<<
 *         cdef Status st
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.WriteBatchIterator.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1385
 *         check_status(st)
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_18WriteBatchIterator_3__iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_18WriteBatchIterator_3__iter__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_18WriteBatchIterator_2__iter__(((struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatchIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_18WriteBatchIterator_2__iter__(struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatchIterator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__", 0);

  /* "rocksdb/_rocksdb.pyx":1386
 * 
 *     def __iter__(self):
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __next__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1385
 *         check_status(st)
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1388
 *         return self
 * 
 *     def __next__(self):             # <<<<<<<<<<<<<<
 *         if self.pos == self.items.size():
 *             raise StopIteration()
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_18WriteBatchIterator_5__next__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_18WriteBatchIterator_5__next__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__next__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_18WriteBatchIterator_4__next__(((struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatchIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_18WriteBatchIterator_4__next__(struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatchIterator *__pyx_v_self) {
  PyObject *__pyx_v_op = 0;
  PyObject *__pyx_v_ret = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__next__", 0);

  /* "rocksdb/_rocksdb.pyx":1389
 * 
 *     def __next__(self):
 *         if self.pos == self.items.size():             # <<<<<<<<<<<<<<
 *             raise StopIteration()
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->pos == __pyx_v_self->items.size()) != 0);
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":1390
 *     def __next__(self):
 *         if self.pos == self.items.size():
 *             raise StopIteration()             # <<<<<<<<<<<<<<
 * 
 *         cdef str op
 */
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_builtin_StopIteration); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1390, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 1390, __pyx_L1_error)

    /* "rocksdb/_rocksdb.pyx":1389
 * 
 *     def __next__(self):
 *         if self.pos == self.items.size():             # <<<<<<<<<<<<<<
 *             raise StopIteration()
 * 
 */
  }

  /* "rocksdb/_rocksdb.pyx":1394
 *         cdef str op
 * 
 *         if self.items[self.pos].op == db.BatchItemOpPut:             # <<<<<<<<<<<<<<
 *             op = "Put"
 *         elif self.items[self.pos].op == db.BatchItemOpMerge:
 */
  __pyx_t_1 = (((__pyx_v_self->items[__pyx_v_self->pos]).op == py_rocks::RecordItemsHandler::Optype::PutRecord) != 0);
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":1395
 * 
 *         if self.items[self.pos].op == db.BatchItemOpPut:
 *             op = "Put"             # <<<<<<<<<<<<<<
 *         elif self.items[self.pos].op == db.BatchItemOpMerge:
 *             op = "Merge"
 */
    __Pyx_INCREF(__pyx_n_s_Put);
    __pyx_v_op = __pyx_n_s_Put;

    /* "rocksdb/_rocksdb.pyx":1394
 *         cdef str op
 * 
 *         if self.items[self.pos].op == db.BatchItemOpPut:             # <<<<<<<<<<<<<<
 *             op = "Put"
 *         elif self.items[self.pos].op == db.BatchItemOpMerge:
 */
    goto __pyx_L4;
  }

  /* "rocksdb/_rocksdb.pyx":1396
 *         if self.items[self.pos].op == db.BatchItemOpPut:
 *             op = "Put"
 *         elif self.items[self.pos].op == db.BatchItemOpMerge:             # <<<<<<<<<<<<<<
 *             op = "Merge"
 *         elif self.items[self.pos].op == db.BatchItemOpDelte:
 */
  __pyx_t_1 = (((__pyx_v_self->items[__pyx_v_self->pos]).op == py_rocks::RecordItemsHandler::Optype::MergeRecord) != 0);
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":1397
 *             op = "Put"
 *         elif self.items[self.pos].op == db.BatchItemOpMerge:
 *             op = "Merge"             # <<<<<<<<<<<<<<
 *         elif self.items[self.pos].op == db.BatchItemOpDelte:
 *             op = "Delete"
 */
    __Pyx_INCREF(__pyx_n_s_Merge);
    __pyx_v_op = __pyx_n_s_Merge;

    /* "rocksdb/_rocksdb.pyx":1396
 *         if self.items[self.pos].op == db.BatchItemOpPut:
 *             op = "Put"
 *         elif self.items[self.pos].op == db.BatchItemOpMerge:             # <<<<<<<<<<<<<<
 *             op = "Merge"
 *         elif self.items[self.pos].op == db.BatchItemOpDelte:
 */
    goto __pyx_L4;
  }

  /* "rocksdb/_rocksdb.pyx":1398
 *         elif self.items[self.pos].op == db.BatchItemOpMerge:
 *             op = "Merge"
 *         elif self.items[self.pos].op == db.BatchItemOpDelte:             # <<<<<<<<<<<<<<
 *             op = "Delete"
 * 
 */
  __pyx_t_1 = (((__pyx_v_self->items[__pyx_v_self->pos]).op == py_rocks::RecordItemsHandler::Optype::DeleteRecord) != 0);
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":1399
 *             op = "Merge"
 *         elif self.items[self.pos].op == db.BatchItemOpDelte:
 *             op = "Delete"             # <<<<<<<<<<<<<<
 * 
 *         ret = (
 */
    __Pyx_INCREF(__pyx_n_s_Delete);
    __pyx_v_op = __pyx_n_s_Delete;

    /* "rocksdb/_rocksdb.pyx":1398
 *         elif self.items[self.pos].op == db.BatchItemOpMerge:
 *             op = "Merge"
 *         elif self.items[self.pos].op == db.BatchItemOpDelte:             # <<<<<<<<<<<<<<
 *             op = "Delete"
 * 
 */
  }
  __pyx_L4:;

  /* "rocksdb/_rocksdb.pyx":1402
 * 
 *         ret = (
 *             op,             # <<<<<<<<<<<<<<
 *             slice_to_bytes(self.items[self.pos].key),
 *             slice_to_bytes(self.items[self.pos].value))
 */
  if (unlikely(!__pyx_v_op)) { __Pyx_RaiseUnboundLocalError("op"); __PYX_ERR(0, 1402, __pyx_L1_error) }

  /* "rocksdb/_rocksdb.pyx":1403
 *         ret = (
 *             op,
 *             slice_to_bytes(self.items[self.pos].key),             # <<<<<<<<<<<<<<
 *             slice_to_bytes(self.items[self.pos].value))
 * 
 */
  __pyx_t_2 = __pyx_f_7rocksdb_8_rocksdb_slice_to_bytes((__pyx_v_self->items[__pyx_v_self->pos]).key); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1403, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "rocksdb/_rocksdb.pyx":1404
 *             op,
 *             slice_to_bytes(self.items[self.pos].key),
 *             slice_to_bytes(self.items[self.pos].value))             # <<<<<<<<<<<<<<
 * 
 *         self.pos += 1
 */
  __pyx_t_3 = __pyx_f_7rocksdb_8_rocksdb_slice_to_bytes((__pyx_v_self->items[__pyx_v_self->pos]).value); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1404, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "rocksdb/_rocksdb.pyx":1402
 * 
 *         ret = (
 *             op,             # <<<<<<<<<<<<<<
 *             slice_to_bytes(self.items[self.pos].key),
 *             slice_to_bytes(self.items[self.pos].value))
 */
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1402, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_v_op);
  __Pyx_GIVEREF(__pyx_v_op);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_op);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_v_ret = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "rocksdb/_rocksdb.pyx":1406
 *             slice_to_bytes(self.items[self.pos].value))
 * 
 *         self.pos += 1             # <<<<<<<<<<<<<<
 *         return ret
 * 
 */
  __pyx_v_self->pos = (__pyx_v_self->pos + 1);

  /* "rocksdb/_rocksdb.pyx":1407
 * 
 *         self.pos += 1
 *         return ret             # <<<<<<<<<<<<<<
 * 
 * @cython.no_gc_clear
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ret);
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1388
 *         return self
 * 
 *     def __next__(self):             # <<<<<<<<<<<<<<
 *         if self.pos == self.items.size():
 *             raise StopIteration()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("rocksdb._rocksdb.WriteBatchIterator.__next__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_op);
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1414
 *     cdef db.DB* db
 * 
 *     def __cinit__(self, db_name, Options opts, read_only=False):             # <<<<<<<<<<<<<<
 *         cdef Status st
 *         cdef string db_path
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_2DB_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_2DB_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_db_name = 0;
  struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_opts = 0;
  PyObject *__pyx_v_read_only = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_db_name,&__pyx_n_s_opts,&__pyx_n_s_read_only,0};
    PyObject* values[3] = {0,0,0};
    values[2] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_db_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_opts)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 3, 1); __PYX_ERR(0, 1414, __pyx_L3_error)
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_read_only);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 1414, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_db_name = values[0];
    __pyx_v_opts = ((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)values[1]);
    __pyx_v_read_only = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1414, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.DB.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_opts), __pyx_ptype_7rocksdb_8_rocksdb_Options, 1, "opts", 0))) __PYX_ERR(0, 1414, __pyx_L1_error)
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_2DB___cinit__(((struct __pyx_obj_7rocksdb_8_rocksdb_DB *)__pyx_v_self), __pyx_v_db_name, __pyx_v_opts, __pyx_v_read_only);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_2DB___cinit__(struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self, PyObject *__pyx_v_db_name, struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_opts, PyObject *__pyx_v_read_only) {
  rocksdb::Status __pyx_v_st;
  std::string __pyx_v_db_path;
  std::shared_ptr<rocksdb::Logger>  __pyx_v_info_log;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  std::string __pyx_t_3;
  rocksdb::Status __pyx_t_4;
  __Pyx_FakeReference<rocksdb::Options const > __pyx_t_5;
  std::shared_ptr<rocksdb::Logger>  __pyx_t_6;
  int __pyx_t_7;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "rocksdb/_rocksdb.pyx":1417
 *         cdef Status st
 *         cdef string db_path
 *         self.db = NULL             # <<<<<<<<<<<<<<
 *         self.opts = None
 * 
 */
  __pyx_v_self->db = NULL;

  /* "rocksdb/_rocksdb.pyx":1418
 *         cdef string db_path
 *         self.db = NULL
 *         self.opts = None             # <<<<<<<<<<<<<<
 * 
 *         if opts.in_use:
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->opts);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->opts));
  __pyx_v_self->opts = ((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)Py_None);

  /* "rocksdb/_rocksdb.pyx":1420
 *         self.opts = None
 * 
 *         if opts.in_use:             # <<<<<<<<<<<<<<
 *             raise Exception("Options object is already used by another DB")
 * 
 */
  __pyx_t_1 = (__pyx_v_opts->in_use != 0);
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":1421
 * 
 *         if opts.in_use:
 *             raise Exception("Options object is already used by another DB")             # <<<<<<<<<<<<<<
 * 
 *         db_path = path_to_string(db_name)
 */
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1421, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 1421, __pyx_L1_error)

    /* "rocksdb/_rocksdb.pyx":1420
 *         self.opts = None
 * 
 *         if opts.in_use:             # <<<<<<<<<<<<<<
 *             raise Exception("Options object is already used by another DB")
 * 
 */
  }

  /* "rocksdb/_rocksdb.pyx":1423
 *             raise Exception("Options object is already used by another DB")
 * 
 *         db_path = path_to_string(db_name)             # <<<<<<<<<<<<<<
 *         if read_only:
 *             with nogil:
 */
  __pyx_t_3 = __pyx_f_7rocksdb_8_rocksdb_path_to_string(__pyx_v_db_name); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1423, __pyx_L1_error)
  __pyx_v_db_path = __pyx_t_3;

  /* "rocksdb/_rocksdb.pyx":1424
 * 
 *         db_path = path_to_string(db_name)
 *         if read_only:             # <<<<<<<<<<<<<<
 *             with nogil:
 *                 st = db.DB_OpenForReadOnly(
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_read_only); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1424, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":1425
 *         db_path = path_to_string(db_name)
 *         if read_only:
 *             with nogil:             # <<<<<<<<<<<<<<
 *                 st = db.DB_OpenForReadOnly(
 *                     deref(opts.opts),
 */
    {
        #ifdef WITH_THREAD
        PyThreadState *_save;
        Py_UNBLOCK_THREADS
        #endif
        /*try:*/ {

          /* "rocksdb/_rocksdb.pyx":1426
 *         if read_only:
 *             with nogil:
 *                 st = db.DB_OpenForReadOnly(             # <<<<<<<<<<<<<<
 *                     deref(opts.opts),
 *                     db_path,
 */
          try {
            __pyx_t_4 = rocksdb::DB::OpenForReadOnly((*__pyx_v_opts->opts), __pyx_v_db_path, (&__pyx_v_self->db), 0);
          } catch(...) {
            #ifdef WITH_THREAD
            PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
            #endif
            __Pyx_CppExn2PyErr();
            #ifdef WITH_THREAD
            PyGILState_Release(__pyx_gilstate_save);
            #endif
            __PYX_ERR(0, 1426, __pyx_L6_error)
          }
          __pyx_v_st = __pyx_t_4;
        }

        /* "rocksdb/_rocksdb.pyx":1425
 *         db_path = path_to_string(db_name)
 *         if read_only:
 *             with nogil:             # <<<<<<<<<<<<<<
 *                 st = db.DB_OpenForReadOnly(
 *                     deref(opts.opts),
 */
        /*finally:*/ {
          /*normal exit:*/{
            #ifdef WITH_THREAD
            Py_BLOCK_THREADS
            #endif
            goto __pyx_L7;
          }
          __pyx_L6_error: {
            #ifdef WITH_THREAD
            Py_BLOCK_THREADS
            #endif
            goto __pyx_L1_error;
          }
          __pyx_L7:;
        }
    }

    /* "rocksdb/_rocksdb.pyx":1424
 * 
 *         db_path = path_to_string(db_name)
 *         if read_only:             # <<<<<<<<<<<<<<
 *             with nogil:
 *                 st = db.DB_OpenForReadOnly(
 */
    goto __pyx_L4;
  }

  /* "rocksdb/_rocksdb.pyx":1432
 *                     False)
 *         else:
 *             with nogil:             # <<<<<<<<<<<<<<
 *                 st = db.DB_Open(
 *                     deref(opts.opts),
 */
  /*else*/ {
    {
        #ifdef WITH_THREAD
        PyThreadState *_save;
        Py_UNBLOCK_THREADS
        #endif
        /*try:*/ {

          /* "rocksdb/_rocksdb.pyx":1433
 *         else:
 *             with nogil:
 *                 st = db.DB_Open(             # <<<<<<<<<<<<<<
 *                     deref(opts.opts),
 *                     db_path,
 */
          try {
            __pyx_t_4 = rocksdb::DB::Open((*__pyx_v_opts->opts), __pyx_v_db_path, (&__pyx_v_self->db));
          } catch(...) {
            #ifdef WITH_THREAD
            PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
            #endif
            __Pyx_CppExn2PyErr();
            #ifdef WITH_THREAD
            PyGILState_Release(__pyx_gilstate_save);
            #endif
            __PYX_ERR(0, 1433, __pyx_L9_error)
          }
          __pyx_v_st = __pyx_t_4;
        }

        /* "rocksdb/_rocksdb.pyx":1432
 *                     False)
 *         else:
 *             with nogil:             # <<<<<<<<<<<<<<
 *                 st = db.DB_Open(
 *                     deref(opts.opts),
 */
        /*finally:*/ {
          /*normal exit:*/{
            #ifdef WITH_THREAD
            Py_BLOCK_THREADS
            #endif
            goto __pyx_L10;
          }
          __pyx_L9_error: {
            #ifdef WITH_THREAD
            Py_BLOCK_THREADS
            #endif
            goto __pyx_L1_error;
          }
          __pyx_L10:;
        }
    }
  }
  __pyx_L4:;

  /* "rocksdb/_rocksdb.pyx":1437
 *                     db_path,
 *                     cython.address(self.db))
 *         check_status(st)             # <<<<<<<<<<<<<<
 * 
 *         # Inject the loggers into the python callbacks
 */
  __pyx_t_2 = __pyx_f_7rocksdb_8_rocksdb_check_status(__pyx_v_st); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1437, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "rocksdb/_rocksdb.pyx":1440
 * 
 *         # Inject the loggers into the python callbacks
 *         cdef shared_ptr[logger.Logger] info_log = self.db.GetOptions().info_log             # <<<<<<<<<<<<<<
 *         if opts.py_comparator is not None:
 *             opts.py_comparator.set_info_log(info_log)
 */
  try {
    __pyx_t_5 = __pyx_v_self->db->GetOptions();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1440, __pyx_L1_error)
  }
  __pyx_t_6 = __pyx_t_5->info_log;
  __pyx_v_info_log = __pyx_t_6;

  /* "rocksdb/_rocksdb.pyx":1441
 *         # Inject the loggers into the python callbacks
 *         cdef shared_ptr[logger.Logger] info_log = self.db.GetOptions().info_log
 *         if opts.py_comparator is not None:             # <<<<<<<<<<<<<<
 *             opts.py_comparator.set_info_log(info_log)
 * 
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_opts->py_comparator) != Py_None);
  __pyx_t_7 = (__pyx_t_1 != 0);
  if (__pyx_t_7) {

    /* "rocksdb/_rocksdb.pyx":1442
 *         cdef shared_ptr[logger.Logger] info_log = self.db.GetOptions().info_log
 *         if opts.py_comparator is not None:
 *             opts.py_comparator.set_info_log(info_log)             # <<<<<<<<<<<<<<
 * 
 *         if opts.py_table_factory is not None:
 */
    __pyx_t_2 = ((struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyComparator *)__pyx_v_opts->py_comparator->__pyx_vtab)->set_info_log(__pyx_v_opts->py_comparator, __pyx_v_info_log); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1442, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "rocksdb/_rocksdb.pyx":1441
 *         # Inject the loggers into the python callbacks
 *         cdef shared_ptr[logger.Logger] info_log = self.db.GetOptions().info_log
 *         if opts.py_comparator is not None:             # <<<<<<<<<<<<<<
 *             opts.py_comparator.set_info_log(info_log)
 * 
 */
  }

  /* "rocksdb/_rocksdb.pyx":1444
 *             opts.py_comparator.set_info_log(info_log)
 * 
 *         if opts.py_table_factory is not None:             # <<<<<<<<<<<<<<
 *             opts.py_table_factory.set_info_log(info_log)
 * 
 */
  __pyx_t_7 = (((PyObject *)__pyx_v_opts->py_table_factory) != Py_None);
  __pyx_t_1 = (__pyx_t_7 != 0);
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":1445
 * 
 *         if opts.py_table_factory is not None:
 *             opts.py_table_factory.set_info_log(info_log)             # <<<<<<<<<<<<<<
 * 
 *         if opts.prefix_extractor is not None:
 */
    __pyx_t_2 = ((struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyTableFactory *)__pyx_v_opts->py_table_factory->__pyx_vtab)->set_info_log(__pyx_v_opts->py_table_factory, __pyx_v_info_log); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1445, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "rocksdb/_rocksdb.pyx":1444
 *             opts.py_comparator.set_info_log(info_log)
 * 
 *         if opts.py_table_factory is not None:             # <<<<<<<<<<<<<<
 *             opts.py_table_factory.set_info_log(info_log)
 * 
 */
  }

  /* "rocksdb/_rocksdb.pyx":1447
 *             opts.py_table_factory.set_info_log(info_log)
 * 
 *         if opts.prefix_extractor is not None:             # <<<<<<<<<<<<<<
 *             opts.py_prefix_extractor.set_info_log(info_log)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_opts), __pyx_n_s_prefix_extractor); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1447, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = (__pyx_t_2 != Py_None);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_7 = (__pyx_t_1 != 0);
  if (__pyx_t_7) {

    /* "rocksdb/_rocksdb.pyx":1448
 * 
 *         if opts.prefix_extractor is not None:
 *             opts.py_prefix_extractor.set_info_log(info_log)             # <<<<<<<<<<<<<<
 * 
 *         self.opts = opts
 */
    __pyx_t_2 = ((struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PySliceTransform *)__pyx_v_opts->py_prefix_extractor->__pyx_vtab)->set_info_log(__pyx_v_opts->py_prefix_extractor, __pyx_v_info_log); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1448, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "rocksdb/_rocksdb.pyx":1447
 *             opts.py_table_factory.set_info_log(info_log)
 * 
 *         if opts.prefix_extractor is not None:             # <<<<<<<<<<<<<<
 *             opts.py_prefix_extractor.set_info_log(info_log)
 * 
 */
  }

  /* "rocksdb/_rocksdb.pyx":1450
 *             opts.py_prefix_extractor.set_info_log(info_log)
 * 
 *         self.opts = opts             # <<<<<<<<<<<<<<
 *         self.opts.in_use = True
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_opts));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_opts));
  __Pyx_GOTREF(__pyx_v_self->opts);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->opts));
  __pyx_v_self->opts = __pyx_v_opts;

  /* "rocksdb/_rocksdb.pyx":1451
 * 
 *         self.opts = opts
 *         self.opts.in_use = True             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->opts->in_use = 1;

  /* "rocksdb/_rocksdb.pyx":1414
 *     cdef db.DB* db
 * 
 *     def __cinit__(self, db_name, Options opts, read_only=False):             # <<<<<<<<<<<<<<
 *         cdef Status st
 *         cdef string db_path
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("rocksdb._rocksdb.DB.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1453
 *         self.opts.in_use = True
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if not self.db == NULL:
 *             with nogil:
 */

/* Python wrapper */
static void __pyx_pw_7rocksdb_8_rocksdb_2DB_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_7rocksdb_8_rocksdb_2DB_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_7rocksdb_8_rocksdb_2DB_2__dealloc__(((struct __pyx_obj_7rocksdb_8_rocksdb_DB *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_7rocksdb_8_rocksdb_2DB_2__dealloc__(struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "rocksdb/_rocksdb.pyx":1454
 * 
 *     def __dealloc__(self):
 *         if not self.db == NULL:             # <<<<<<<<<<<<<<
 *             with nogil:
 *                 del self.db
 */
  __pyx_t_1 = ((!((__pyx_v_self->db == NULL) != 0)) != 0);
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":1455
 *     def __dealloc__(self):
 *         if not self.db == NULL:
 *             with nogil:             # <<<<<<<<<<<<<<
 *                 del self.db
 * 
 */
    {
        #ifdef WITH_THREAD
        PyThreadState *_save;
        Py_UNBLOCK_THREADS
        #endif
        /*try:*/ {

          /* "rocksdb/_rocksdb.pyx":1456
 *         if not self.db == NULL:
 *             with nogil:
 *                 del self.db             # <<<<<<<<<<<<<<
 * 
 *         if self.opts is not None:
 */
          delete __pyx_v_self->db;
        }

        /* "rocksdb/_rocksdb.pyx":1455
 *     def __dealloc__(self):
 *         if not self.db == NULL:
 *             with nogil:             # <<<<<<<<<<<<<<
 *                 del self.db
 * 
 */
        /*finally:*/ {
          /*normal exit:*/{
            #ifdef WITH_THREAD
            Py_BLOCK_THREADS
            #endif
            goto __pyx_L6;
          }
          __pyx_L6:;
        }
    }

    /* "rocksdb/_rocksdb.pyx":1454
 * 
 *     def __dealloc__(self):
 *         if not self.db == NULL:             # <<<<<<<<<<<<<<
 *             with nogil:
 *                 del self.db
 */
  }

  /* "rocksdb/_rocksdb.pyx":1458
 *                 del self.db
 * 
 *         if self.opts is not None:             # <<<<<<<<<<<<<<
 *             self.opts.in_use = False
 * 
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_self->opts) != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "rocksdb/_rocksdb.pyx":1459
 * 
 *         if self.opts is not None:
 *             self.opts.in_use = False             # <<<<<<<<<<<<<<
 * 
 *     def put(self, key, value, sync=False, disable_wal=False):
 */
    __pyx_v_self->opts->in_use = 0;

    /* "rocksdb/_rocksdb.pyx":1458
 *                 del self.db
 * 
 *         if self.opts is not None:             # <<<<<<<<<<<<<<
 *             self.opts.in_use = False
 * 
 */
  }

  /* "rocksdb/_rocksdb.pyx":1453
 *         self.opts.in_use = True
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if not self.db == NULL:
 *             with nogil:
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "rocksdb/_rocksdb.pyx":1461
 *             self.opts.in_use = False
 * 
 *     def put(self, key, value, sync=False, disable_wal=False):             # <<<<<<<<<<<<<<
 *         cdef Status st
 *         cdef options.WriteOptions opts
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_2DB_5put(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_2DB_5put(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_key = 0;
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_v_sync = 0;
  PyObject *__pyx_v_disable_wal = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("put (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_key,&__pyx_n_s_value,&__pyx_n_s_sync,&__pyx_n_s_disable_wal,0};
    PyObject* values[4] = {0,0,0,0};
    values[2] = ((PyObject *)Py_False);
    values[3] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_key)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("put", 0, 2, 4, 1); __PYX_ERR(0, 1461, __pyx_L3_error)
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sync);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_disable_wal);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "put") < 0)) __PYX_ERR(0, 1461, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_key = values[0];
    __pyx_v_value = values[1];
    __pyx_v_sync = values[2];
    __pyx_v_disable_wal = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("put", 0, 2, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1461, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.DB.put", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_2DB_4put(((struct __pyx_obj_7rocksdb_8_rocksdb_DB *)__pyx_v_self), __pyx_v_key, __pyx_v_value, __pyx_v_sync, __pyx_v_disable_wal);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_2DB_4put(struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_value, PyObject *__pyx_v_sync, PyObject *__pyx_v_disable_wal) {
  rocksdb::Status __pyx_v_st;
  rocksdb::WriteOptions __pyx_v_opts;
  rocksdb::Slice __pyx_v_c_key;
  rocksdb::Slice __pyx_v_c_value;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  rocksdb::Slice __pyx_t_2;
  rocksdb::Status __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("put", 0);

  /* "rocksdb/_rocksdb.pyx":1464
 *         cdef Status st
 *         cdef options.WriteOptions opts
 *         opts.sync = sync             # <<<<<<<<<<<<<<
 *         opts.disableWAL = disable_wal
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_sync); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1464, __pyx_L1_error)
  __pyx_v_opts.sync = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1465
 *         cdef options.WriteOptions opts
 *         opts.sync = sync
 *         opts.disableWAL = disable_wal             # <<<<<<<<<<<<<<
 * 
 *         cdef Slice c_key = bytes_to_slice(key)
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_disable_wal); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1465, __pyx_L1_error)
  __pyx_v_opts.disableWAL = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1467
 *         opts.disableWAL = disable_wal
 * 
 *         cdef Slice c_key = bytes_to_slice(key)             # <<<<<<<<<<<<<<
 *         cdef Slice c_value = bytes_to_slice(value)
 * 
 */
  __pyx_t_2 = __pyx_f_7rocksdb_8_rocksdb_bytes_to_slice(__pyx_v_key); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1467, __pyx_L1_error)
  __pyx_v_c_key = __pyx_t_2;

  /* "rocksdb/_rocksdb.pyx":1468
 * 
 *         cdef Slice c_key = bytes_to_slice(key)
 *         cdef Slice c_value = bytes_to_slice(value)             # <<<<<<<<<<<<<<
 * 
 *         with nogil:
 */
  __pyx_t_2 = __pyx_f_7rocksdb_8_rocksdb_bytes_to_slice(__pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1468, __pyx_L1_error)
  __pyx_v_c_value = __pyx_t_2;

  /* "rocksdb/_rocksdb.pyx":1470
 *         cdef Slice c_value = bytes_to_slice(value)
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             st = self.db.Put(opts, c_key, c_value)
 *         check_status(st)
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      #endif
      /*try:*/ {

        /* "rocksdb/_rocksdb.pyx":1471
 * 
 *         with nogil:
 *             st = self.db.Put(opts, c_key, c_value)             # <<<<<<<<<<<<<<
 *         check_status(st)
 * 
 */
        try {
          __pyx_t_3 = __pyx_v_self->db->Put(__pyx_v_opts, __pyx_v_c_key, __pyx_v_c_value);
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 1471, __pyx_L4_error)
        }
        __pyx_v_st = __pyx_t_3;
      }

      /* "rocksdb/_rocksdb.pyx":1470
 *         cdef Slice c_value = bytes_to_slice(value)
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             st = self.db.Put(opts, c_key, c_value)
 *         check_status(st)
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "rocksdb/_rocksdb.pyx":1472
 *         with nogil:
 *             st = self.db.Put(opts, c_key, c_value)
 *         check_status(st)             # <<<<<<<<<<<<<<
 * 
 *     def delete(self, key, sync=False, disable_wal=False):
 */
  __pyx_t_4 = __pyx_f_7rocksdb_8_rocksdb_check_status(__pyx_v_st); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1472, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "rocksdb/_rocksdb.pyx":1461
 *             self.opts.in_use = False
 * 
 *     def put(self, key, value, sync=False, disable_wal=False):             # <<<<<<<<<<<<<<
 *         cdef Status st
 *         cdef options.WriteOptions opts
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("rocksdb._rocksdb.DB.put", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1474
 *         check_status(st)
 * 
 *     def delete(self, key, sync=False, disable_wal=False):             # <<<<<<<<<<<<<<
 *         cdef Status st
 *         cdef options.WriteOptions opts
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_2DB_7delete(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_2DB_7delete(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_key = 0;
  PyObject *__pyx_v_sync = 0;
  PyObject *__pyx_v_disable_wal = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("delete (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_key,&__pyx_n_s_sync,&__pyx_n_s_disable_wal,0};
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject *)Py_False);
    values[2] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_key)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sync);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_disable_wal);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "delete") < 0)) __PYX_ERR(0, 1474, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_key = values[0];
    __pyx_v_sync = values[1];
    __pyx_v_disable_wal = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("delete", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1474, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.DB.delete", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_2DB_6delete(((struct __pyx_obj_7rocksdb_8_rocksdb_DB *)__pyx_v_self), __pyx_v_key, __pyx_v_sync, __pyx_v_disable_wal);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_2DB_6delete(struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_sync, PyObject *__pyx_v_disable_wal) {
  rocksdb::Status __pyx_v_st;
  rocksdb::WriteOptions __pyx_v_opts;
  rocksdb::Slice __pyx_v_c_key;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  rocksdb::Slice __pyx_t_2;
  rocksdb::Status __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("delete", 0);

  /* "rocksdb/_rocksdb.pyx":1477
 *         cdef Status st
 *         cdef options.WriteOptions opts
 *         opts.sync = sync             # <<<<<<<<<<<<<<
 *         opts.disableWAL = disable_wal
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_sync); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1477, __pyx_L1_error)
  __pyx_v_opts.sync = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1478
 *         cdef options.WriteOptions opts
 *         opts.sync = sync
 *         opts.disableWAL = disable_wal             # <<<<<<<<<<<<<<
 * 
 *         cdef Slice c_key = bytes_to_slice(key)
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_disable_wal); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1478, __pyx_L1_error)
  __pyx_v_opts.disableWAL = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1480
 *         opts.disableWAL = disable_wal
 * 
 *         cdef Slice c_key = bytes_to_slice(key)             # <<<<<<<<<<<<<<
 *         with nogil:
 *             st = self.db.Delete(opts, c_key)
 */
  __pyx_t_2 = __pyx_f_7rocksdb_8_rocksdb_bytes_to_slice(__pyx_v_key); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1480, __pyx_L1_error)
  __pyx_v_c_key = __pyx_t_2;

  /* "rocksdb/_rocksdb.pyx":1481
 * 
 *         cdef Slice c_key = bytes_to_slice(key)
 *         with nogil:             # <<<<<<<<<<<<<<
 *             st = self.db.Delete(opts, c_key)
 *         check_status(st)
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      #endif
      /*try:*/ {

        /* "rocksdb/_rocksdb.pyx":1482
 *         cdef Slice c_key = bytes_to_slice(key)
 *         with nogil:
 *             st = self.db.Delete(opts, c_key)             # <<<<<<<<<<<<<<
 *         check_status(st)
 * 
 */
        try {
          __pyx_t_3 = __pyx_v_self->db->Delete(__pyx_v_opts, __pyx_v_c_key);
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 1482, __pyx_L4_error)
        }
        __pyx_v_st = __pyx_t_3;
      }

      /* "rocksdb/_rocksdb.pyx":1481
 * 
 *         cdef Slice c_key = bytes_to_slice(key)
 *         with nogil:             # <<<<<<<<<<<<<<
 *             st = self.db.Delete(opts, c_key)
 *         check_status(st)
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "rocksdb/_rocksdb.pyx":1483
 *         with nogil:
 *             st = self.db.Delete(opts, c_key)
 *         check_status(st)             # <<<<<<<<<<<<<<
 * 
 *     def merge(self, key, value, sync=False, disable_wal=False):
 */
  __pyx_t_4 = __pyx_f_7rocksdb_8_rocksdb_check_status(__pyx_v_st); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1483, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "rocksdb/_rocksdb.pyx":1474
 *         check_status(st)
 * 
 *     def delete(self, key, sync=False, disable_wal=False):             # <<<<<<<<<<<<<<
 *         cdef Status st
 *         cdef options.WriteOptions opts
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("rocksdb._rocksdb.DB.delete", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1485
 *         check_status(st)
 * 
 *     def merge(self, key, value, sync=False, disable_wal=False):             # <<<<<<<<<<<<<<
 *         cdef Status st
 *         cdef options.WriteOptions opts
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_2DB_9merge(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_2DB_9merge(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_key = 0;
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_v_sync = 0;
  PyObject *__pyx_v_disable_wal = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("merge (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_key,&__pyx_n_s_value,&__pyx_n_s_sync,&__pyx_n_s_disable_wal,0};
    PyObject* values[4] = {0,0,0,0};
    values[2] = ((PyObject *)Py_False);
    values[3] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_key)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("merge", 0, 2, 4, 1); __PYX_ERR(0, 1485, __pyx_L3_error)
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sync);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_disable_wal);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "merge") < 0)) __PYX_ERR(0, 1485, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_key = values[0];
    __pyx_v_value = values[1];
    __pyx_v_sync = values[2];
    __pyx_v_disable_wal = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("merge", 0, 2, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1485, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.DB.merge", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_2DB_8merge(((struct __pyx_obj_7rocksdb_8_rocksdb_DB *)__pyx_v_self), __pyx_v_key, __pyx_v_value, __pyx_v_sync, __pyx_v_disable_wal);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_2DB_8merge(struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_value, PyObject *__pyx_v_sync, PyObject *__pyx_v_disable_wal) {
  rocksdb::Status __pyx_v_st;
  rocksdb::WriteOptions __pyx_v_opts;
  rocksdb::Slice __pyx_v_c_key;
  rocksdb::Slice __pyx_v_c_value;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  rocksdb::Slice __pyx_t_2;
  rocksdb::Status __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("merge", 0);

  /* "rocksdb/_rocksdb.pyx":1488
 *         cdef Status st
 *         cdef options.WriteOptions opts
 *         opts.sync = sync             # <<<<<<<<<<<<<<
 *         opts.disableWAL = disable_wal
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_sync); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1488, __pyx_L1_error)
  __pyx_v_opts.sync = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1489
 *         cdef options.WriteOptions opts
 *         opts.sync = sync
 *         opts.disableWAL = disable_wal             # <<<<<<<<<<<<<<
 * 
 *         cdef Slice c_key = bytes_to_slice(key)
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_disable_wal); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1489, __pyx_L1_error)
  __pyx_v_opts.disableWAL = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1491
 *         opts.disableWAL = disable_wal
 * 
 *         cdef Slice c_key = bytes_to_slice(key)             # <<<<<<<<<<<<<<
 *         cdef Slice c_value = bytes_to_slice(value)
 *         with nogil:
 */
  __pyx_t_2 = __pyx_f_7rocksdb_8_rocksdb_bytes_to_slice(__pyx_v_key); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1491, __pyx_L1_error)
  __pyx_v_c_key = __pyx_t_2;

  /* "rocksdb/_rocksdb.pyx":1492
 * 
 *         cdef Slice c_key = bytes_to_slice(key)
 *         cdef Slice c_value = bytes_to_slice(value)             # <<<<<<<<<<<<<<
 *         with nogil:
 *             st = self.db.Merge(opts, c_key, c_value)
 */
  __pyx_t_2 = __pyx_f_7rocksdb_8_rocksdb_bytes_to_slice(__pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1492, __pyx_L1_error)
  __pyx_v_c_value = __pyx_t_2;

  /* "rocksdb/_rocksdb.pyx":1493
 *         cdef Slice c_key = bytes_to_slice(key)
 *         cdef Slice c_value = bytes_to_slice(value)
 *         with nogil:             # <<<<<<<<<<<<<<
 *             st = self.db.Merge(opts, c_key, c_value)
 *         check_status(st)
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      #endif
      /*try:*/ {

        /* "rocksdb/_rocksdb.pyx":1494
 *         cdef Slice c_value = bytes_to_slice(value)
 *         with nogil:
 *             st = self.db.Merge(opts, c_key, c_value)             # <<<<<<<<<<<<<<
 *         check_status(st)
 * 
 */
        try {
          __pyx_t_3 = __pyx_v_self->db->Merge(__pyx_v_opts, __pyx_v_c_key, __pyx_v_c_value);
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 1494, __pyx_L4_error)
        }
        __pyx_v_st = __pyx_t_3;
      }

      /* "rocksdb/_rocksdb.pyx":1493
 *         cdef Slice c_key = bytes_to_slice(key)
 *         cdef Slice c_value = bytes_to_slice(value)
 *         with nogil:             # <<<<<<<<<<<<<<
 *             st = self.db.Merge(opts, c_key, c_value)
 *         check_status(st)
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "rocksdb/_rocksdb.pyx":1495
 *         with nogil:
 *             st = self.db.Merge(opts, c_key, c_value)
 *         check_status(st)             # <<<<<<<<<<<<<<
 * 
 *     def write(self, WriteBatch batch, sync=False, disable_wal=False):
 */
  __pyx_t_4 = __pyx_f_7rocksdb_8_rocksdb_check_status(__pyx_v_st); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1495, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "rocksdb/_rocksdb.pyx":1485
 *         check_status(st)
 * 
 *     def merge(self, key, value, sync=False, disable_wal=False):             # <<<<<<<<<<<<<<
 *         cdef Status st
 *         cdef options.WriteOptions opts
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("rocksdb._rocksdb.DB.merge", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1497
 *         check_status(st)
 * 
 *     def write(self, WriteBatch batch, sync=False, disable_wal=False):             # <<<<<<<<<<<<<<
 *         cdef Status st
 *         cdef options.WriteOptions opts
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_2DB_11write(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_2DB_11write(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatch *__pyx_v_batch = 0;
  PyObject *__pyx_v_sync = 0;
  PyObject *__pyx_v_disable_wal = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("write (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_batch,&__pyx_n_s_sync,&__pyx_n_s_disable_wal,0};
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject *)Py_False);
    values[2] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_batch)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sync);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_disable_wal);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "write") < 0)) __PYX_ERR(0, 1497, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_batch = ((struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatch *)values[0]);
    __pyx_v_sync = values[1];
    __pyx_v_disable_wal = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("write", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1497, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.DB.write", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_batch), __pyx_ptype_7rocksdb_8_rocksdb_WriteBatch, 1, "batch", 0))) __PYX_ERR(0, 1497, __pyx_L1_error)
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_2DB_10write(((struct __pyx_obj_7rocksdb_8_rocksdb_DB *)__pyx_v_self), __pyx_v_batch, __pyx_v_sync, __pyx_v_disable_wal);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_2DB_10write(struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self, struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatch *__pyx_v_batch, PyObject *__pyx_v_sync, PyObject *__pyx_v_disable_wal) {
  rocksdb::Status __pyx_v_st;
  rocksdb::WriteOptions __pyx_v_opts;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  rocksdb::Status __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("write", 0);

  /* "rocksdb/_rocksdb.pyx":1500
 *         cdef Status st
 *         cdef options.WriteOptions opts
 *         opts.sync = sync             # <<<<<<<<<<<<<<
 *         opts.disableWAL = disable_wal
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_sync); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1500, __pyx_L1_error)
  __pyx_v_opts.sync = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1501
 *         cdef options.WriteOptions opts
 *         opts.sync = sync
 *         opts.disableWAL = disable_wal             # <<<<<<<<<<<<<<
 * 
 *         with nogil:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_disable_wal); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1501, __pyx_L1_error)
  __pyx_v_opts.disableWAL = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1503
 *         opts.disableWAL = disable_wal
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             st = self.db.Write(opts, batch.batch)
 *         check_status(st)
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      #endif
      /*try:*/ {

        /* "rocksdb/_rocksdb.pyx":1504
 * 
 *         with nogil:
 *             st = self.db.Write(opts, batch.batch)             # <<<<<<<<<<<<<<
 *         check_status(st)
 * 
 */
        try {
          __pyx_t_2 = __pyx_v_self->db->Write(__pyx_v_opts, __pyx_v_batch->batch);
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 1504, __pyx_L4_error)
        }
        __pyx_v_st = __pyx_t_2;
      }

      /* "rocksdb/_rocksdb.pyx":1503
 *         opts.disableWAL = disable_wal
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             st = self.db.Write(opts, batch.batch)
 *         check_status(st)
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "rocksdb/_rocksdb.pyx":1505
 *         with nogil:
 *             st = self.db.Write(opts, batch.batch)
 *         check_status(st)             # <<<<<<<<<<<<<<
 * 
 *     def get(self, key, *args, **kwargs):
 */
  __pyx_t_3 = __pyx_f_7rocksdb_8_rocksdb_check_status(__pyx_v_st); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1505, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "rocksdb/_rocksdb.pyx":1497
 *         check_status(st)
 * 
 *     def write(self, WriteBatch batch, sync=False, disable_wal=False):             # <<<<<<<<<<<<<<
 *         cdef Status st
 *         cdef options.WriteOptions opts
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("rocksdb._rocksdb.DB.write", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1507
 *         check_status(st)
 * 
 *     def get(self, key, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         cdef string res
 *         cdef Status st
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_2DB_13get(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_2DB_13get(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_key = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 1) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 1, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return NULL;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_key,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_key)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 1) ? pos_args : 1;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "get") < 0)) __PYX_ERR(0, 1507, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) < 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_key = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get", 0, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1507, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("rocksdb._rocksdb.DB.get", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_2DB_12get(((struct __pyx_obj_7rocksdb_8_rocksdb_DB *)__pyx_v_self), __pyx_v_key, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_2DB_12get(struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  std::string __pyx_v_res;
  rocksdb::Status __pyx_v_st;
  rocksdb::ReadOptions __pyx_v_opts;
  rocksdb::Slice __pyx_v_c_key;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  rocksdb::Slice __pyx_t_3;
  rocksdb::Status __pyx_t_4;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("get", 0);

  /* "rocksdb/_rocksdb.pyx":1512
 *         cdef options.ReadOptions opts
 * 
 *         opts = self.build_read_opts(self.__parse_read_opts(*args, **kwargs))             # <<<<<<<<<<<<<<
 *         cdef Slice c_key = bytes_to_slice(key)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_parse_read_opts); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1512, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_v_args, __pyx_v_kwargs); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1512, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(PyDict_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 1512, __pyx_L1_error)
  __pyx_v_opts = ((struct __pyx_vtabstruct_7rocksdb_8_rocksdb_DB *)__pyx_v_self->__pyx_vtab)->build_read_opts(__pyx_v_self, ((PyObject*)__pyx_t_2));
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "rocksdb/_rocksdb.pyx":1513
 * 
 *         opts = self.build_read_opts(self.__parse_read_opts(*args, **kwargs))
 *         cdef Slice c_key = bytes_to_slice(key)             # <<<<<<<<<<<<<<
 * 
 *         with nogil:
 */
  __pyx_t_3 = __pyx_f_7rocksdb_8_rocksdb_bytes_to_slice(__pyx_v_key); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1513, __pyx_L1_error)
  __pyx_v_c_key = __pyx_t_3;

  /* "rocksdb/_rocksdb.pyx":1515
 *         cdef Slice c_key = bytes_to_slice(key)
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             st = self.db.Get(opts, c_key, cython.address(res))
 * 
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      #endif
      /*try:*/ {

        /* "rocksdb/_rocksdb.pyx":1516
 * 
 *         with nogil:
 *             st = self.db.Get(opts, c_key, cython.address(res))             # <<<<<<<<<<<<<<
 * 
 *         if st.ok():
 */
        try {
          __pyx_t_4 = __pyx_v_self->db->Get(__pyx_v_opts, __pyx_v_c_key, (&__pyx_v_res));
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 1516, __pyx_L4_error)
        }
        __pyx_v_st = __pyx_t_4;
      }

      /* "rocksdb/_rocksdb.pyx":1515
 *         cdef Slice c_key = bytes_to_slice(key)
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             st = self.db.Get(opts, c_key, cython.address(res))
 * 
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "rocksdb/_rocksdb.pyx":1518
 *             st = self.db.Get(opts, c_key, cython.address(res))
 * 
 *         if st.ok():             # <<<<<<<<<<<<<<
 *             return string_to_bytes(res)
 *         elif st.IsNotFound():
 */
  __pyx_t_5 = (__pyx_v_st.ok() != 0);
  if (__pyx_t_5) {

    /* "rocksdb/_rocksdb.pyx":1519
 * 
 *         if st.ok():
 *             return string_to_bytes(res)             # <<<<<<<<<<<<<<
 *         elif st.IsNotFound():
 *             return None
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_f_7rocksdb_8_rocksdb_string_to_bytes(__pyx_v_res); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1519, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "rocksdb/_rocksdb.pyx":1518
 *             st = self.db.Get(opts, c_key, cython.address(res))
 * 
 *         if st.ok():             # <<<<<<<<<<<<<<
 *             return string_to_bytes(res)
 *         elif st.IsNotFound():
 */
  }

  /* "rocksdb/_rocksdb.pyx":1520
 *         if st.ok():
 *             return string_to_bytes(res)
 *         elif st.IsNotFound():             # <<<<<<<<<<<<<<
 *             return None
 *         else:
 */
  __pyx_t_5 = (__pyx_v_st.IsNotFound() != 0);
  if (__pyx_t_5) {

    /* "rocksdb/_rocksdb.pyx":1521
 *             return string_to_bytes(res)
 *         elif st.IsNotFound():
 *             return None             # <<<<<<<<<<<<<<
 *         else:
 *             check_status(st)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;

    /* "rocksdb/_rocksdb.pyx":1520
 *         if st.ok():
 *             return string_to_bytes(res)
 *         elif st.IsNotFound():             # <<<<<<<<<<<<<<
 *             return None
 *         else:
 */
  }

  /* "rocksdb/_rocksdb.pyx":1523
 *             return None
 *         else:
 *             check_status(st)             # <<<<<<<<<<<<<<
 * 
 *     def multi_get(self, keys, *args, **kwargs):
 */
  /*else*/ {
    __pyx_t_2 = __pyx_f_7rocksdb_8_rocksdb_check_status(__pyx_v_st); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1523, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }

  /* "rocksdb/_rocksdb.pyx":1507
 *         check_status(st)
 * 
 *     def get(self, key, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         cdef string res
 *         cdef Status st
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("rocksdb._rocksdb.DB.get", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1525
 *             check_status(st)
 * 
 *     def multi_get(self, keys, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         cdef vector[string] values
 *         values.resize(len(keys))
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_2DB_15multi_get(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_2DB_15multi_get(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_keys = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("multi_get (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 1) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 1, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return NULL;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_keys,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_keys)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 1) ? pos_args : 1;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "multi_get") < 0)) __PYX_ERR(0, 1525, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) < 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_keys = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("multi_get", 0, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1525, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("rocksdb._rocksdb.DB.multi_get", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_2DB_14multi_get(((struct __pyx_obj_7rocksdb_8_rocksdb_DB *)__pyx_v_self), __pyx_v_keys, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_2DB_14multi_get(struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self, PyObject *__pyx_v_keys, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  std::vector<std::string>  __pyx_v_values;
  std::vector<rocksdb::Slice>  __pyx_v_c_keys;
  PyObject *__pyx_v_key = NULL;
  rocksdb::ReadOptions __pyx_v_opts;
  std::vector<rocksdb::Status>  __pyx_v_res;
  PyObject *__pyx_v_ret_dict = 0;
  Py_ssize_t __pyx_v_index;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  rocksdb::Slice __pyx_t_5;
  std::vector<rocksdb::Status>  __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  int __pyx_t_8;
  __Pyx_RefNannySetupContext("multi_get", 0);

  /* "rocksdb/_rocksdb.pyx":1527
 *     def multi_get(self, keys, *args, **kwargs):
 *         cdef vector[string] values
 *         values.resize(len(keys))             # <<<<<<<<<<<<<<
 * 
 *         cdef vector[Slice] c_keys
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_keys); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 1527, __pyx_L1_error)
  try {
    __pyx_v_values.resize(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1527, __pyx_L1_error)
  }

  /* "rocksdb/_rocksdb.pyx":1530
 * 
 *         cdef vector[Slice] c_keys
 *         for key in keys:             # <<<<<<<<<<<<<<
 *             c_keys.push_back(bytes_to_slice(key))
 * 
 */
  if (likely(PyList_CheckExact(__pyx_v_keys)) || PyTuple_CheckExact(__pyx_v_keys)) {
    __pyx_t_2 = __pyx_v_keys; __Pyx_INCREF(__pyx_t_2); __pyx_t_1 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_1 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_keys); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1530, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1530, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_4); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 1530, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1530, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_4); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 1530, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1530, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_2);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1530, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "rocksdb/_rocksdb.pyx":1531
 *         cdef vector[Slice] c_keys
 *         for key in keys:
 *             c_keys.push_back(bytes_to_slice(key))             # <<<<<<<<<<<<<<
 * 
 *         cdef options.ReadOptions opts
 */
    __pyx_t_5 = __pyx_f_7rocksdb_8_rocksdb_bytes_to_slice(__pyx_v_key); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1531, __pyx_L1_error)
    try {
      __pyx_v_c_keys.push_back(__pyx_t_5);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 1531, __pyx_L1_error)
    }

    /* "rocksdb/_rocksdb.pyx":1530
 * 
 *         cdef vector[Slice] c_keys
 *         for key in keys:             # <<<<<<<<<<<<<<
 *             c_keys.push_back(bytes_to_slice(key))
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "rocksdb/_rocksdb.pyx":1534
 * 
 *         cdef options.ReadOptions opts
 *         opts = self.build_read_opts(self.__parse_read_opts(*args, **kwargs))             # <<<<<<<<<<<<<<
 * 
 *         cdef vector[Status] res
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_parse_read_opts); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1534, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_v_args, __pyx_v_kwargs); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1534, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(PyDict_CheckExact(__pyx_t_4))||((__pyx_t_4) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_4)->tp_name), 0))) __PYX_ERR(0, 1534, __pyx_L1_error)
  __pyx_v_opts = ((struct __pyx_vtabstruct_7rocksdb_8_rocksdb_DB *)__pyx_v_self->__pyx_vtab)->build_read_opts(__pyx_v_self, ((PyObject*)__pyx_t_4));
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "rocksdb/_rocksdb.pyx":1537
 * 
 *         cdef vector[Status] res
 *         with nogil:             # <<<<<<<<<<<<<<
 *             res = self.db.MultiGet(
 *                 opts,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      #endif
      /*try:*/ {

        /* "rocksdb/_rocksdb.pyx":1538
 *         cdef vector[Status] res
 *         with nogil:
 *             res = self.db.MultiGet(             # <<<<<<<<<<<<<<
 *                 opts,
 *                 c_keys,
 */
        try {
          __pyx_t_6 = __pyx_v_self->db->MultiGet(__pyx_v_opts, __pyx_v_c_keys, (&__pyx_v_values));
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 1538, __pyx_L6_error)
        }
        __pyx_v_res = __pyx_t_6;
      }

      /* "rocksdb/_rocksdb.pyx":1537
 * 
 *         cdef vector[Status] res
 *         with nogil:             # <<<<<<<<<<<<<<
 *             res = self.db.MultiGet(
 *                 opts,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L7;
        }
        __pyx_L6_error: {
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L7:;
      }
  }

  /* "rocksdb/_rocksdb.pyx":1543
 *                 cython.address(values))
 * 
 *         cdef dict ret_dict = {}             # <<<<<<<<<<<<<<
 *         for index in range(len(keys)):
 *             if res[index].ok():
 */
  __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1543, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_v_ret_dict = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "rocksdb/_rocksdb.pyx":1544
 * 
 *         cdef dict ret_dict = {}
 *         for index in range(len(keys)):             # <<<<<<<<<<<<<<
 *             if res[index].ok():
 *                 ret_dict[keys[index]] = string_to_bytes(values[index])
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_keys); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 1544, __pyx_L1_error)
  for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_1; __pyx_t_7+=1) {
    __pyx_v_index = __pyx_t_7;

    /* "rocksdb/_rocksdb.pyx":1545
 *         cdef dict ret_dict = {}
 *         for index in range(len(keys)):
 *             if res[index].ok():             # <<<<<<<<<<<<<<
 *                 ret_dict[keys[index]] = string_to_bytes(values[index])
 *             elif res[index].IsNotFound():
 */
    __pyx_t_8 = ((__pyx_v_res[__pyx_v_index]).ok() != 0);
    if (__pyx_t_8) {

      /* "rocksdb/_rocksdb.pyx":1546
 *         for index in range(len(keys)):
 *             if res[index].ok():
 *                 ret_dict[keys[index]] = string_to_bytes(values[index])             # <<<<<<<<<<<<<<
 *             elif res[index].IsNotFound():
 *                 ret_dict[keys[index]] = None
 */
      __pyx_t_4 = __pyx_f_7rocksdb_8_rocksdb_string_to_bytes((__pyx_v_values[__pyx_v_index])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1546, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_keys, __pyx_v_index, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1546, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (unlikely(PyDict_SetItem(__pyx_v_ret_dict, __pyx_t_2, __pyx_t_4) < 0)) __PYX_ERR(0, 1546, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "rocksdb/_rocksdb.pyx":1545
 *         cdef dict ret_dict = {}
 *         for index in range(len(keys)):
 *             if res[index].ok():             # <<<<<<<<<<<<<<
 *                 ret_dict[keys[index]] = string_to_bytes(values[index])
 *             elif res[index].IsNotFound():
 */
      goto __pyx_L10;
    }

    /* "rocksdb/_rocksdb.pyx":1547
 *             if res[index].ok():
 *                 ret_dict[keys[index]] = string_to_bytes(values[index])
 *             elif res[index].IsNotFound():             # <<<<<<<<<<<<<<
 *                 ret_dict[keys[index]] = None
 *             else:
 */
    __pyx_t_8 = ((__pyx_v_res[__pyx_v_index]).IsNotFound() != 0);
    if (__pyx_t_8) {

      /* "rocksdb/_rocksdb.pyx":1548
 *                 ret_dict[keys[index]] = string_to_bytes(values[index])
 *             elif res[index].IsNotFound():
 *                 ret_dict[keys[index]] = None             # <<<<<<<<<<<<<<
 *             else:
 *                 check_status(res[index])
 */
      __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_keys, __pyx_v_index, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1548, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (unlikely(PyDict_SetItem(__pyx_v_ret_dict, __pyx_t_4, Py_None) < 0)) __PYX_ERR(0, 1548, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "rocksdb/_rocksdb.pyx":1547
 *             if res[index].ok():
 *                 ret_dict[keys[index]] = string_to_bytes(values[index])
 *             elif res[index].IsNotFound():             # <<<<<<<<<<<<<<
 *                 ret_dict[keys[index]] = None
 *             else:
 */
      goto __pyx_L10;
    }

    /* "rocksdb/_rocksdb.pyx":1550
 *                 ret_dict[keys[index]] = None
 *             else:
 *                 check_status(res[index])             # <<<<<<<<<<<<<<
 * 
 *         return ret_dict
 */
    /*else*/ {
      __pyx_t_4 = __pyx_f_7rocksdb_8_rocksdb_check_status((__pyx_v_res[__pyx_v_index])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1550, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __pyx_L10:;
  }

  /* "rocksdb/_rocksdb.pyx":1552
 *                 check_status(res[index])
 * 
 *         return ret_dict             # <<<<<<<<<<<<<<
 * 
 *     def key_may_exist(self, key, fetch=False, *args, **kwargs):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ret_dict);
  __pyx_r = __pyx_v_ret_dict;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1525
 *             check_status(st)
 * 
 *     def multi_get(self, keys, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         cdef vector[string] values
 *         values.resize(len(keys))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("rocksdb._rocksdb.DB.multi_get", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_ret_dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1554
 *         return ret_dict
 * 
 *     def key_may_exist(self, key, fetch=False, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         cdef string value
 *         cdef cpp_bool value_found
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_2DB_17key_may_exist(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_2DB_17key_may_exist(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_key = 0;
  PyObject *__pyx_v_fetch = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("key_may_exist (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 2) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 2, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return NULL;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_key,&__pyx_n_s_fetch,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_key)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fetch);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 2) ? pos_args : 2;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "key_may_exist") < 0)) __PYX_ERR(0, 1554, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        default:
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        case  0:
        goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_key = values[0];
    __pyx_v_fetch = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("key_may_exist", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1554, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("rocksdb._rocksdb.DB.key_may_exist", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_2DB_16key_may_exist(((struct __pyx_obj_7rocksdb_8_rocksdb_DB *)__pyx_v_self), __pyx_v_key, __pyx_v_fetch, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_2DB_16key_may_exist(struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_fetch, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  std::string __pyx_v_value;
  bool __pyx_v_value_found;
  bool __pyx_v_exists;
  rocksdb::ReadOptions __pyx_v_opts;
  rocksdb::Slice __pyx_v_c_key;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  rocksdb::Slice __pyx_t_3;
  int __pyx_t_4;
  bool __pyx_t_5;
  __Pyx_RefNannySetupContext("key_may_exist", 0);

  /* "rocksdb/_rocksdb.pyx":1560
 *         cdef options.ReadOptions opts
 *         cdef Slice c_key
 *         opts = self.build_read_opts(self.__parse_read_opts(*args, **kwargs))             # <<<<<<<<<<<<<<
 * 
 *         c_key = bytes_to_slice(key)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_parse_read_opts); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1560, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_v_args, __pyx_v_kwargs); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1560, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(PyDict_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 1560, __pyx_L1_error)
  __pyx_v_opts = ((struct __pyx_vtabstruct_7rocksdb_8_rocksdb_DB *)__pyx_v_self->__pyx_vtab)->build_read_opts(__pyx_v_self, ((PyObject*)__pyx_t_2));
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "rocksdb/_rocksdb.pyx":1562
 *         opts = self.build_read_opts(self.__parse_read_opts(*args, **kwargs))
 * 
 *         c_key = bytes_to_slice(key)             # <<<<<<<<<<<<<<
 *         exists = False
 * 
 */
  __pyx_t_3 = __pyx_f_7rocksdb_8_rocksdb_bytes_to_slice(__pyx_v_key); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1562, __pyx_L1_error)
  __pyx_v_c_key = __pyx_t_3;

  /* "rocksdb/_rocksdb.pyx":1563
 * 
 *         c_key = bytes_to_slice(key)
 *         exists = False             # <<<<<<<<<<<<<<
 * 
 *         if fetch:
 */
  __pyx_v_exists = 0;

  /* "rocksdb/_rocksdb.pyx":1565
 *         exists = False
 * 
 *         if fetch:             # <<<<<<<<<<<<<<
 *             value_found = False
 *             with nogil:
 */
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_fetch); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 1565, __pyx_L1_error)
  if (__pyx_t_4) {

    /* "rocksdb/_rocksdb.pyx":1566
 * 
 *         if fetch:
 *             value_found = False             # <<<<<<<<<<<<<<
 *             with nogil:
 *                 exists = self.db.KeyMayExist(
 */
    __pyx_v_value_found = 0;

    /* "rocksdb/_rocksdb.pyx":1567
 *         if fetch:
 *             value_found = False
 *             with nogil:             # <<<<<<<<<<<<<<
 *                 exists = self.db.KeyMayExist(
 *                     opts,
 */
    {
        #ifdef WITH_THREAD
        PyThreadState *_save;
        Py_UNBLOCK_THREADS
        #endif
        /*try:*/ {

          /* "rocksdb/_rocksdb.pyx":1568
 *             value_found = False
 *             with nogil:
 *                 exists = self.db.KeyMayExist(             # <<<<<<<<<<<<<<
 *                     opts,
 *                     c_key,
 */
          try {
            __pyx_t_5 = __pyx_v_self->db->KeyMayExist(__pyx_v_opts, __pyx_v_c_key, (&__pyx_v_value), (&__pyx_v_value_found));
          } catch(...) {
            #ifdef WITH_THREAD
            PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
            #endif
            __Pyx_CppExn2PyErr();
            #ifdef WITH_THREAD
            PyGILState_Release(__pyx_gilstate_save);
            #endif
            __PYX_ERR(0, 1568, __pyx_L5_error)
          }
          __pyx_v_exists = __pyx_t_5;
        }

        /* "rocksdb/_rocksdb.pyx":1567
 *         if fetch:
 *             value_found = False
 *             with nogil:             # <<<<<<<<<<<<<<
 *                 exists = self.db.KeyMayExist(
 *                     opts,
 */
        /*finally:*/ {
          /*normal exit:*/{
            #ifdef WITH_THREAD
            Py_BLOCK_THREADS
            #endif
            goto __pyx_L6;
          }
          __pyx_L5_error: {
            #ifdef WITH_THREAD
            Py_BLOCK_THREADS
            #endif
            goto __pyx_L1_error;
          }
          __pyx_L6:;
        }
    }

    /* "rocksdb/_rocksdb.pyx":1574
 *                     cython.address(value_found))
 * 
 *             if exists:             # <<<<<<<<<<<<<<
 *                 if value_found:
 *                     return (True, string_to_bytes(value))
 */
    __pyx_t_4 = (__pyx_v_exists != 0);
    if (__pyx_t_4) {

      /* "rocksdb/_rocksdb.pyx":1575
 * 
 *             if exists:
 *                 if value_found:             # <<<<<<<<<<<<<<
 *                     return (True, string_to_bytes(value))
 *                 else:
 */
      __pyx_t_4 = (__pyx_v_value_found != 0);
      if (__pyx_t_4) {

        /* "rocksdb/_rocksdb.pyx":1576
 *             if exists:
 *                 if value_found:
 *                     return (True, string_to_bytes(value))             # <<<<<<<<<<<<<<
 *                 else:
 *                     return (True, None)
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_2 = __pyx_f_7rocksdb_8_rocksdb_string_to_bytes(__pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1576, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1576, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_INCREF(Py_True);
        __Pyx_GIVEREF(Py_True);
        PyTuple_SET_ITEM(__pyx_t_1, 0, Py_True);
        __Pyx_GIVEREF(__pyx_t_2);
        PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
        __pyx_t_2 = 0;
        __pyx_r = __pyx_t_1;
        __pyx_t_1 = 0;
        goto __pyx_L0;

        /* "rocksdb/_rocksdb.pyx":1575
 * 
 *             if exists:
 *                 if value_found:             # <<<<<<<<<<<<<<
 *                     return (True, string_to_bytes(value))
 *                 else:
 */
      }

      /* "rocksdb/_rocksdb.pyx":1578
 *                     return (True, string_to_bytes(value))
 *                 else:
 *                     return (True, None)             # <<<<<<<<<<<<<<
 *             else:
 *                 return (False, None)
 */
      /*else*/ {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_tuple__8);
        __pyx_r = __pyx_tuple__8;
        goto __pyx_L0;
      }

      /* "rocksdb/_rocksdb.pyx":1574
 *                     cython.address(value_found))
 * 
 *             if exists:             # <<<<<<<<<<<<<<
 *                 if value_found:
 *                     return (True, string_to_bytes(value))
 */
    }

    /* "rocksdb/_rocksdb.pyx":1580
 *                     return (True, None)
 *             else:
 *                 return (False, None)             # <<<<<<<<<<<<<<
 *         else:
 *             with nogil:
 */
    /*else*/ {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_tuple__9);
      __pyx_r = __pyx_tuple__9;
      goto __pyx_L0;
    }

    /* "rocksdb/_rocksdb.pyx":1565
 *         exists = False
 * 
 *         if fetch:             # <<<<<<<<<<<<<<
 *             value_found = False
 *             with nogil:
 */
  }

  /* "rocksdb/_rocksdb.pyx":1582
 *                 return (False, None)
 *         else:
 *             with nogil:             # <<<<<<<<<<<<<<
 *                 exists = self.db.KeyMayExist(
 *                     opts,
 */
  /*else*/ {
    {
        #ifdef WITH_THREAD
        PyThreadState *_save;
        Py_UNBLOCK_THREADS
        #endif
        /*try:*/ {

          /* "rocksdb/_rocksdb.pyx":1583
 *         else:
 *             with nogil:
 *                 exists = self.db.KeyMayExist(             # <<<<<<<<<<<<<<
 *                     opts,
 *                     c_key,
 */
          try {
            __pyx_t_5 = __pyx_v_self->db->KeyMayExist(__pyx_v_opts, __pyx_v_c_key, (&__pyx_v_value));
          } catch(...) {
            #ifdef WITH_THREAD
            PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
            #endif
            __Pyx_CppExn2PyErr();
            #ifdef WITH_THREAD
            PyGILState_Release(__pyx_gilstate_save);
            #endif
            __PYX_ERR(0, 1583, __pyx_L10_error)
          }
          __pyx_v_exists = __pyx_t_5;
        }

        /* "rocksdb/_rocksdb.pyx":1582
 *                 return (False, None)
 *         else:
 *             with nogil:             # <<<<<<<<<<<<<<
 *                 exists = self.db.KeyMayExist(
 *                     opts,
 */
        /*finally:*/ {
          /*normal exit:*/{
            #ifdef WITH_THREAD
            Py_BLOCK_THREADS
            #endif
            goto __pyx_L11;
          }
          __pyx_L10_error: {
            #ifdef WITH_THREAD
            Py_BLOCK_THREADS
            #endif
            goto __pyx_L1_error;
          }
          __pyx_L11:;
        }
    }

    /* "rocksdb/_rocksdb.pyx":1588
 *                     cython.address(value))
 * 
 *             return (exists, None)             # <<<<<<<<<<<<<<
 * 
 *     def iterkeys(self, *args, **kwargs):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_exists); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1588, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1588, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_2, 1, Py_None);
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "rocksdb/_rocksdb.pyx":1554
 *         return ret_dict
 * 
 *     def key_may_exist(self, key, fetch=False, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         cdef string value
 *         cdef cpp_bool value_found
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("rocksdb._rocksdb.DB.key_may_exist", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1590
 *             return (exists, None)
 * 
 *     def iterkeys(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         cdef options.ReadOptions opts
 *         cdef KeysIterator it
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_2DB_19iterkeys(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_2DB_19iterkeys(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("iterkeys (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "iterkeys", 1))) return NULL;
  if (unlikely(__pyx_kwds)) {
    __pyx_v_kwargs = PyDict_Copy(__pyx_kwds); if (unlikely(!__pyx_v_kwargs)) return NULL;
    __Pyx_GOTREF(__pyx_v_kwargs);
  } else {
    __pyx_v_kwargs = NULL;
  }
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_2DB_18iterkeys(((struct __pyx_obj_7rocksdb_8_rocksdb_DB *)__pyx_v_self), __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_2DB_18iterkeys(struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  rocksdb::ReadOptions __pyx_v_opts;
  struct __pyx_obj_7rocksdb_8_rocksdb_KeysIterator *__pyx_v_it = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  rocksdb::Iterator *__pyx_t_3;
  __Pyx_RefNannySetupContext("iterkeys", 0);

  /* "rocksdb/_rocksdb.pyx":1594
 *         cdef KeysIterator it
 * 
 *         opts = self.build_read_opts(self.__parse_read_opts(*args, **kwargs))             # <<<<<<<<<<<<<<
 *         it = KeysIterator(self)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_parse_read_opts); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1594, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_v_args, __pyx_v_kwargs); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1594, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(PyDict_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 1594, __pyx_L1_error)
  __pyx_v_opts = ((struct __pyx_vtabstruct_7rocksdb_8_rocksdb_DB *)__pyx_v_self->__pyx_vtab)->build_read_opts(__pyx_v_self, ((PyObject*)__pyx_t_2));
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "rocksdb/_rocksdb.pyx":1595
 * 
 *         opts = self.build_read_opts(self.__parse_read_opts(*args, **kwargs))
 *         it = KeysIterator(self)             # <<<<<<<<<<<<<<
 * 
 *         with nogil:
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1595, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_KeysIterator), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1595, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_it = ((struct __pyx_obj_7rocksdb_8_rocksdb_KeysIterator *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":1597
 *         it = KeysIterator(self)
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             it.ptr = self.db.NewIterator(opts)
 *         return it
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      #endif
      /*try:*/ {

        /* "rocksdb/_rocksdb.pyx":1598
 * 
 *         with nogil:
 *             it.ptr = self.db.NewIterator(opts)             # <<<<<<<<<<<<<<
 *         return it
 * 
 */
        try {
          __pyx_t_3 = __pyx_v_self->db->NewIterator(__pyx_v_opts);
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 1598, __pyx_L4_error)
        }
        __pyx_v_it->__pyx_base.ptr = __pyx_t_3;
      }

      /* "rocksdb/_rocksdb.pyx":1597
 *         it = KeysIterator(self)
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             it.ptr = self.db.NewIterator(opts)
 *         return it
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "rocksdb/_rocksdb.pyx":1599
 *         with nogil:
 *             it.ptr = self.db.NewIterator(opts)
 *         return it             # <<<<<<<<<<<<<<
 * 
 *     def itervalues(self, *args, **kwargs):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_it));
  __pyx_r = ((PyObject *)__pyx_v_it);
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1590
 *             return (exists, None)
 * 
 *     def iterkeys(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         cdef options.ReadOptions opts
 *         cdef KeysIterator it
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("rocksdb._rocksdb.DB.iterkeys", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_it);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1601
 *         return it
 * 
 *     def itervalues(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         cdef options.ReadOptions opts
 *         cdef ValuesIterator it
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_2DB_21itervalues(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_2DB_21itervalues(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("itervalues (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "itervalues", 1))) return NULL;
  if (unlikely(__pyx_kwds)) {
    __pyx_v_kwargs = PyDict_Copy(__pyx_kwds); if (unlikely(!__pyx_v_kwargs)) return NULL;
    __Pyx_GOTREF(__pyx_v_kwargs);
  } else {
    __pyx_v_kwargs = NULL;
  }
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_2DB_20itervalues(((struct __pyx_obj_7rocksdb_8_rocksdb_DB *)__pyx_v_self), __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_2DB_20itervalues(struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  rocksdb::ReadOptions __pyx_v_opts;
  struct __pyx_obj_7rocksdb_8_rocksdb_ValuesIterator *__pyx_v_it = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  rocksdb::Iterator *__pyx_t_3;
  __Pyx_RefNannySetupContext("itervalues", 0);

  /* "rocksdb/_rocksdb.pyx":1605
 *         cdef ValuesIterator it
 * 
 *         opts = self.build_read_opts(self.__parse_read_opts(*args, **kwargs))             # <<<<<<<<<<<<<<
 * 
 *         it = ValuesIterator(self)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_parse_read_opts); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1605, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_v_args, __pyx_v_kwargs); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1605, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(PyDict_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 1605, __pyx_L1_error)
  __pyx_v_opts = ((struct __pyx_vtabstruct_7rocksdb_8_rocksdb_DB *)__pyx_v_self->__pyx_vtab)->build_read_opts(__pyx_v_self, ((PyObject*)__pyx_t_2));
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "rocksdb/_rocksdb.pyx":1607
 *         opts = self.build_read_opts(self.__parse_read_opts(*args, **kwargs))
 * 
 *         it = ValuesIterator(self)             # <<<<<<<<<<<<<<
 * 
 *         with nogil:
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1607, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_ValuesIterator), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1607, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_it = ((struct __pyx_obj_7rocksdb_8_rocksdb_ValuesIterator *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":1609
 *         it = ValuesIterator(self)
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             it.ptr = self.db.NewIterator(opts)
 *         return it
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      #endif
      /*try:*/ {

        /* "rocksdb/_rocksdb.pyx":1610
 * 
 *         with nogil:
 *             it.ptr = self.db.NewIterator(opts)             # <<<<<<<<<<<<<<
 *         return it
 * 
 */
        try {
          __pyx_t_3 = __pyx_v_self->db->NewIterator(__pyx_v_opts);
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 1610, __pyx_L4_error)
        }
        __pyx_v_it->__pyx_base.ptr = __pyx_t_3;
      }

      /* "rocksdb/_rocksdb.pyx":1609
 *         it = ValuesIterator(self)
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             it.ptr = self.db.NewIterator(opts)
 *         return it
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "rocksdb/_rocksdb.pyx":1611
 *         with nogil:
 *             it.ptr = self.db.NewIterator(opts)
 *         return it             # <<<<<<<<<<<<<<
 * 
 *     def iteritems(self, *args, **kwargs):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_it));
  __pyx_r = ((PyObject *)__pyx_v_it);
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1601
 *         return it
 * 
 *     def itervalues(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         cdef options.ReadOptions opts
 *         cdef ValuesIterator it
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("rocksdb._rocksdb.DB.itervalues", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_it);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1613
 *         return it
 * 
 *     def iteritems(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         cdef options.ReadOptions opts
 *         cdef ItemsIterator it
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_2DB_23iteritems(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_2DB_23iteritems(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("iteritems (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "iteritems", 1))) return NULL;
  if (unlikely(__pyx_kwds)) {
    __pyx_v_kwargs = PyDict_Copy(__pyx_kwds); if (unlikely(!__pyx_v_kwargs)) return NULL;
    __Pyx_GOTREF(__pyx_v_kwargs);
  } else {
    __pyx_v_kwargs = NULL;
  }
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_2DB_22iteritems(((struct __pyx_obj_7rocksdb_8_rocksdb_DB *)__pyx_v_self), __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_2DB_22iteritems(struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  rocksdb::ReadOptions __pyx_v_opts;
  struct __pyx_obj_7rocksdb_8_rocksdb_ItemsIterator *__pyx_v_it = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  rocksdb::Iterator *__pyx_t_3;
  __Pyx_RefNannySetupContext("iteritems", 0);

  /* "rocksdb/_rocksdb.pyx":1617
 *         cdef ItemsIterator it
 * 
 *         opts = self.build_read_opts(self.__parse_read_opts(*args, **kwargs))             # <<<<<<<<<<<<<<
 * 
 *         it = ItemsIterator(self)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_parse_read_opts); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1617, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_v_args, __pyx_v_kwargs); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1617, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(PyDict_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 1617, __pyx_L1_error)
  __pyx_v_opts = ((struct __pyx_vtabstruct_7rocksdb_8_rocksdb_DB *)__pyx_v_self->__pyx_vtab)->build_read_opts(__pyx_v_self, ((PyObject*)__pyx_t_2));
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "rocksdb/_rocksdb.pyx":1619
 *         opts = self.build_read_opts(self.__parse_read_opts(*args, **kwargs))
 * 
 *         it = ItemsIterator(self)             # <<<<<<<<<<<<<<
 * 
 *         with nogil:
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1619, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_ItemsIterator), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1619, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_it = ((struct __pyx_obj_7rocksdb_8_rocksdb_ItemsIterator *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":1621
 *         it = ItemsIterator(self)
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             it.ptr = self.db.NewIterator(opts)
 *         return it
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      #endif
      /*try:*/ {

        /* "rocksdb/_rocksdb.pyx":1622
 * 
 *         with nogil:
 *             it.ptr = self.db.NewIterator(opts)             # <<<<<<<<<<<<<<
 *         return it
 * 
 */
        try {
          __pyx_t_3 = __pyx_v_self->db->NewIterator(__pyx_v_opts);
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 1622, __pyx_L4_error)
        }
        __pyx_v_it->__pyx_base.ptr = __pyx_t_3;
      }

      /* "rocksdb/_rocksdb.pyx":1621
 *         it = ItemsIterator(self)
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             it.ptr = self.db.NewIterator(opts)
 *         return it
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "rocksdb/_rocksdb.pyx":1623
 *         with nogil:
 *             it.ptr = self.db.NewIterator(opts)
 *         return it             # <<<<<<<<<<<<<<
 * 
 *     def snapshot(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_it));
  __pyx_r = ((PyObject *)__pyx_v_it);
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1613
 *         return it
 * 
 *     def iteritems(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         cdef options.ReadOptions opts
 *         cdef ItemsIterator it
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("rocksdb._rocksdb.DB.iteritems", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_it);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1625
 *         return it
 * 
 *     def snapshot(self):             # <<<<<<<<<<<<<<
 *         return Snapshot(self)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_2DB_25snapshot(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_2DB_25snapshot(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("snapshot (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_2DB_24snapshot(((struct __pyx_obj_7rocksdb_8_rocksdb_DB *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_2DB_24snapshot(struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("snapshot", 0);

  /* "rocksdb/_rocksdb.pyx":1626
 * 
 *     def snapshot(self):
 *         return Snapshot(self)             # <<<<<<<<<<<<<<
 * 
 *     def get_property(self, prop):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1626, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_Snapshot), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1626, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1625
 *         return it
 * 
 *     def snapshot(self):             # <<<<<<<<<<<<<<
 *         return Snapshot(self)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("rocksdb._rocksdb.DB.snapshot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1628
 *         return Snapshot(self)
 * 
 *     def get_property(self, prop):             # <<<<<<<<<<<<<<
 *         cdef string value
 *         cdef Slice c_prop = bytes_to_slice(prop)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_2DB_27get_property(PyObject *__pyx_v_self, PyObject *__pyx_v_prop); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_2DB_27get_property(PyObject *__pyx_v_self, PyObject *__pyx_v_prop) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_property (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_2DB_26get_property(((struct __pyx_obj_7rocksdb_8_rocksdb_DB *)__pyx_v_self), ((PyObject *)__pyx_v_prop));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_2DB_26get_property(struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self, PyObject *__pyx_v_prop) {
  std::string __pyx_v_value;
  rocksdb::Slice __pyx_v_c_prop;
  bool __pyx_v_ret;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  rocksdb::Slice __pyx_t_1;
  bool __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("get_property", 0);

  /* "rocksdb/_rocksdb.pyx":1630
 *     def get_property(self, prop):
 *         cdef string value
 *         cdef Slice c_prop = bytes_to_slice(prop)             # <<<<<<<<<<<<<<
 *         cdef cpp_bool ret = False
 * 
 */
  __pyx_t_1 = __pyx_f_7rocksdb_8_rocksdb_bytes_to_slice(__pyx_v_prop); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1630, __pyx_L1_error)
  __pyx_v_c_prop = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1631
 *         cdef string value
 *         cdef Slice c_prop = bytes_to_slice(prop)
 *         cdef cpp_bool ret = False             # <<<<<<<<<<<<<<
 * 
 *         with nogil:
 */
  __pyx_v_ret = 0;

  /* "rocksdb/_rocksdb.pyx":1633
 *         cdef cpp_bool ret = False
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             ret = self.db.GetProperty(c_prop, cython.address(value))
 * 
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      #endif
      /*try:*/ {

        /* "rocksdb/_rocksdb.pyx":1634
 * 
 *         with nogil:
 *             ret = self.db.GetProperty(c_prop, cython.address(value))             # <<<<<<<<<<<<<<
 * 
 *         if ret:
 */
        try {
          __pyx_t_2 = __pyx_v_self->db->GetProperty(__pyx_v_c_prop, (&__pyx_v_value));
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 1634, __pyx_L4_error)
        }
        __pyx_v_ret = __pyx_t_2;
      }

      /* "rocksdb/_rocksdb.pyx":1633
 *         cdef cpp_bool ret = False
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             ret = self.db.GetProperty(c_prop, cython.address(value))
 * 
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "rocksdb/_rocksdb.pyx":1636
 *             ret = self.db.GetProperty(c_prop, cython.address(value))
 * 
 *         if ret:             # <<<<<<<<<<<<<<
 *             return string_to_bytes(value)
 *         else:
 */
  __pyx_t_3 = (__pyx_v_ret != 0);
  if (__pyx_t_3) {

    /* "rocksdb/_rocksdb.pyx":1637
 * 
 *         if ret:
 *             return string_to_bytes(value)             # <<<<<<<<<<<<<<
 *         else:
 *             return None
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __pyx_f_7rocksdb_8_rocksdb_string_to_bytes(__pyx_v_value); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1637, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "rocksdb/_rocksdb.pyx":1636
 *             ret = self.db.GetProperty(c_prop, cython.address(value))
 * 
 *         if ret:             # <<<<<<<<<<<<<<
 *             return string_to_bytes(value)
 *         else:
 */
  }

  /* "rocksdb/_rocksdb.pyx":1639
 *             return string_to_bytes(value)
 *         else:
 *             return None             # <<<<<<<<<<<<<<
 * 
 *     def get_live_files_metadata(self):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;
  }

  /* "rocksdb/_rocksdb.pyx":1628
 *         return Snapshot(self)
 * 
 *     def get_property(self, prop):             # <<<<<<<<<<<<<<
 *         cdef string value
 *         cdef Slice c_prop = bytes_to_slice(prop)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("rocksdb._rocksdb.DB.get_property", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1641
 *             return None
 * 
 *     def get_live_files_metadata(self):             # <<<<<<<<<<<<<<
 *         cdef vector[db.LiveFileMetaData] metadata
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_2DB_29get_live_files_metadata(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_2DB_29get_live_files_metadata(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_live_files_metadata (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_2DB_28get_live_files_metadata(((struct __pyx_obj_7rocksdb_8_rocksdb_DB *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_2DB_28get_live_files_metadata(struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self) {
  std::vector<struct rocksdb::LiveFileMetaData>  __pyx_v_metadata;
  PyObject *__pyx_v_ret = NULL;
  struct rocksdb::LiveFileMetaData __pyx_v_ob;
  PyObject *__pyx_v_t = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::vector<struct rocksdb::LiveFileMetaData> ::iterator __pyx_t_2;
  struct rocksdb::LiveFileMetaData __pyx_t_3;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("get_live_files_metadata", 0);

  /* "rocksdb/_rocksdb.pyx":1644
 *         cdef vector[db.LiveFileMetaData] metadata
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self.db.GetLiveFilesMetaData(cython.address(metadata))
 * 
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      #endif
      /*try:*/ {

        /* "rocksdb/_rocksdb.pyx":1645
 * 
 *         with nogil:
 *             self.db.GetLiveFilesMetaData(cython.address(metadata))             # <<<<<<<<<<<<<<
 * 
 *         ret = []
 */
        try {
          __pyx_v_self->db->GetLiveFilesMetaData((&__pyx_v_metadata));
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 1645, __pyx_L4_error)
        }
      }

      /* "rocksdb/_rocksdb.pyx":1644
 *         cdef vector[db.LiveFileMetaData] metadata
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self.db.GetLiveFilesMetaData(cython.address(metadata))
 * 
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "rocksdb/_rocksdb.pyx":1647
 *             self.db.GetLiveFilesMetaData(cython.address(metadata))
 * 
 *         ret = []             # <<<<<<<<<<<<<<
 *         for ob in metadata:
 *             t = {}
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1647, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_ret = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":1648
 * 
 *         ret = []
 *         for ob in metadata:             # <<<<<<<<<<<<<<
 *             t = {}
 *             t['name'] = string_to_path(ob.name)
 */
  __pyx_t_2 = __pyx_v_metadata.begin();
  for (;;) {
    if (!(__pyx_t_2 != __pyx_v_metadata.end())) break;
    __pyx_t_3 = *__pyx_t_2;
    ++__pyx_t_2;
    __pyx_v_ob = __pyx_t_3;

    /* "rocksdb/_rocksdb.pyx":1649
 *         ret = []
 *         for ob in metadata:
 *             t = {}             # <<<<<<<<<<<<<<
 *             t['name'] = string_to_path(ob.name)
 *             t['level'] = ob.level
 */
    __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1649, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_t, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "rocksdb/_rocksdb.pyx":1650
 *         for ob in metadata:
 *             t = {}
 *             t['name'] = string_to_path(ob.name)             # <<<<<<<<<<<<<<
 *             t['level'] = ob.level
 *             t['size'] = ob.size
 */
    __pyx_t_1 = __pyx_f_7rocksdb_8_rocksdb_string_to_path(__pyx_v_ob.name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1650, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(PyDict_SetItem(__pyx_v_t, __pyx_n_s_name, __pyx_t_1) < 0)) __PYX_ERR(0, 1650, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "rocksdb/_rocksdb.pyx":1651
 *             t = {}
 *             t['name'] = string_to_path(ob.name)
 *             t['level'] = ob.level             # <<<<<<<<<<<<<<
 *             t['size'] = ob.size
 *             t['smallestkey'] = string_to_bytes(ob.smallestkey)
 */
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_ob.level); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1651, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(PyDict_SetItem(__pyx_v_t, __pyx_n_s_level, __pyx_t_1) < 0)) __PYX_ERR(0, 1651, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "rocksdb/_rocksdb.pyx":1652
 *             t['name'] = string_to_path(ob.name)
 *             t['level'] = ob.level
 *             t['size'] = ob.size             # <<<<<<<<<<<<<<
 *             t['smallestkey'] = string_to_bytes(ob.smallestkey)
 *             t['largestkey'] = string_to_bytes(ob.largestkey)
 */
    __pyx_t_1 = __Pyx_PyInt_From_uint64_t(__pyx_v_ob.size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1652, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(PyDict_SetItem(__pyx_v_t, __pyx_n_s_size, __pyx_t_1) < 0)) __PYX_ERR(0, 1652, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "rocksdb/_rocksdb.pyx":1653
 *             t['level'] = ob.level
 *             t['size'] = ob.size
 *             t['smallestkey'] = string_to_bytes(ob.smallestkey)             # <<<<<<<<<<<<<<
 *             t['largestkey'] = string_to_bytes(ob.largestkey)
 *             t['smallest_seqno'] = ob.smallest_seqno
 */
    __pyx_t_1 = __pyx_f_7rocksdb_8_rocksdb_string_to_bytes(__pyx_v_ob.smallestkey); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1653, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(PyDict_SetItem(__pyx_v_t, __pyx_n_s_smallestkey, __pyx_t_1) < 0)) __PYX_ERR(0, 1653, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "rocksdb/_rocksdb.pyx":1654
 *             t['size'] = ob.size
 *             t['smallestkey'] = string_to_bytes(ob.smallestkey)
 *             t['largestkey'] = string_to_bytes(ob.largestkey)             # <<<<<<<<<<<<<<
 *             t['smallest_seqno'] = ob.smallest_seqno
 *             t['largest_seqno'] = ob.largest_seqno
 */
    __pyx_t_1 = __pyx_f_7rocksdb_8_rocksdb_string_to_bytes(__pyx_v_ob.largestkey); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1654, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(PyDict_SetItem(__pyx_v_t, __pyx_n_s_largestkey, __pyx_t_1) < 0)) __PYX_ERR(0, 1654, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "rocksdb/_rocksdb.pyx":1655
 *             t['smallestkey'] = string_to_bytes(ob.smallestkey)
 *             t['largestkey'] = string_to_bytes(ob.largestkey)
 *             t['smallest_seqno'] = ob.smallest_seqno             # <<<<<<<<<<<<<<
 *             t['largest_seqno'] = ob.largest_seqno
 * 
 */
    __pyx_t_1 = __Pyx_PyInt_From_uint64_t(__pyx_v_ob.smallest_seqno); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1655, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(PyDict_SetItem(__pyx_v_t, __pyx_n_s_smallest_seqno, __pyx_t_1) < 0)) __PYX_ERR(0, 1655, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "rocksdb/_rocksdb.pyx":1656
 *             t['largestkey'] = string_to_bytes(ob.largestkey)
 *             t['smallest_seqno'] = ob.smallest_seqno
 *             t['largest_seqno'] = ob.largest_seqno             # <<<<<<<<<<<<<<
 * 
 *             ret.append(t)
 */
    __pyx_t_1 = __Pyx_PyInt_From_uint64_t(__pyx_v_ob.largest_seqno); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1656, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(PyDict_SetItem(__pyx_v_t, __pyx_n_s_largest_seqno, __pyx_t_1) < 0)) __PYX_ERR(0, 1656, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "rocksdb/_rocksdb.pyx":1658
 *             t['largest_seqno'] = ob.largest_seqno
 * 
 *             ret.append(t)             # <<<<<<<<<<<<<<
 * 
 *         return ret
 */
    __pyx_t_4 = __Pyx_PyList_Append(__pyx_v_ret, __pyx_v_t); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(0, 1658, __pyx_L1_error)

    /* "rocksdb/_rocksdb.pyx":1648
 * 
 *         ret = []
 *         for ob in metadata:             # <<<<<<<<<<<<<<
 *             t = {}
 *             t['name'] = string_to_path(ob.name)
 */
  }

  /* "rocksdb/_rocksdb.pyx":1660
 *             ret.append(t)
 * 
 *         return ret             # <<<<<<<<<<<<<<
 * 
 *     def compact_range(self, begin=None, end=None, **py_options):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ret);
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1641
 *             return None
 * 
 *     def get_live_files_metadata(self):             # <<<<<<<<<<<<<<
 *         cdef vector[db.LiveFileMetaData] metadata
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.DB.get_live_files_metadata", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1662
 *         return ret
 * 
 *     def compact_range(self, begin=None, end=None, **py_options):             # <<<<<<<<<<<<<<
 *         cdef options.CompactRangeOptions c_options
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_2DB_31compact_range(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_2DB_31compact_range(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_begin = 0;
  PyObject *__pyx_v_end = 0;
  PyObject *__pyx_v_py_options = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compact_range (wrapper)", 0);
  __pyx_v_py_options = PyDict_New(); if (unlikely(!__pyx_v_py_options)) return NULL;
  __Pyx_GOTREF(__pyx_v_py_options);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_begin,&__pyx_n_s_end,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_begin);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_end);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_py_options, values, pos_args, "compact_range") < 0)) __PYX_ERR(0, 1662, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_begin = values[0];
    __pyx_v_end = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("compact_range", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1662, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_py_options); __pyx_v_py_options = 0;
  __Pyx_AddTraceback("rocksdb._rocksdb.DB.compact_range", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_2DB_30compact_range(((struct __pyx_obj_7rocksdb_8_rocksdb_DB *)__pyx_v_self), __pyx_v_begin, __pyx_v_end, __pyx_v_py_options);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_py_options);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_2DB_30compact_range(struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self, PyObject *__pyx_v_begin, PyObject *__pyx_v_end, PyObject *__pyx_v_py_options) {
  rocksdb::CompactRangeOptions __pyx_v_c_options;
  PyObject *__pyx_v_blc = NULL;
  rocksdb::Status __pyx_v_st;
  rocksdb::Slice __pyx_v_begin_val;
  rocksdb::Slice __pyx_v_end_val;
  rocksdb::Slice *__pyx_v_begin_ptr;
  rocksdb::Slice *__pyx_v_end_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  bool __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  rocksdb::Slice __pyx_t_6;
  rocksdb::Status __pyx_t_7;
  __Pyx_RefNannySetupContext("compact_range", 0);

  /* "rocksdb/_rocksdb.pyx":1665
 *         cdef options.CompactRangeOptions c_options
 * 
 *         c_options.change_level = py_options.get('change_level', False)             # <<<<<<<<<<<<<<
 *         c_options.target_level = py_options.get('target_level', -1)
 * 
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_py_options, __pyx_n_s_change_level, Py_False); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1665, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_2 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1665, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_c_options.change_level = __pyx_t_2;

  /* "rocksdb/_rocksdb.pyx":1666
 * 
 *         c_options.change_level = py_options.get('change_level', False)
 *         c_options.target_level = py_options.get('target_level', -1)             # <<<<<<<<<<<<<<
 * 
 *         blc = py_options.get('bottommost_level_compaction', 'if_compaction_filter')
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_py_options, __pyx_n_s_target_level, __pyx_int_neg_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1666, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1666, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_c_options.target_level = __pyx_t_3;

  /* "rocksdb/_rocksdb.pyx":1668
 *         c_options.target_level = py_options.get('target_level', -1)
 * 
 *         blc = py_options.get('bottommost_level_compaction', 'if_compaction_filter')             # <<<<<<<<<<<<<<
 *         if blc == 'skip':
 *             c_options.bottommost_level_compaction = options.blc_skip
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_py_options, __pyx_n_s_bottommost_level_compaction, __pyx_n_s_if_compaction_filter); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1668, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_blc = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":1669
 * 
 *         blc = py_options.get('bottommost_level_compaction', 'if_compaction_filter')
 *         if blc == 'skip':             # <<<<<<<<<<<<<<
 *             c_options.bottommost_level_compaction = options.blc_skip
 *         elif blc == 'if_compaction_filter':
 */
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_v_blc, __pyx_n_s_skip, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 1669, __pyx_L1_error)
  if (__pyx_t_4) {

    /* "rocksdb/_rocksdb.pyx":1670
 *         blc = py_options.get('bottommost_level_compaction', 'if_compaction_filter')
 *         if blc == 'skip':
 *             c_options.bottommost_level_compaction = options.blc_skip             # <<<<<<<<<<<<<<
 *         elif blc == 'if_compaction_filter':
 *             c_options.bottommost_level_compaction = options.blc_is_filter
 */
    __pyx_v_c_options.bottommost_level_compaction = rocksdb::BottommostLevelCompaction::kSkip;

    /* "rocksdb/_rocksdb.pyx":1669
 * 
 *         blc = py_options.get('bottommost_level_compaction', 'if_compaction_filter')
 *         if blc == 'skip':             # <<<<<<<<<<<<<<
 *             c_options.bottommost_level_compaction = options.blc_skip
 *         elif blc == 'if_compaction_filter':
 */
    goto __pyx_L3;
  }

  /* "rocksdb/_rocksdb.pyx":1671
 *         if blc == 'skip':
 *             c_options.bottommost_level_compaction = options.blc_skip
 *         elif blc == 'if_compaction_filter':             # <<<<<<<<<<<<<<
 *             c_options.bottommost_level_compaction = options.blc_is_filter
 *         elif blc == 'force':
 */
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_v_blc, __pyx_n_s_if_compaction_filter, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 1671, __pyx_L1_error)
  if (__pyx_t_4) {

    /* "rocksdb/_rocksdb.pyx":1672
 *             c_options.bottommost_level_compaction = options.blc_skip
 *         elif blc == 'if_compaction_filter':
 *             c_options.bottommost_level_compaction = options.blc_is_filter             # <<<<<<<<<<<<<<
 *         elif blc == 'force':
 *             c_options.bottommost_level_compaction = options.blc_force
 */
    __pyx_v_c_options.bottommost_level_compaction = rocksdb::BottommostLevelCompaction::kIfHaveCompactionFilter;

    /* "rocksdb/_rocksdb.pyx":1671
 *         if blc == 'skip':
 *             c_options.bottommost_level_compaction = options.blc_skip
 *         elif blc == 'if_compaction_filter':             # <<<<<<<<<<<<<<
 *             c_options.bottommost_level_compaction = options.blc_is_filter
 *         elif blc == 'force':
 */
    goto __pyx_L3;
  }

  /* "rocksdb/_rocksdb.pyx":1673
 *         elif blc == 'if_compaction_filter':
 *             c_options.bottommost_level_compaction = options.blc_is_filter
 *         elif blc == 'force':             # <<<<<<<<<<<<<<
 *             c_options.bottommost_level_compaction = options.blc_force
 *         else:
 */
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_v_blc, __pyx_n_s_force, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 1673, __pyx_L1_error)
  if (__pyx_t_4) {

    /* "rocksdb/_rocksdb.pyx":1674
 *             c_options.bottommost_level_compaction = options.blc_is_filter
 *         elif blc == 'force':
 *             c_options.bottommost_level_compaction = options.blc_force             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError("bottommost_level_compaction is not valid")
 */
    __pyx_v_c_options.bottommost_level_compaction = rocksdb::BottommostLevelCompaction::kForce;

    /* "rocksdb/_rocksdb.pyx":1673
 *         elif blc == 'if_compaction_filter':
 *             c_options.bottommost_level_compaction = options.blc_is_filter
 *         elif blc == 'force':             # <<<<<<<<<<<<<<
 *             c_options.bottommost_level_compaction = options.blc_force
 *         else:
 */
    goto __pyx_L3;
  }

  /* "rocksdb/_rocksdb.pyx":1676
 *             c_options.bottommost_level_compaction = options.blc_force
 *         else:
 *             raise ValueError("bottommost_level_compaction is not valid")             # <<<<<<<<<<<<<<
 * 
 *         cdef Status st
 */
  /*else*/ {
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1676, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 1676, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "rocksdb/_rocksdb.pyx":1685
 *         cdef Slice* end_ptr
 * 
 *         begin_ptr = NULL             # <<<<<<<<<<<<<<
 *         end_ptr = NULL
 * 
 */
  __pyx_v_begin_ptr = NULL;

  /* "rocksdb/_rocksdb.pyx":1686
 * 
 *         begin_ptr = NULL
 *         end_ptr = NULL             # <<<<<<<<<<<<<<
 * 
 *         if begin is not None:
 */
  __pyx_v_end_ptr = NULL;

  /* "rocksdb/_rocksdb.pyx":1688
 *         end_ptr = NULL
 * 
 *         if begin is not None:             # <<<<<<<<<<<<<<
 *             begin_val = bytes_to_slice(begin)
 *             begin_ptr = cython.address(begin_val)
 */
  __pyx_t_4 = (__pyx_v_begin != Py_None);
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (__pyx_t_5) {

    /* "rocksdb/_rocksdb.pyx":1689
 * 
 *         if begin is not None:
 *             begin_val = bytes_to_slice(begin)             # <<<<<<<<<<<<<<
 *             begin_ptr = cython.address(begin_val)
 * 
 */
    __pyx_t_6 = __pyx_f_7rocksdb_8_rocksdb_bytes_to_slice(__pyx_v_begin); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1689, __pyx_L1_error)
    __pyx_v_begin_val = __pyx_t_6;

    /* "rocksdb/_rocksdb.pyx":1690
 *         if begin is not None:
 *             begin_val = bytes_to_slice(begin)
 *             begin_ptr = cython.address(begin_val)             # <<<<<<<<<<<<<<
 * 
 *         if end is not None:
 */
    __pyx_v_begin_ptr = (&__pyx_v_begin_val);

    /* "rocksdb/_rocksdb.pyx":1688
 *         end_ptr = NULL
 * 
 *         if begin is not None:             # <<<<<<<<<<<<<<
 *             begin_val = bytes_to_slice(begin)
 *             begin_ptr = cython.address(begin_val)
 */
  }

  /* "rocksdb/_rocksdb.pyx":1692
 *             begin_ptr = cython.address(begin_val)
 * 
 *         if end is not None:             # <<<<<<<<<<<<<<
 *             end_val = bytes_to_slice(end)
 *             end_ptr = cython.address(end_val)
 */
  __pyx_t_5 = (__pyx_v_end != Py_None);
  __pyx_t_4 = (__pyx_t_5 != 0);
  if (__pyx_t_4) {

    /* "rocksdb/_rocksdb.pyx":1693
 * 
 *         if end is not None:
 *             end_val = bytes_to_slice(end)             # <<<<<<<<<<<<<<
 *             end_ptr = cython.address(end_val)
 * 
 */
    __pyx_t_6 = __pyx_f_7rocksdb_8_rocksdb_bytes_to_slice(__pyx_v_end); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1693, __pyx_L1_error)
    __pyx_v_end_val = __pyx_t_6;

    /* "rocksdb/_rocksdb.pyx":1694
 *         if end is not None:
 *             end_val = bytes_to_slice(end)
 *             end_ptr = cython.address(end_val)             # <<<<<<<<<<<<<<
 * 
 *         st = self.db.CompactRange(c_options, begin_ptr, end_ptr)
 */
    __pyx_v_end_ptr = (&__pyx_v_end_val);

    /* "rocksdb/_rocksdb.pyx":1692
 *             begin_ptr = cython.address(begin_val)
 * 
 *         if end is not None:             # <<<<<<<<<<<<<<
 *             end_val = bytes_to_slice(end)
 *             end_ptr = cython.address(end_val)
 */
  }

  /* "rocksdb/_rocksdb.pyx":1696
 *             end_ptr = cython.address(end_val)
 * 
 *         st = self.db.CompactRange(c_options, begin_ptr, end_ptr)             # <<<<<<<<<<<<<<
 *         check_status(st)
 * 
 */
  try {
    __pyx_t_7 = __pyx_v_self->db->CompactRange(__pyx_v_c_options, __pyx_v_begin_ptr, __pyx_v_end_ptr);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1696, __pyx_L1_error)
  }
  __pyx_v_st = __pyx_t_7;

  /* "rocksdb/_rocksdb.pyx":1697
 * 
 *         st = self.db.CompactRange(c_options, begin_ptr, end_ptr)
 *         check_status(st)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_t_1 = __pyx_f_7rocksdb_8_rocksdb_check_status(__pyx_v_st); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1697, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":1662
 *         return ret
 * 
 *     def compact_range(self, begin=None, end=None, **py_options):             # <<<<<<<<<<<<<<
 *         cdef options.CompactRangeOptions c_options
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.DB.compact_range", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_blc);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1700
 * 
 *     @staticmethod
 *     def __parse_read_opts(             # <<<<<<<<<<<<<<
 *         verify_checksums=False,
 *         fill_cache=True,
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_2DB_33__parse_read_opts(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_2DB_33__parse_read_opts = {"__parse_read_opts", (PyCFunction)__pyx_pw_7rocksdb_8_rocksdb_2DB_33__parse_read_opts, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_2DB_33__parse_read_opts(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_verify_checksums = 0;
  PyObject *__pyx_v_fill_cache = 0;
  PyObject *__pyx_v_snapshot = 0;
  PyObject *__pyx_v_read_tier = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__parse_read_opts (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_verify_checksums,&__pyx_n_s_fill_cache,&__pyx_n_s_snapshot,&__pyx_n_s_read_tier,0};
    PyObject* values[4] = {0,0,0,0};

    /* "rocksdb/_rocksdb.pyx":1701
 *     @staticmethod
 *     def __parse_read_opts(
 *         verify_checksums=False,             # <<<<<<<<<<<<<<
 *         fill_cache=True,
 *         snapshot=None,
 */
    values[0] = ((PyObject *)Py_False);

    /* "rocksdb/_rocksdb.pyx":1702
 *     def __parse_read_opts(
 *         verify_checksums=False,
 *         fill_cache=True,             # <<<<<<<<<<<<<<
 *         snapshot=None,
 *         read_tier="all"):
 */
    values[1] = ((PyObject *)Py_True);

    /* "rocksdb/_rocksdb.pyx":1703
 *         verify_checksums=False,
 *         fill_cache=True,
 *         snapshot=None,             # <<<<<<<<<<<<<<
 *         read_tier="all"):
 * 
 */
    values[2] = ((PyObject *)Py_None);
    values[3] = ((PyObject *)__pyx_n_s_all);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_verify_checksums);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fill_cache);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_snapshot);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_read_tier);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__parse_read_opts") < 0)) __PYX_ERR(0, 1700, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_verify_checksums = values[0];
    __pyx_v_fill_cache = values[1];
    __pyx_v_snapshot = values[2];
    __pyx_v_read_tier = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__parse_read_opts", 0, 0, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1700, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.DB.__parse_read_opts", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_2DB_32__parse_read_opts(__pyx_v_verify_checksums, __pyx_v_fill_cache, __pyx_v_snapshot, __pyx_v_read_tier);

  /* "rocksdb/_rocksdb.pyx":1700
 * 
 *     @staticmethod
 *     def __parse_read_opts(             # <<<<<<<<<<<<<<
 *         verify_checksums=False,
 *         fill_cache=True,
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_2DB_32__parse_read_opts(PyObject *__pyx_v_verify_checksums, PyObject *__pyx_v_fill_cache, PyObject *__pyx_v_snapshot, PyObject *__pyx_v_read_tier) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__parse_read_opts", 0);

  /* "rocksdb/_rocksdb.pyx":1707
 * 
 *         # TODO: Is this really effiencet ?
 *         return locals()             # <<<<<<<<<<<<<<
 * 
 *     cdef options.ReadOptions build_read_opts(self, dict py_opts):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1707, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__pyx_v_fill_cache) {
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_fill_cache, __pyx_v_fill_cache) < 0) __PYX_ERR(0, 1707, __pyx_L1_error)
  }
  if (__pyx_v_read_tier) {
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_read_tier, __pyx_v_read_tier) < 0) __PYX_ERR(0, 1707, __pyx_L1_error)
  }
  if (__pyx_v_snapshot) {
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_snapshot, __pyx_v_snapshot) < 0) __PYX_ERR(0, 1707, __pyx_L1_error)
  }
  if (__pyx_v_verify_checksums) {
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_verify_checksums, __pyx_v_verify_checksums) < 0) __PYX_ERR(0, 1707, __pyx_L1_error)
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1700
 * 
 *     @staticmethod
 *     def __parse_read_opts(             # <<<<<<<<<<<<<<
 *         verify_checksums=False,
 *         fill_cache=True,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.DB.__parse_read_opts", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1709
 *         return locals()
 * 
 *     cdef options.ReadOptions build_read_opts(self, dict py_opts):             # <<<<<<<<<<<<<<
 *         cdef options.ReadOptions opts
 *         opts.verify_checksums = py_opts['verify_checksums']
 */

static rocksdb::ReadOptions __pyx_f_7rocksdb_8_rocksdb_2DB_build_read_opts(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self, PyObject *__pyx_v_py_opts) {
  rocksdb::ReadOptions __pyx_v_opts;
  rocksdb::ReadOptions __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  bool __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  rocksdb::Snapshot const *__pyx_t_5;
  __Pyx_RefNannySetupContext("build_read_opts", 0);

  /* "rocksdb/_rocksdb.pyx":1711
 *     cdef options.ReadOptions build_read_opts(self, dict py_opts):
 *         cdef options.ReadOptions opts
 *         opts.verify_checksums = py_opts['verify_checksums']             # <<<<<<<<<<<<<<
 *         opts.fill_cache = py_opts['fill_cache']
 *         if py_opts['snapshot'] is not None:
 */
  if (unlikely(__pyx_v_py_opts == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1711, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_py_opts, __pyx_n_s_verify_checksums); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1711, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_2 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1711, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_opts.verify_checksums = __pyx_t_2;

  /* "rocksdb/_rocksdb.pyx":1712
 *         cdef options.ReadOptions opts
 *         opts.verify_checksums = py_opts['verify_checksums']
 *         opts.fill_cache = py_opts['fill_cache']             # <<<<<<<<<<<<<<
 *         if py_opts['snapshot'] is not None:
 *             opts.snapshot = (<Snapshot?>(py_opts['snapshot'])).ptr
 */
  if (unlikely(__pyx_v_py_opts == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1712, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_py_opts, __pyx_n_s_fill_cache); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1712, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_2 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1712, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_opts.fill_cache = __pyx_t_2;

  /* "rocksdb/_rocksdb.pyx":1713
 *         opts.verify_checksums = py_opts['verify_checksums']
 *         opts.fill_cache = py_opts['fill_cache']
 *         if py_opts['snapshot'] is not None:             # <<<<<<<<<<<<<<
 *             opts.snapshot = (<Snapshot?>(py_opts['snapshot'])).ptr
 * 
 */
  if (unlikely(__pyx_v_py_opts == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1713, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_py_opts, __pyx_n_s_snapshot); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1713, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = (__pyx_t_1 != Py_None);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "rocksdb/_rocksdb.pyx":1714
 *         opts.fill_cache = py_opts['fill_cache']
 *         if py_opts['snapshot'] is not None:
 *             opts.snapshot = (<Snapshot?>(py_opts['snapshot'])).ptr             # <<<<<<<<<<<<<<
 * 
 *         if py_opts['read_tier'] == "all":
 */
    if (unlikely(__pyx_v_py_opts == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 1714, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_py_opts, __pyx_n_s_snapshot); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1714, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_7rocksdb_8_rocksdb_Snapshot)))) __PYX_ERR(0, 1714, __pyx_L1_error)
    __pyx_t_5 = ((struct __pyx_obj_7rocksdb_8_rocksdb_Snapshot *)__pyx_t_1)->ptr;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_opts.snapshot = __pyx_t_5;

    /* "rocksdb/_rocksdb.pyx":1713
 *         opts.verify_checksums = py_opts['verify_checksums']
 *         opts.fill_cache = py_opts['fill_cache']
 *         if py_opts['snapshot'] is not None:             # <<<<<<<<<<<<<<
 *             opts.snapshot = (<Snapshot?>(py_opts['snapshot'])).ptr
 * 
 */
  }

  /* "rocksdb/_rocksdb.pyx":1716
 *             opts.snapshot = (<Snapshot?>(py_opts['snapshot'])).ptr
 * 
 *         if py_opts['read_tier'] == "all":             # <<<<<<<<<<<<<<
 *             opts.read_tier = options.kReadAllTier
 *         elif py_opts['read_tier'] == 'cache':
 */
  if (unlikely(__pyx_v_py_opts == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1716, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_py_opts, __pyx_n_s_read_tier); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1716, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_all, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 1716, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "rocksdb/_rocksdb.pyx":1717
 * 
 *         if py_opts['read_tier'] == "all":
 *             opts.read_tier = options.kReadAllTier             # <<<<<<<<<<<<<<
 *         elif py_opts['read_tier'] == 'cache':
 *             opts.read_tier = options.kBlockCacheTier
 */
    __pyx_v_opts.read_tier = rocksdb::kReadAllTier;

    /* "rocksdb/_rocksdb.pyx":1716
 *             opts.snapshot = (<Snapshot?>(py_opts['snapshot'])).ptr
 * 
 *         if py_opts['read_tier'] == "all":             # <<<<<<<<<<<<<<
 *             opts.read_tier = options.kReadAllTier
 *         elif py_opts['read_tier'] == 'cache':
 */
    goto __pyx_L4;
  }

  /* "rocksdb/_rocksdb.pyx":1718
 *         if py_opts['read_tier'] == "all":
 *             opts.read_tier = options.kReadAllTier
 *         elif py_opts['read_tier'] == 'cache':             # <<<<<<<<<<<<<<
 *             opts.read_tier = options.kBlockCacheTier
 *         else:
 */
  if (unlikely(__pyx_v_py_opts == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1718, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_py_opts, __pyx_n_s_read_tier); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1718, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_cache, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 1718, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "rocksdb/_rocksdb.pyx":1719
 *             opts.read_tier = options.kReadAllTier
 *         elif py_opts['read_tier'] == 'cache':
 *             opts.read_tier = options.kBlockCacheTier             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError("Invalid read_tier")
 */
    __pyx_v_opts.read_tier = rocksdb::kBlockCacheTier;

    /* "rocksdb/_rocksdb.pyx":1718
 *         if py_opts['read_tier'] == "all":
 *             opts.read_tier = options.kReadAllTier
 *         elif py_opts['read_tier'] == 'cache':             # <<<<<<<<<<<<<<
 *             opts.read_tier = options.kBlockCacheTier
 *         else:
 */
    goto __pyx_L4;
  }

  /* "rocksdb/_rocksdb.pyx":1721
 *             opts.read_tier = options.kBlockCacheTier
 *         else:
 *             raise ValueError("Invalid read_tier")             # <<<<<<<<<<<<<<
 * 
 *         return opts
 */
  /*else*/ {
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1721, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 1721, __pyx_L1_error)
  }
  __pyx_L4:;

  /* "rocksdb/_rocksdb.pyx":1723
 *             raise ValueError("Invalid read_tier")
 * 
 *         return opts             # <<<<<<<<<<<<<<
 * 
 *     property options:
 */
  __pyx_r = __pyx_v_opts;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1709
 *         return locals()
 * 
 *     cdef options.ReadOptions build_read_opts(self, dict py_opts):             # <<<<<<<<<<<<<<
 *         cdef options.ReadOptions opts
 *         opts.verify_checksums = py_opts['verify_checksums']
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_WriteUnraisable("rocksdb._rocksdb.DB.build_read_opts", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1726
 * 
 *     property options:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_2DB_7options_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_2DB_7options_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_2DB_7options___get__(((struct __pyx_obj_7rocksdb_8_rocksdb_DB *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_2DB_7options___get__(struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "rocksdb/_rocksdb.pyx":1727
 *     property options:
 *         def __get__(self):
 *             return self.opts             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->opts));
  __pyx_r = ((PyObject *)__pyx_v_self->opts);
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1726
 * 
 *     property options:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.opts
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1730
 * 
 * 
 * def repair_db(db_name, Options opts):             # <<<<<<<<<<<<<<
 *     cdef Status st
 *     cdef string db_path
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_1repair_db(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7rocksdb_8_rocksdb_1repair_db = {"repair_db", (PyCFunction)__pyx_pw_7rocksdb_8_rocksdb_1repair_db, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_1repair_db(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_db_name = 0;
  struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_opts = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("repair_db (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_db_name,&__pyx_n_s_opts,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_db_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_opts)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("repair_db", 1, 2, 2, 1); __PYX_ERR(0, 1730, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "repair_db") < 0)) __PYX_ERR(0, 1730, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_db_name = values[0];
    __pyx_v_opts = ((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("repair_db", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1730, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.repair_db", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_opts), __pyx_ptype_7rocksdb_8_rocksdb_Options, 1, "opts", 0))) __PYX_ERR(0, 1730, __pyx_L1_error)
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_repair_db(__pyx_self, __pyx_v_db_name, __pyx_v_opts);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_repair_db(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_db_name, struct __pyx_obj_7rocksdb_8_rocksdb_Options *__pyx_v_opts) {
  rocksdb::Status __pyx_v_st;
  std::string __pyx_v_db_path;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("repair_db", 0);

  /* "rocksdb/_rocksdb.pyx":1734
 *     cdef string db_path
 * 
 *     db_path = path_to_string(db_name)             # <<<<<<<<<<<<<<
 *     st = db.RepairDB(db_path, deref(opts.opts))
 *     check_status(st)
 */
  __pyx_t_1 = __pyx_f_7rocksdb_8_rocksdb_path_to_string(__pyx_v_db_name); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1734, __pyx_L1_error)
  __pyx_v_db_path = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1735
 * 
 *     db_path = path_to_string(db_name)
 *     st = db.RepairDB(db_path, deref(opts.opts))             # <<<<<<<<<<<<<<
 *     check_status(st)
 * 
 */
  __pyx_v_st = rocksdb::RepairDB(__pyx_v_db_path, (*__pyx_v_opts->opts));

  /* "rocksdb/_rocksdb.pyx":1736
 *     db_path = path_to_string(db_name)
 *     st = db.RepairDB(db_path, deref(opts.opts))
 *     check_status(st)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __pyx_f_7rocksdb_8_rocksdb_check_status(__pyx_v_st); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1736, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "rocksdb/_rocksdb.pyx":1730
 * 
 * 
 * def repair_db(db_name, Options opts):             # <<<<<<<<<<<<<<
 *     cdef Status st
 *     cdef string db_path
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("rocksdb._rocksdb.repair_db", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1745
 *     cdef DB db
 * 
 *     def __cinit__(self, DB db):             # <<<<<<<<<<<<<<
 *         self.db = db
 *         self.ptr = NULL
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_8Snapshot_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_8Snapshot_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_db = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_db,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_db)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 1745, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_db = ((struct __pyx_obj_7rocksdb_8_rocksdb_DB *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1745, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Snapshot.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_db), __pyx_ptype_7rocksdb_8_rocksdb_DB, 1, "db", 0))) __PYX_ERR(0, 1745, __pyx_L1_error)
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_8Snapshot___cinit__(((struct __pyx_obj_7rocksdb_8_rocksdb_Snapshot *)__pyx_v_self), __pyx_v_db);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_8Snapshot___cinit__(struct __pyx_obj_7rocksdb_8_rocksdb_Snapshot *__pyx_v_self, struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_db) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  rocksdb::Snapshot const *__pyx_t_1;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "rocksdb/_rocksdb.pyx":1746
 * 
 *     def __cinit__(self, DB db):
 *         self.db = db             # <<<<<<<<<<<<<<
 *         self.ptr = NULL
 *         with nogil:
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_db));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_db));
  __Pyx_GOTREF(__pyx_v_self->db);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->db));
  __pyx_v_self->db = __pyx_v_db;

  /* "rocksdb/_rocksdb.pyx":1747
 *     def __cinit__(self, DB db):
 *         self.db = db
 *         self.ptr = NULL             # <<<<<<<<<<<<<<
 *         with nogil:
 *             self.ptr = db.db.GetSnapshot()
 */
  __pyx_v_self->ptr = NULL;

  /* "rocksdb/_rocksdb.pyx":1748
 *         self.db = db
 *         self.ptr = NULL
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self.ptr = db.db.GetSnapshot()
 * 
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      #endif
      /*try:*/ {

        /* "rocksdb/_rocksdb.pyx":1749
 *         self.ptr = NULL
 *         with nogil:
 *             self.ptr = db.db.GetSnapshot()             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
        try {
          __pyx_t_1 = __pyx_v_db->db->GetSnapshot();
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 1749, __pyx_L4_error)
        }
        __pyx_v_self->ptr = __pyx_t_1;
      }

      /* "rocksdb/_rocksdb.pyx":1748
 *         self.db = db
 *         self.ptr = NULL
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self.ptr = db.db.GetSnapshot()
 * 
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "rocksdb/_rocksdb.pyx":1745
 *     cdef DB db
 * 
 *     def __cinit__(self, DB db):             # <<<<<<<<<<<<<<
 *         self.db = db
 *         self.ptr = NULL
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.Snapshot.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1751
 *             self.ptr = db.db.GetSnapshot()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if not self.ptr == NULL:
 *             with nogil:
 */

/* Python wrapper */
static void __pyx_pw_7rocksdb_8_rocksdb_8Snapshot_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_7rocksdb_8_rocksdb_8Snapshot_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_7rocksdb_8_rocksdb_8Snapshot_2__dealloc__(((struct __pyx_obj_7rocksdb_8_rocksdb_Snapshot *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_7rocksdb_8_rocksdb_8Snapshot_2__dealloc__(struct __pyx_obj_7rocksdb_8_rocksdb_Snapshot *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "rocksdb/_rocksdb.pyx":1752
 * 
 *     def __dealloc__(self):
 *         if not self.ptr == NULL:             # <<<<<<<<<<<<<<
 *             with nogil:
 *                 self.db.db.ReleaseSnapshot(self.ptr)
 */
  __pyx_t_1 = ((!((__pyx_v_self->ptr == NULL) != 0)) != 0);
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":1753
 *     def __dealloc__(self):
 *         if not self.ptr == NULL:
 *             with nogil:             # <<<<<<<<<<<<<<
 *                 self.db.db.ReleaseSnapshot(self.ptr)
 * 
 */
    {
        #ifdef WITH_THREAD
        PyThreadState *_save;
        Py_UNBLOCK_THREADS
        #endif
        /*try:*/ {

          /* "rocksdb/_rocksdb.pyx":1754
 *         if not self.ptr == NULL:
 *             with nogil:
 *                 self.db.db.ReleaseSnapshot(self.ptr)             # <<<<<<<<<<<<<<
 * 
 * 
 */
          try {
            __pyx_v_self->db->db->ReleaseSnapshot(__pyx_v_self->ptr);
          } catch(...) {
            #ifdef WITH_THREAD
            PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
            #endif
            __Pyx_CppExn2PyErr();
            #ifdef WITH_THREAD
            PyGILState_Release(__pyx_gilstate_save);
            #endif
            __PYX_ERR(0, 1754, __pyx_L5_error)
          }
        }

        /* "rocksdb/_rocksdb.pyx":1753
 *     def __dealloc__(self):
 *         if not self.ptr == NULL:
 *             with nogil:             # <<<<<<<<<<<<<<
 *                 self.db.db.ReleaseSnapshot(self.ptr)
 * 
 */
        /*finally:*/ {
          /*normal exit:*/{
            #ifdef WITH_THREAD
            Py_BLOCK_THREADS
            #endif
            goto __pyx_L6;
          }
          __pyx_L5_error: {
            #ifdef WITH_THREAD
            Py_BLOCK_THREADS
            #endif
            goto __pyx_L1_error;
          }
          __pyx_L6:;
        }
    }

    /* "rocksdb/_rocksdb.pyx":1752
 * 
 *     def __dealloc__(self):
 *         if not self.ptr == NULL:             # <<<<<<<<<<<<<<
 *             with nogil:
 *                 self.db.db.ReleaseSnapshot(self.ptr)
 */
  }

  /* "rocksdb/_rocksdb.pyx":1751
 *             self.ptr = db.db.GetSnapshot()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if not self.ptr == NULL:
 *             with nogil:
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("rocksdb._rocksdb.Snapshot.__dealloc__", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "rocksdb/_rocksdb.pyx":1762
 *     cdef DB db
 * 
 *     def __cinit__(self, DB db):             # <<<<<<<<<<<<<<
 *         self.db = db
 *         self.ptr = NULL
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_db = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_db,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_db)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 1762, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_db = ((struct __pyx_obj_7rocksdb_8_rocksdb_DB *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1762, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.BaseIterator.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_db), __pyx_ptype_7rocksdb_8_rocksdb_DB, 1, "db", 0))) __PYX_ERR(0, 1762, __pyx_L1_error)
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_12BaseIterator___cinit__(((struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *)__pyx_v_self), __pyx_v_db);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_12BaseIterator___cinit__(struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *__pyx_v_self, struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_db) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "rocksdb/_rocksdb.pyx":1763
 * 
 *     def __cinit__(self, DB db):
 *         self.db = db             # <<<<<<<<<<<<<<
 *         self.ptr = NULL
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_db));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_db));
  __Pyx_GOTREF(__pyx_v_self->db);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->db));
  __pyx_v_self->db = __pyx_v_db;

  /* "rocksdb/_rocksdb.pyx":1764
 *     def __cinit__(self, DB db):
 *         self.db = db
 *         self.ptr = NULL             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->ptr = NULL;

  /* "rocksdb/_rocksdb.pyx":1762
 *     cdef DB db
 * 
 *     def __cinit__(self, DB db):             # <<<<<<<<<<<<<<
 *         self.db = db
 *         self.ptr = NULL
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1766
 *         self.ptr = NULL
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if not self.ptr == NULL:
 *             del self.ptr
 */

/* Python wrapper */
static void __pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_7rocksdb_8_rocksdb_12BaseIterator_2__dealloc__(((struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_7rocksdb_8_rocksdb_12BaseIterator_2__dealloc__(struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "rocksdb/_rocksdb.pyx":1767
 * 
 *     def __dealloc__(self):
 *         if not self.ptr == NULL:             # <<<<<<<<<<<<<<
 *             del self.ptr
 * 
 */
  __pyx_t_1 = ((!((__pyx_v_self->ptr == NULL) != 0)) != 0);
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":1768
 *     def __dealloc__(self):
 *         if not self.ptr == NULL:
 *             del self.ptr             # <<<<<<<<<<<<<<
 * 
 *     def __iter__(self):
 */
    delete __pyx_v_self->ptr;

    /* "rocksdb/_rocksdb.pyx":1767
 * 
 *     def __dealloc__(self):
 *         if not self.ptr == NULL:             # <<<<<<<<<<<<<<
 *             del self.ptr
 * 
 */
  }

  /* "rocksdb/_rocksdb.pyx":1766
 *         self.ptr = NULL
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if not self.ptr == NULL:
 *             del self.ptr
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "rocksdb/_rocksdb.pyx":1770
 *             del self.ptr
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_5__iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_5__iter__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_12BaseIterator_4__iter__(((struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_12BaseIterator_4__iter__(struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__", 0);

  /* "rocksdb/_rocksdb.pyx":1771
 * 
 *     def __iter__(self):
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __next__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1770
 *             del self.ptr
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1773
 *         return self
 * 
 *     def __next__(self):             # <<<<<<<<<<<<<<
 *         if not self.ptr.Valid():
 *             raise StopIteration()
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_7__next__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_7__next__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__next__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_12BaseIterator_6__next__(((struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_12BaseIterator_6__next__(struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *__pyx_v_self) {
  PyObject *__pyx_v_ret = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  rocksdb::Status __pyx_t_4;
  __Pyx_RefNannySetupContext("__next__", 0);

  /* "rocksdb/_rocksdb.pyx":1774
 * 
 *     def __next__(self):
 *         if not self.ptr.Valid():             # <<<<<<<<<<<<<<
 *             raise StopIteration()
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->ptr->Valid();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1774, __pyx_L1_error)
  }
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "rocksdb/_rocksdb.pyx":1775
 *     def __next__(self):
 *         if not self.ptr.Valid():
 *             raise StopIteration()             # <<<<<<<<<<<<<<
 * 
 *         cdef object ret = self.get_ob()
 */
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_builtin_StopIteration); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1775, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 1775, __pyx_L1_error)

    /* "rocksdb/_rocksdb.pyx":1774
 * 
 *     def __next__(self):
 *         if not self.ptr.Valid():             # <<<<<<<<<<<<<<
 *             raise StopIteration()
 * 
 */
  }

  /* "rocksdb/_rocksdb.pyx":1777
 *             raise StopIteration()
 * 
 *         cdef object ret = self.get_ob()             # <<<<<<<<<<<<<<
 *         with nogil:
 *             self.ptr.Next()
 */
  __pyx_t_3 = ((struct __pyx_vtabstruct_7rocksdb_8_rocksdb_BaseIterator *)__pyx_v_self->__pyx_vtab)->get_ob(__pyx_v_self); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1777, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_ret = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "rocksdb/_rocksdb.pyx":1778
 * 
 *         cdef object ret = self.get_ob()
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self.ptr.Next()
 *         check_status(self.ptr.status())
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      #endif
      /*try:*/ {

        /* "rocksdb/_rocksdb.pyx":1779
 *         cdef object ret = self.get_ob()
 *         with nogil:
 *             self.ptr.Next()             # <<<<<<<<<<<<<<
 *         check_status(self.ptr.status())
 *         return ret
 */
        try {
          __pyx_v_self->ptr->Next();
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 1779, __pyx_L5_error)
        }
      }

      /* "rocksdb/_rocksdb.pyx":1778
 * 
 *         cdef object ret = self.get_ob()
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self.ptr.Next()
 *         check_status(self.ptr.status())
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L6;
        }
        __pyx_L5_error: {
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L6:;
      }
  }

  /* "rocksdb/_rocksdb.pyx":1780
 *         with nogil:
 *             self.ptr.Next()
 *         check_status(self.ptr.status())             # <<<<<<<<<<<<<<
 *         return ret
 * 
 */
  try {
    __pyx_t_4 = __pyx_v_self->ptr->status();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1780, __pyx_L1_error)
  }
  __pyx_t_3 = __pyx_f_7rocksdb_8_rocksdb_check_status(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1780, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "rocksdb/_rocksdb.pyx":1781
 *             self.ptr.Next()
 *         check_status(self.ptr.status())
 *         return ret             # <<<<<<<<<<<<<<
 * 
 *     def get(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ret);
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1773
 *         return self
 * 
 *     def __next__(self):             # <<<<<<<<<<<<<<
 *         if not self.ptr.Valid():
 *             raise StopIteration()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("rocksdb._rocksdb.BaseIterator.__next__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1783
 *         return ret
 * 
 *     def get(self):             # <<<<<<<<<<<<<<
 *         cdef object ret = self.get_ob()
 *         return ret
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_9get(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_9get(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_12BaseIterator_8get(((struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_12BaseIterator_8get(struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *__pyx_v_self) {
  PyObject *__pyx_v_ret = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get", 0);

  /* "rocksdb/_rocksdb.pyx":1784
 * 
 *     def get(self):
 *         cdef object ret = self.get_ob()             # <<<<<<<<<<<<<<
 *         return ret
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_7rocksdb_8_rocksdb_BaseIterator *)__pyx_v_self->__pyx_vtab)->get_ob(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1784, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_ret = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":1785
 *     def get(self):
 *         cdef object ret = self.get_ob()
 *         return ret             # <<<<<<<<<<<<<<
 * 
 *     def __reversed__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ret);
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1783
 *         return ret
 * 
 *     def get(self):             # <<<<<<<<<<<<<<
 *         cdef object ret = self.get_ob()
 *         return ret
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.BaseIterator.get", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1787
 *         return ret
 * 
 *     def __reversed__(self):             # <<<<<<<<<<<<<<
 *         return ReversedIterator(self)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_11__reversed__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_11__reversed__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reversed__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_12BaseIterator_10__reversed__(((struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_12BaseIterator_10__reversed__(struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__reversed__", 0);

  /* "rocksdb/_rocksdb.pyx":1788
 * 
 *     def __reversed__(self):
 *         return ReversedIterator(self)             # <<<<<<<<<<<<<<
 * 
 *     cpdef seek_to_first(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1788, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_ReversedIterator), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1788, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1787
 *         return ret
 * 
 *     def __reversed__(self):             # <<<<<<<<<<<<<<
 *         return ReversedIterator(self)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("rocksdb._rocksdb.BaseIterator.__reversed__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1790
 *         return ReversedIterator(self)
 * 
 *     cpdef seek_to_first(self):             # <<<<<<<<<<<<<<
 *         with nogil:
 *             self.ptr.SeekToFirst()
 */

static PyObject *__pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_13seek_to_first(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_7rocksdb_8_rocksdb_12BaseIterator_seek_to_first(struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *__pyx_v_self, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  rocksdb::Status __pyx_t_5;
  __Pyx_RefNannySetupContext("seek_to_first", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_seek_to_first); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1790, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_13seek_to_first)) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1790, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1790, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "rocksdb/_rocksdb.pyx":1791
 * 
 *     cpdef seek_to_first(self):
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self.ptr.SeekToFirst()
 *         check_status(self.ptr.status())
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      #endif
      /*try:*/ {

        /* "rocksdb/_rocksdb.pyx":1792
 *     cpdef seek_to_first(self):
 *         with nogil:
 *             self.ptr.SeekToFirst()             # <<<<<<<<<<<<<<
 *         check_status(self.ptr.status())
 * 
 */
        try {
          __pyx_v_self->ptr->SeekToFirst();
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 1792, __pyx_L4_error)
        }
      }

      /* "rocksdb/_rocksdb.pyx":1791
 * 
 *     cpdef seek_to_first(self):
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self.ptr.SeekToFirst()
 *         check_status(self.ptr.status())
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "rocksdb/_rocksdb.pyx":1793
 *         with nogil:
 *             self.ptr.SeekToFirst()
 *         check_status(self.ptr.status())             # <<<<<<<<<<<<<<
 * 
 *     cpdef seek_to_last(self):
 */
  try {
    __pyx_t_5 = __pyx_v_self->ptr->status();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1793, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_f_7rocksdb_8_rocksdb_check_status(__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1793, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":1790
 *         return ReversedIterator(self)
 * 
 *     cpdef seek_to_first(self):             # <<<<<<<<<<<<<<
 *         with nogil:
 *             self.ptr.SeekToFirst()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("rocksdb._rocksdb.BaseIterator.seek_to_first", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_13seek_to_first(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_13seek_to_first(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("seek_to_first (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_12BaseIterator_12seek_to_first(((struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_12BaseIterator_12seek_to_first(struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("seek_to_first", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_7rocksdb_8_rocksdb_12BaseIterator_seek_to_first(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1790, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.BaseIterator.seek_to_first", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1795
 *         check_status(self.ptr.status())
 * 
 *     cpdef seek_to_last(self):             # <<<<<<<<<<<<<<
 *         with nogil:
 *             self.ptr.SeekToLast()
 */

static PyObject *__pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_15seek_to_last(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_7rocksdb_8_rocksdb_12BaseIterator_seek_to_last(struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *__pyx_v_self, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  rocksdb::Status __pyx_t_5;
  __Pyx_RefNannySetupContext("seek_to_last", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_seek_to_last); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1795, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_15seek_to_last)) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1795, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1795, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "rocksdb/_rocksdb.pyx":1796
 * 
 *     cpdef seek_to_last(self):
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self.ptr.SeekToLast()
 *         check_status(self.ptr.status())
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      #endif
      /*try:*/ {

        /* "rocksdb/_rocksdb.pyx":1797
 *     cpdef seek_to_last(self):
 *         with nogil:
 *             self.ptr.SeekToLast()             # <<<<<<<<<<<<<<
 *         check_status(self.ptr.status())
 * 
 */
        try {
          __pyx_v_self->ptr->SeekToLast();
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 1797, __pyx_L4_error)
        }
      }

      /* "rocksdb/_rocksdb.pyx":1796
 * 
 *     cpdef seek_to_last(self):
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self.ptr.SeekToLast()
 *         check_status(self.ptr.status())
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "rocksdb/_rocksdb.pyx":1798
 *         with nogil:
 *             self.ptr.SeekToLast()
 *         check_status(self.ptr.status())             # <<<<<<<<<<<<<<
 * 
 *     cpdef seek(self, key):
 */
  try {
    __pyx_t_5 = __pyx_v_self->ptr->status();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1798, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_f_7rocksdb_8_rocksdb_check_status(__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1798, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":1795
 *         check_status(self.ptr.status())
 * 
 *     cpdef seek_to_last(self):             # <<<<<<<<<<<<<<
 *         with nogil:
 *             self.ptr.SeekToLast()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("rocksdb._rocksdb.BaseIterator.seek_to_last", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_15seek_to_last(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_15seek_to_last(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("seek_to_last (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_12BaseIterator_14seek_to_last(((struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_12BaseIterator_14seek_to_last(struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("seek_to_last", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_7rocksdb_8_rocksdb_12BaseIterator_seek_to_last(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1795, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.BaseIterator.seek_to_last", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1800
 *         check_status(self.ptr.status())
 * 
 *     cpdef seek(self, key):             # <<<<<<<<<<<<<<
 *         cdef Slice c_key = bytes_to_slice(key)
 *         with nogil:
 */

static PyObject *__pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_17seek(PyObject *__pyx_v_self, PyObject *__pyx_v_key); /*proto*/
static PyObject *__pyx_f_7rocksdb_8_rocksdb_12BaseIterator_seek(struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *__pyx_v_self, PyObject *__pyx_v_key, int __pyx_skip_dispatch) {
  rocksdb::Slice __pyx_v_c_key;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  rocksdb::Slice __pyx_t_6;
  rocksdb::Status __pyx_t_7;
  __Pyx_RefNannySetupContext("seek", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_seek); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1800, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_17seek)) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (!__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_key); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1800, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_key};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1800, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_2);
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_key};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1800, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_2);
        } else
        #endif
        {
          __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1800, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
          __Pyx_INCREF(__pyx_v_key);
          __Pyx_GIVEREF(__pyx_v_key);
          PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_key);
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1800, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "rocksdb/_rocksdb.pyx":1801
 * 
 *     cpdef seek(self, key):
 *         cdef Slice c_key = bytes_to_slice(key)             # <<<<<<<<<<<<<<
 *         with nogil:
 *             self.ptr.Seek(c_key)
 */
  __pyx_t_6 = __pyx_f_7rocksdb_8_rocksdb_bytes_to_slice(__pyx_v_key); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1801, __pyx_L1_error)
  __pyx_v_c_key = __pyx_t_6;

  /* "rocksdb/_rocksdb.pyx":1802
 *     cpdef seek(self, key):
 *         cdef Slice c_key = bytes_to_slice(key)
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self.ptr.Seek(c_key)
 *         check_status(self.ptr.status())
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      #endif
      /*try:*/ {

        /* "rocksdb/_rocksdb.pyx":1803
 *         cdef Slice c_key = bytes_to_slice(key)
 *         with nogil:
 *             self.ptr.Seek(c_key)             # <<<<<<<<<<<<<<
 *         check_status(self.ptr.status())
 * 
 */
        try {
          __pyx_v_self->ptr->Seek(__pyx_v_c_key);
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 1803, __pyx_L4_error)
        }
      }

      /* "rocksdb/_rocksdb.pyx":1802
 *     cpdef seek(self, key):
 *         cdef Slice c_key = bytes_to_slice(key)
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self.ptr.Seek(c_key)
 *         check_status(self.ptr.status())
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "rocksdb/_rocksdb.pyx":1804
 *         with nogil:
 *             self.ptr.Seek(c_key)
 *         check_status(self.ptr.status())             # <<<<<<<<<<<<<<
 * 
 *     cpdef seek_for_prev(self, key):
 */
  try {
    __pyx_t_7 = __pyx_v_self->ptr->status();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1804, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_f_7rocksdb_8_rocksdb_check_status(__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1804, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":1800
 *         check_status(self.ptr.status())
 * 
 *     cpdef seek(self, key):             # <<<<<<<<<<<<<<
 *         cdef Slice c_key = bytes_to_slice(key)
 *         with nogil:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("rocksdb._rocksdb.BaseIterator.seek", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_17seek(PyObject *__pyx_v_self, PyObject *__pyx_v_key); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_17seek(PyObject *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("seek (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_12BaseIterator_16seek(((struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *)__pyx_v_self), ((PyObject *)__pyx_v_key));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_12BaseIterator_16seek(struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("seek", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_7rocksdb_8_rocksdb_12BaseIterator_seek(__pyx_v_self, __pyx_v_key, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1800, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.BaseIterator.seek", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1806
 *         check_status(self.ptr.status())
 * 
 *     cpdef seek_for_prev(self, key):             # <<<<<<<<<<<<<<
 *         cdef Slice c_key = bytes_to_slice(key)
 *         with nogil:
 */

static PyObject *__pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_19seek_for_prev(PyObject *__pyx_v_self, PyObject *__pyx_v_key); /*proto*/
static PyObject *__pyx_f_7rocksdb_8_rocksdb_12BaseIterator_seek_for_prev(struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *__pyx_v_self, PyObject *__pyx_v_key, int __pyx_skip_dispatch) {
  rocksdb::Slice __pyx_v_c_key;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  rocksdb::Slice __pyx_t_6;
  rocksdb::Status __pyx_t_7;
  __Pyx_RefNannySetupContext("seek_for_prev", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_seek_for_prev); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1806, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_19seek_for_prev)) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (!__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_key); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1806, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_key};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1806, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_2);
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_key};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1806, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_2);
        } else
        #endif
        {
          __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1806, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
          __Pyx_INCREF(__pyx_v_key);
          __Pyx_GIVEREF(__pyx_v_key);
          PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_key);
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1806, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "rocksdb/_rocksdb.pyx":1807
 * 
 *     cpdef seek_for_prev(self, key):
 *         cdef Slice c_key = bytes_to_slice(key)             # <<<<<<<<<<<<<<
 *         with nogil:
 *             self.ptr.SeekForPrev(c_key)
 */
  __pyx_t_6 = __pyx_f_7rocksdb_8_rocksdb_bytes_to_slice(__pyx_v_key); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1807, __pyx_L1_error)
  __pyx_v_c_key = __pyx_t_6;

  /* "rocksdb/_rocksdb.pyx":1808
 *     cpdef seek_for_prev(self, key):
 *         cdef Slice c_key = bytes_to_slice(key)
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self.ptr.SeekForPrev(c_key)
 *         check_status(self.ptr.status())
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      #endif
      /*try:*/ {

        /* "rocksdb/_rocksdb.pyx":1809
 *         cdef Slice c_key = bytes_to_slice(key)
 *         with nogil:
 *             self.ptr.SeekForPrev(c_key)             # <<<<<<<<<<<<<<
 *         check_status(self.ptr.status())
 * 
 */
        try {
          __pyx_v_self->ptr->SeekForPrev(__pyx_v_c_key);
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 1809, __pyx_L4_error)
        }
      }

      /* "rocksdb/_rocksdb.pyx":1808
 *     cpdef seek_for_prev(self, key):
 *         cdef Slice c_key = bytes_to_slice(key)
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self.ptr.SeekForPrev(c_key)
 *         check_status(self.ptr.status())
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "rocksdb/_rocksdb.pyx":1810
 *         with nogil:
 *             self.ptr.SeekForPrev(c_key)
 *         check_status(self.ptr.status())             # <<<<<<<<<<<<<<
 * 
 *     cdef object get_ob(self):
 */
  try {
    __pyx_t_7 = __pyx_v_self->ptr->status();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1810, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_f_7rocksdb_8_rocksdb_check_status(__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1810, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":1806
 *         check_status(self.ptr.status())
 * 
 *     cpdef seek_for_prev(self, key):             # <<<<<<<<<<<<<<
 *         cdef Slice c_key = bytes_to_slice(key)
 *         with nogil:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("rocksdb._rocksdb.BaseIterator.seek_for_prev", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_19seek_for_prev(PyObject *__pyx_v_self, PyObject *__pyx_v_key); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_19seek_for_prev(PyObject *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("seek_for_prev (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_12BaseIterator_18seek_for_prev(((struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *)__pyx_v_self), ((PyObject *)__pyx_v_key));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_12BaseIterator_18seek_for_prev(struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("seek_for_prev", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_7rocksdb_8_rocksdb_12BaseIterator_seek_for_prev(__pyx_v_self, __pyx_v_key, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1806, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.BaseIterator.seek_for_prev", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1812
 *         check_status(self.ptr.status())
 * 
 *     cdef object get_ob(self):             # <<<<<<<<<<<<<<
 *         return None
 * 
 */

static PyObject *__pyx_f_7rocksdb_8_rocksdb_12BaseIterator_get_ob(CYTHON_UNUSED struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_ob", 0);

  /* "rocksdb/_rocksdb.pyx":1813
 * 
 *     cdef object get_ob(self):
 *         return None             # <<<<<<<<<<<<<<
 * 
 * @cython.internal
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_None);
  __pyx_r = Py_None;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1812
 *         check_status(self.ptr.status())
 * 
 *     cdef object get_ob(self):             # <<<<<<<<<<<<<<
 *         return None
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1817
 * @cython.internal
 * cdef class KeysIterator(BaseIterator):
 *     cdef object get_ob(self):             # <<<<<<<<<<<<<<
 *         cdef Slice c_key
 *         with nogil:
 */

static PyObject *__pyx_f_7rocksdb_8_rocksdb_12KeysIterator_get_ob(struct __pyx_obj_7rocksdb_8_rocksdb_KeysIterator *__pyx_v_self) {
  rocksdb::Slice __pyx_v_c_key;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  rocksdb::Slice __pyx_t_1;
  rocksdb::Status __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("get_ob", 0);

  /* "rocksdb/_rocksdb.pyx":1819
 *     cdef object get_ob(self):
 *         cdef Slice c_key
 *         with nogil:             # <<<<<<<<<<<<<<
 *             c_key = self.ptr.key()
 *         check_status(self.ptr.status())
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      #endif
      /*try:*/ {

        /* "rocksdb/_rocksdb.pyx":1820
 *         cdef Slice c_key
 *         with nogil:
 *             c_key = self.ptr.key()             # <<<<<<<<<<<<<<
 *         check_status(self.ptr.status())
 *         return slice_to_bytes(c_key)
 */
        try {
          __pyx_t_1 = __pyx_v_self->__pyx_base.ptr->key();
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 1820, __pyx_L4_error)
        }
        __pyx_v_c_key = __pyx_t_1;
      }

      /* "rocksdb/_rocksdb.pyx":1819
 *     cdef object get_ob(self):
 *         cdef Slice c_key
 *         with nogil:             # <<<<<<<<<<<<<<
 *             c_key = self.ptr.key()
 *         check_status(self.ptr.status())
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "rocksdb/_rocksdb.pyx":1821
 *         with nogil:
 *             c_key = self.ptr.key()
 *         check_status(self.ptr.status())             # <<<<<<<<<<<<<<
 *         return slice_to_bytes(c_key)
 * 
 */
  try {
    __pyx_t_2 = __pyx_v_self->__pyx_base.ptr->status();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1821, __pyx_L1_error)
  }
  __pyx_t_3 = __pyx_f_7rocksdb_8_rocksdb_check_status(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1821, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "rocksdb/_rocksdb.pyx":1822
 *             c_key = self.ptr.key()
 *         check_status(self.ptr.status())
 *         return slice_to_bytes(c_key)             # <<<<<<<<<<<<<<
 * 
 * @cython.internal
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __pyx_f_7rocksdb_8_rocksdb_slice_to_bytes(__pyx_v_c_key); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1822, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1817
 * @cython.internal
 * cdef class KeysIterator(BaseIterator):
 *     cdef object get_ob(self):             # <<<<<<<<<<<<<<
 *         cdef Slice c_key
 *         with nogil:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("rocksdb._rocksdb.KeysIterator.get_ob", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1826
 * @cython.internal
 * cdef class ValuesIterator(BaseIterator):
 *     cdef object get_ob(self):             # <<<<<<<<<<<<<<
 *         cdef Slice c_value
 *         with nogil:
 */

static PyObject *__pyx_f_7rocksdb_8_rocksdb_14ValuesIterator_get_ob(struct __pyx_obj_7rocksdb_8_rocksdb_ValuesIterator *__pyx_v_self) {
  rocksdb::Slice __pyx_v_c_value;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  rocksdb::Slice __pyx_t_1;
  rocksdb::Status __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("get_ob", 0);

  /* "rocksdb/_rocksdb.pyx":1828
 *     cdef object get_ob(self):
 *         cdef Slice c_value
 *         with nogil:             # <<<<<<<<<<<<<<
 *             c_value = self.ptr.value()
 *         check_status(self.ptr.status())
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      #endif
      /*try:*/ {

        /* "rocksdb/_rocksdb.pyx":1829
 *         cdef Slice c_value
 *         with nogil:
 *             c_value = self.ptr.value()             # <<<<<<<<<<<<<<
 *         check_status(self.ptr.status())
 *         return slice_to_bytes(c_value)
 */
        try {
          __pyx_t_1 = __pyx_v_self->__pyx_base.ptr->value();
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 1829, __pyx_L4_error)
        }
        __pyx_v_c_value = __pyx_t_1;
      }

      /* "rocksdb/_rocksdb.pyx":1828
 *     cdef object get_ob(self):
 *         cdef Slice c_value
 *         with nogil:             # <<<<<<<<<<<<<<
 *             c_value = self.ptr.value()
 *         check_status(self.ptr.status())
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "rocksdb/_rocksdb.pyx":1830
 *         with nogil:
 *             c_value = self.ptr.value()
 *         check_status(self.ptr.status())             # <<<<<<<<<<<<<<
 *         return slice_to_bytes(c_value)
 * 
 */
  try {
    __pyx_t_2 = __pyx_v_self->__pyx_base.ptr->status();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1830, __pyx_L1_error)
  }
  __pyx_t_3 = __pyx_f_7rocksdb_8_rocksdb_check_status(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1830, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "rocksdb/_rocksdb.pyx":1831
 *             c_value = self.ptr.value()
 *         check_status(self.ptr.status())
 *         return slice_to_bytes(c_value)             # <<<<<<<<<<<<<<
 * 
 * @cython.internal
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __pyx_f_7rocksdb_8_rocksdb_slice_to_bytes(__pyx_v_c_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1831, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1826
 * @cython.internal
 * cdef class ValuesIterator(BaseIterator):
 *     cdef object get_ob(self):             # <<<<<<<<<<<<<<
 *         cdef Slice c_value
 *         with nogil:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("rocksdb._rocksdb.ValuesIterator.get_ob", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1835
 * @cython.internal
 * cdef class ItemsIterator(BaseIterator):
 *     cdef object get_ob(self):             # <<<<<<<<<<<<<<
 *         cdef Slice c_key
 *         cdef Slice c_value
 */

static PyObject *__pyx_f_7rocksdb_8_rocksdb_13ItemsIterator_get_ob(struct __pyx_obj_7rocksdb_8_rocksdb_ItemsIterator *__pyx_v_self) {
  rocksdb::Slice __pyx_v_c_key;
  rocksdb::Slice __pyx_v_c_value;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  rocksdb::Slice __pyx_t_1;
  rocksdb::Status __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("get_ob", 0);

  /* "rocksdb/_rocksdb.pyx":1838
 *         cdef Slice c_key
 *         cdef Slice c_value
 *         with nogil:             # <<<<<<<<<<<<<<
 *             c_key = self.ptr.key()
 *             c_value = self.ptr.value()
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      #endif
      /*try:*/ {

        /* "rocksdb/_rocksdb.pyx":1839
 *         cdef Slice c_value
 *         with nogil:
 *             c_key = self.ptr.key()             # <<<<<<<<<<<<<<
 *             c_value = self.ptr.value()
 *         check_status(self.ptr.status())
 */
        try {
          __pyx_t_1 = __pyx_v_self->__pyx_base.ptr->key();
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 1839, __pyx_L4_error)
        }
        __pyx_v_c_key = __pyx_t_1;

        /* "rocksdb/_rocksdb.pyx":1840
 *         with nogil:
 *             c_key = self.ptr.key()
 *             c_value = self.ptr.value()             # <<<<<<<<<<<<<<
 *         check_status(self.ptr.status())
 *         return (slice_to_bytes(c_key), slice_to_bytes(c_value))
 */
        try {
          __pyx_t_1 = __pyx_v_self->__pyx_base.ptr->value();
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 1840, __pyx_L4_error)
        }
        __pyx_v_c_value = __pyx_t_1;
      }

      /* "rocksdb/_rocksdb.pyx":1838
 *         cdef Slice c_key
 *         cdef Slice c_value
 *         with nogil:             # <<<<<<<<<<<<<<
 *             c_key = self.ptr.key()
 *             c_value = self.ptr.value()
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "rocksdb/_rocksdb.pyx":1841
 *             c_key = self.ptr.key()
 *             c_value = self.ptr.value()
 *         check_status(self.ptr.status())             # <<<<<<<<<<<<<<
 *         return (slice_to_bytes(c_key), slice_to_bytes(c_value))
 * 
 */
  try {
    __pyx_t_2 = __pyx_v_self->__pyx_base.ptr->status();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1841, __pyx_L1_error)
  }
  __pyx_t_3 = __pyx_f_7rocksdb_8_rocksdb_check_status(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1841, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "rocksdb/_rocksdb.pyx":1842
 *             c_value = self.ptr.value()
 *         check_status(self.ptr.status())
 *         return (slice_to_bytes(c_key), slice_to_bytes(c_value))             # <<<<<<<<<<<<<<
 * 
 * @cython.internal
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __pyx_f_7rocksdb_8_rocksdb_slice_to_bytes(__pyx_v_c_key); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1842, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __pyx_f_7rocksdb_8_rocksdb_slice_to_bytes(__pyx_v_c_value); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1842, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1842, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_4);
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1835
 * @cython.internal
 * cdef class ItemsIterator(BaseIterator):
 *     cdef object get_ob(self):             # <<<<<<<<<<<<<<
 *         cdef Slice c_key
 *         cdef Slice c_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("rocksdb._rocksdb.ItemsIterator.get_ob", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1848
 *     cdef BaseIterator it
 * 
 *     def __cinit__(self, BaseIterator it):             # <<<<<<<<<<<<<<
 *         self.it = it
 * 
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_16ReversedIterator_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_16ReversedIterator_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *__pyx_v_it = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_it,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_it)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 1848, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_it = ((struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1848, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.ReversedIterator.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_it), __pyx_ptype_7rocksdb_8_rocksdb_BaseIterator, 1, "it", 0))) __PYX_ERR(0, 1848, __pyx_L1_error)
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_16ReversedIterator___cinit__(((struct __pyx_obj_7rocksdb_8_rocksdb_ReversedIterator *)__pyx_v_self), __pyx_v_it);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_16ReversedIterator___cinit__(struct __pyx_obj_7rocksdb_8_rocksdb_ReversedIterator *__pyx_v_self, struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *__pyx_v_it) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "rocksdb/_rocksdb.pyx":1849
 * 
 *     def __cinit__(self, BaseIterator it):
 *         self.it = it             # <<<<<<<<<<<<<<
 * 
 *     def seek_to_first(self):
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_it));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_it));
  __Pyx_GOTREF(__pyx_v_self->it);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->it));
  __pyx_v_self->it = __pyx_v_it;

  /* "rocksdb/_rocksdb.pyx":1848
 *     cdef BaseIterator it
 * 
 *     def __cinit__(self, BaseIterator it):             # <<<<<<<<<<<<<<
 *         self.it = it
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1851
 *         self.it = it
 * 
 *     def seek_to_first(self):             # <<<<<<<<<<<<<<
 *         self.it.seek_to_first()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_16ReversedIterator_3seek_to_first(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_16ReversedIterator_3seek_to_first(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("seek_to_first (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_16ReversedIterator_2seek_to_first(((struct __pyx_obj_7rocksdb_8_rocksdb_ReversedIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_16ReversedIterator_2seek_to_first(struct __pyx_obj_7rocksdb_8_rocksdb_ReversedIterator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("seek_to_first", 0);

  /* "rocksdb/_rocksdb.pyx":1852
 * 
 *     def seek_to_first(self):
 *         self.it.seek_to_first()             # <<<<<<<<<<<<<<
 * 
 *     def seek_to_last(self):
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_7rocksdb_8_rocksdb_BaseIterator *)__pyx_v_self->it->__pyx_vtab)->seek_to_first(__pyx_v_self->it, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1852, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":1851
 *         self.it = it
 * 
 *     def seek_to_first(self):             # <<<<<<<<<<<<<<
 *         self.it.seek_to_first()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.ReversedIterator.seek_to_first", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1854
 *         self.it.seek_to_first()
 * 
 *     def seek_to_last(self):             # <<<<<<<<<<<<<<
 *         self.it.seek_to_last()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_16ReversedIterator_5seek_to_last(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_16ReversedIterator_5seek_to_last(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("seek_to_last (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_16ReversedIterator_4seek_to_last(((struct __pyx_obj_7rocksdb_8_rocksdb_ReversedIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_16ReversedIterator_4seek_to_last(struct __pyx_obj_7rocksdb_8_rocksdb_ReversedIterator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("seek_to_last", 0);

  /* "rocksdb/_rocksdb.pyx":1855
 * 
 *     def seek_to_last(self):
 *         self.it.seek_to_last()             # <<<<<<<<<<<<<<
 * 
 *     def seek(self, key):
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_7rocksdb_8_rocksdb_BaseIterator *)__pyx_v_self->it->__pyx_vtab)->seek_to_last(__pyx_v_self->it, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1855, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":1854
 *         self.it.seek_to_first()
 * 
 *     def seek_to_last(self):             # <<<<<<<<<<<<<<
 *         self.it.seek_to_last()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.ReversedIterator.seek_to_last", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1857
 *         self.it.seek_to_last()
 * 
 *     def seek(self, key):             # <<<<<<<<<<<<<<
 *         self.it.seek(key)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_16ReversedIterator_7seek(PyObject *__pyx_v_self, PyObject *__pyx_v_key); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_16ReversedIterator_7seek(PyObject *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("seek (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_16ReversedIterator_6seek(((struct __pyx_obj_7rocksdb_8_rocksdb_ReversedIterator *)__pyx_v_self), ((PyObject *)__pyx_v_key));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_16ReversedIterator_6seek(struct __pyx_obj_7rocksdb_8_rocksdb_ReversedIterator *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("seek", 0);

  /* "rocksdb/_rocksdb.pyx":1858
 * 
 *     def seek(self, key):
 *         self.it.seek(key)             # <<<<<<<<<<<<<<
 * 
 *     def seek_for_prev(self, key):
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_7rocksdb_8_rocksdb_BaseIterator *)__pyx_v_self->it->__pyx_vtab)->seek(__pyx_v_self->it, __pyx_v_key, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1858, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":1857
 *         self.it.seek_to_last()
 * 
 *     def seek(self, key):             # <<<<<<<<<<<<<<
 *         self.it.seek(key)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.ReversedIterator.seek", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1860
 *         self.it.seek(key)
 * 
 *     def seek_for_prev(self, key):             # <<<<<<<<<<<<<<
 *         self.it.seek_for_prev(key)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_16ReversedIterator_9seek_for_prev(PyObject *__pyx_v_self, PyObject *__pyx_v_key); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_16ReversedIterator_9seek_for_prev(PyObject *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("seek_for_prev (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_16ReversedIterator_8seek_for_prev(((struct __pyx_obj_7rocksdb_8_rocksdb_ReversedIterator *)__pyx_v_self), ((PyObject *)__pyx_v_key));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_16ReversedIterator_8seek_for_prev(struct __pyx_obj_7rocksdb_8_rocksdb_ReversedIterator *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("seek_for_prev", 0);

  /* "rocksdb/_rocksdb.pyx":1861
 * 
 *     def seek_for_prev(self, key):
 *         self.it.seek_for_prev(key)             # <<<<<<<<<<<<<<
 * 
 *     def get(self):
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_7rocksdb_8_rocksdb_BaseIterator *)__pyx_v_self->it->__pyx_vtab)->seek_for_prev(__pyx_v_self->it, __pyx_v_key, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1861, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":1860
 *         self.it.seek(key)
 * 
 *     def seek_for_prev(self, key):             # <<<<<<<<<<<<<<
 *         self.it.seek_for_prev(key)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.ReversedIterator.seek_for_prev", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1863
 *         self.it.seek_for_prev(key)
 * 
 *     def get(self):             # <<<<<<<<<<<<<<
 *         return self.it.get()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_16ReversedIterator_11get(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_16ReversedIterator_11get(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_16ReversedIterator_10get(((struct __pyx_obj_7rocksdb_8_rocksdb_ReversedIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_16ReversedIterator_10get(struct __pyx_obj_7rocksdb_8_rocksdb_ReversedIterator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("get", 0);

  /* "rocksdb/_rocksdb.pyx":1864
 * 
 *     def get(self):
 *         return self.it.get()             # <<<<<<<<<<<<<<
 * 
 *     def __iter__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->it), __pyx_n_s_get); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1864, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1864, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1864, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1863
 *         self.it.seek_for_prev(key)
 * 
 *     def get(self):             # <<<<<<<<<<<<<<
 *         return self.it.get()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("rocksdb._rocksdb.ReversedIterator.get", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1866
 *         return self.it.get()
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_16ReversedIterator_13__iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_16ReversedIterator_13__iter__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_16ReversedIterator_12__iter__(((struct __pyx_obj_7rocksdb_8_rocksdb_ReversedIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_16ReversedIterator_12__iter__(struct __pyx_obj_7rocksdb_8_rocksdb_ReversedIterator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__", 0);

  /* "rocksdb/_rocksdb.pyx":1867
 * 
 *     def __iter__(self):
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __reversed__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1866
 *         return self.it.get()
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1869
 *         return self
 * 
 *     def __reversed__(self):             # <<<<<<<<<<<<<<
 *         return self.it
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_16ReversedIterator_15__reversed__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_16ReversedIterator_15__reversed__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reversed__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_16ReversedIterator_14__reversed__(((struct __pyx_obj_7rocksdb_8_rocksdb_ReversedIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_16ReversedIterator_14__reversed__(struct __pyx_obj_7rocksdb_8_rocksdb_ReversedIterator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reversed__", 0);

  /* "rocksdb/_rocksdb.pyx":1870
 * 
 *     def __reversed__(self):
 *         return self.it             # <<<<<<<<<<<<<<
 * 
 *     def __next__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->it));
  __pyx_r = ((PyObject *)__pyx_v_self->it);
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1869
 *         return self
 * 
 *     def __reversed__(self):             # <<<<<<<<<<<<<<
 *         return self.it
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1872
 *         return self.it
 * 
 *     def __next__(self):             # <<<<<<<<<<<<<<
 *         if not self.it.ptr.Valid():
 *             raise StopIteration()
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_16ReversedIterator_17__next__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_16ReversedIterator_17__next__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__next__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_16ReversedIterator_16__next__(((struct __pyx_obj_7rocksdb_8_rocksdb_ReversedIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_16ReversedIterator_16__next__(struct __pyx_obj_7rocksdb_8_rocksdb_ReversedIterator *__pyx_v_self) {
  PyObject *__pyx_v_ret = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  rocksdb::Status __pyx_t_4;
  __Pyx_RefNannySetupContext("__next__", 0);

  /* "rocksdb/_rocksdb.pyx":1873
 * 
 *     def __next__(self):
 *         if not self.it.ptr.Valid():             # <<<<<<<<<<<<<<
 *             raise StopIteration()
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->it->ptr->Valid();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1873, __pyx_L1_error)
  }
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "rocksdb/_rocksdb.pyx":1874
 *     def __next__(self):
 *         if not self.it.ptr.Valid():
 *             raise StopIteration()             # <<<<<<<<<<<<<<
 * 
 *         cdef object ret = self.it.get_ob()
 */
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_builtin_StopIteration); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1874, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 1874, __pyx_L1_error)

    /* "rocksdb/_rocksdb.pyx":1873
 * 
 *     def __next__(self):
 *         if not self.it.ptr.Valid():             # <<<<<<<<<<<<<<
 *             raise StopIteration()
 * 
 */
  }

  /* "rocksdb/_rocksdb.pyx":1876
 *             raise StopIteration()
 * 
 *         cdef object ret = self.it.get_ob()             # <<<<<<<<<<<<<<
 *         with nogil:
 *             self.it.ptr.Prev()
 */
  __pyx_t_3 = ((struct __pyx_vtabstruct_7rocksdb_8_rocksdb_BaseIterator *)__pyx_v_self->it->__pyx_vtab)->get_ob(__pyx_v_self->it); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1876, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_ret = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "rocksdb/_rocksdb.pyx":1877
 * 
 *         cdef object ret = self.it.get_ob()
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self.it.ptr.Prev()
 *         check_status(self.it.ptr.status())
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      #endif
      /*try:*/ {

        /* "rocksdb/_rocksdb.pyx":1878
 *         cdef object ret = self.it.get_ob()
 *         with nogil:
 *             self.it.ptr.Prev()             # <<<<<<<<<<<<<<
 *         check_status(self.it.ptr.status())
 *         return ret
 */
        try {
          __pyx_v_self->it->ptr->Prev();
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 1878, __pyx_L5_error)
        }
      }

      /* "rocksdb/_rocksdb.pyx":1877
 * 
 *         cdef object ret = self.it.get_ob()
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self.it.ptr.Prev()
 *         check_status(self.it.ptr.status())
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L6;
        }
        __pyx_L5_error: {
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L6:;
      }
  }

  /* "rocksdb/_rocksdb.pyx":1879
 *         with nogil:
 *             self.it.ptr.Prev()
 *         check_status(self.it.ptr.status())             # <<<<<<<<<<<<<<
 *         return ret
 * 
 */
  try {
    __pyx_t_4 = __pyx_v_self->it->ptr->status();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1879, __pyx_L1_error)
  }
  __pyx_t_3 = __pyx_f_7rocksdb_8_rocksdb_check_status(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1879, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "rocksdb/_rocksdb.pyx":1880
 *             self.it.ptr.Prev()
 *         check_status(self.it.ptr.status())
 *         return ret             # <<<<<<<<<<<<<<
 * 
 * cdef class BackupEngine(object):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ret);
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1872
 *         return self.it
 * 
 *     def __next__(self):             # <<<<<<<<<<<<<<
 *         if not self.it.ptr.Valid():
 *             raise StopIteration()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("rocksdb._rocksdb.ReversedIterator.__next__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1885
 *     cdef backup.BackupEngine* engine
 * 
 *     def  __cinit__(self, backup_dir):             # <<<<<<<<<<<<<<
 *         cdef Status st
 *         cdef string c_backup_dir
 */

/* Python wrapper */
static int __pyx_pw_7rocksdb_8_rocksdb_12BackupEngine_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7rocksdb_8_rocksdb_12BackupEngine_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_backup_dir = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_backup_dir,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_backup_dir)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 1885, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_backup_dir = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1885, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.BackupEngine.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_12BackupEngine___cinit__(((struct __pyx_obj_7rocksdb_8_rocksdb_BackupEngine *)__pyx_v_self), __pyx_v_backup_dir);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7rocksdb_8_rocksdb_12BackupEngine___cinit__(struct __pyx_obj_7rocksdb_8_rocksdb_BackupEngine *__pyx_v_self, PyObject *__pyx_v_backup_dir) {
  rocksdb::Status __pyx_v_st;
  std::string __pyx_v_c_backup_dir;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "rocksdb/_rocksdb.pyx":1888
 *         cdef Status st
 *         cdef string c_backup_dir
 *         self.engine = NULL             # <<<<<<<<<<<<<<
 * 
 *         c_backup_dir = path_to_string(backup_dir)
 */
  __pyx_v_self->engine = NULL;

  /* "rocksdb/_rocksdb.pyx":1890
 *         self.engine = NULL
 * 
 *         c_backup_dir = path_to_string(backup_dir)             # <<<<<<<<<<<<<<
 *         st = backup.BackupEngine_Open(
 *             env.Env_Default(),
 */
  __pyx_t_1 = __pyx_f_7rocksdb_8_rocksdb_path_to_string(__pyx_v_backup_dir); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1890, __pyx_L1_error)
  __pyx_v_c_backup_dir = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1891
 * 
 *         c_backup_dir = path_to_string(backup_dir)
 *         st = backup.BackupEngine_Open(             # <<<<<<<<<<<<<<
 *             env.Env_Default(),
 *             backup.BackupableDBOptions(c_backup_dir),
 */
  __pyx_v_st = rocksdb::BackupEngine::Open(rocksdb::Env::Default(), rocksdb::BackupableDBOptions(__pyx_v_c_backup_dir), (&__pyx_v_self->engine));

  /* "rocksdb/_rocksdb.pyx":1896
 *             cython.address(self.engine))
 * 
 *         check_status(st)             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_t_2 = __pyx_f_7rocksdb_8_rocksdb_check_status(__pyx_v_st); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1896, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "rocksdb/_rocksdb.pyx":1885
 *     cdef backup.BackupEngine* engine
 * 
 *     def  __cinit__(self, backup_dir):             # <<<<<<<<<<<<<<
 *         cdef Status st
 *         cdef string c_backup_dir
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("rocksdb._rocksdb.BackupEngine.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1898
 *         check_status(st)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if not self.engine == NULL:
 *             with nogil:
 */

/* Python wrapper */
static void __pyx_pw_7rocksdb_8_rocksdb_12BackupEngine_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_7rocksdb_8_rocksdb_12BackupEngine_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_7rocksdb_8_rocksdb_12BackupEngine_2__dealloc__(((struct __pyx_obj_7rocksdb_8_rocksdb_BackupEngine *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_7rocksdb_8_rocksdb_12BackupEngine_2__dealloc__(struct __pyx_obj_7rocksdb_8_rocksdb_BackupEngine *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "rocksdb/_rocksdb.pyx":1899
 * 
 *     def __dealloc__(self):
 *         if not self.engine == NULL:             # <<<<<<<<<<<<<<
 *             with nogil:
 *                 del self.engine
 */
  __pyx_t_1 = ((!((__pyx_v_self->engine == NULL) != 0)) != 0);
  if (__pyx_t_1) {

    /* "rocksdb/_rocksdb.pyx":1900
 *     def __dealloc__(self):
 *         if not self.engine == NULL:
 *             with nogil:             # <<<<<<<<<<<<<<
 *                 del self.engine
 * 
 */
    {
        #ifdef WITH_THREAD
        PyThreadState *_save;
        Py_UNBLOCK_THREADS
        #endif
        /*try:*/ {

          /* "rocksdb/_rocksdb.pyx":1901
 *         if not self.engine == NULL:
 *             with nogil:
 *                 del self.engine             # <<<<<<<<<<<<<<
 * 
 *     def create_backup(self, DB db, flush_before_backup=False):
 */
          delete __pyx_v_self->engine;
        }

        /* "rocksdb/_rocksdb.pyx":1900
 *     def __dealloc__(self):
 *         if not self.engine == NULL:
 *             with nogil:             # <<<<<<<<<<<<<<
 *                 del self.engine
 * 
 */
        /*finally:*/ {
          /*normal exit:*/{
            #ifdef WITH_THREAD
            Py_BLOCK_THREADS
            #endif
            goto __pyx_L6;
          }
          __pyx_L6:;
        }
    }

    /* "rocksdb/_rocksdb.pyx":1899
 * 
 *     def __dealloc__(self):
 *         if not self.engine == NULL:             # <<<<<<<<<<<<<<
 *             with nogil:
 *                 del self.engine
 */
  }

  /* "rocksdb/_rocksdb.pyx":1898
 *         check_status(st)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if not self.engine == NULL:
 *             with nogil:
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "rocksdb/_rocksdb.pyx":1903
 *                 del self.engine
 * 
 *     def create_backup(self, DB db, flush_before_backup=False):             # <<<<<<<<<<<<<<
 *         cdef Status st
 *         cdef cpp_bool c_flush_before_backup
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_12BackupEngine_5create_backup(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_12BackupEngine_5create_backup(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_db = 0;
  PyObject *__pyx_v_flush_before_backup = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("create_backup (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_db,&__pyx_n_s_flush_before_backup,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_db)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_flush_before_backup);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "create_backup") < 0)) __PYX_ERR(0, 1903, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_db = ((struct __pyx_obj_7rocksdb_8_rocksdb_DB *)values[0]);
    __pyx_v_flush_before_backup = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("create_backup", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1903, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.BackupEngine.create_backup", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_db), __pyx_ptype_7rocksdb_8_rocksdb_DB, 1, "db", 0))) __PYX_ERR(0, 1903, __pyx_L1_error)
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_12BackupEngine_4create_backup(((struct __pyx_obj_7rocksdb_8_rocksdb_BackupEngine *)__pyx_v_self), __pyx_v_db, __pyx_v_flush_before_backup);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_12BackupEngine_4create_backup(struct __pyx_obj_7rocksdb_8_rocksdb_BackupEngine *__pyx_v_self, struct __pyx_obj_7rocksdb_8_rocksdb_DB *__pyx_v_db, PyObject *__pyx_v_flush_before_backup) {
  rocksdb::Status __pyx_v_st;
  bool __pyx_v_c_flush_before_backup;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  rocksdb::Status __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("create_backup", 0);

  /* "rocksdb/_rocksdb.pyx":1907
 *         cdef cpp_bool c_flush_before_backup
 * 
 *         c_flush_before_backup = flush_before_backup             # <<<<<<<<<<<<<<
 * 
 *         with nogil:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_flush_before_backup); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1907, __pyx_L1_error)
  __pyx_v_c_flush_before_backup = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1909
 *         c_flush_before_backup = flush_before_backup
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             st = self.engine.CreateNewBackup(db.db, c_flush_before_backup)
 *         check_status(st)
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      #endif
      /*try:*/ {

        /* "rocksdb/_rocksdb.pyx":1910
 * 
 *         with nogil:
 *             st = self.engine.CreateNewBackup(db.db, c_flush_before_backup)             # <<<<<<<<<<<<<<
 *         check_status(st)
 * 
 */
        try {
          __pyx_t_2 = __pyx_v_self->engine->CreateNewBackup(__pyx_v_db->db, __pyx_v_c_flush_before_backup);
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 1910, __pyx_L4_error)
        }
        __pyx_v_st = __pyx_t_2;
      }

      /* "rocksdb/_rocksdb.pyx":1909
 *         c_flush_before_backup = flush_before_backup
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             st = self.engine.CreateNewBackup(db.db, c_flush_before_backup)
 *         check_status(st)
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "rocksdb/_rocksdb.pyx":1911
 *         with nogil:
 *             st = self.engine.CreateNewBackup(db.db, c_flush_before_backup)
 *         check_status(st)             # <<<<<<<<<<<<<<
 * 
 *     def restore_backup(self, backup_id, db_dir, wal_dir):
 */
  __pyx_t_3 = __pyx_f_7rocksdb_8_rocksdb_check_status(__pyx_v_st); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1911, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "rocksdb/_rocksdb.pyx":1903
 *                 del self.engine
 * 
 *     def create_backup(self, DB db, flush_before_backup=False):             # <<<<<<<<<<<<<<
 *         cdef Status st
 *         cdef cpp_bool c_flush_before_backup
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("rocksdb._rocksdb.BackupEngine.create_backup", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1913
 *         check_status(st)
 * 
 *     def restore_backup(self, backup_id, db_dir, wal_dir):             # <<<<<<<<<<<<<<
 *         cdef Status st
 *         cdef backup.BackupID c_backup_id
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_12BackupEngine_7restore_backup(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_12BackupEngine_7restore_backup(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_backup_id = 0;
  PyObject *__pyx_v_db_dir = 0;
  PyObject *__pyx_v_wal_dir = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("restore_backup (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_backup_id,&__pyx_n_s_db_dir,&__pyx_n_s_wal_dir,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_backup_id)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_db_dir)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("restore_backup", 1, 3, 3, 1); __PYX_ERR(0, 1913, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_wal_dir)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("restore_backup", 1, 3, 3, 2); __PYX_ERR(0, 1913, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "restore_backup") < 0)) __PYX_ERR(0, 1913, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_backup_id = values[0];
    __pyx_v_db_dir = values[1];
    __pyx_v_wal_dir = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("restore_backup", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1913, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.BackupEngine.restore_backup", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_12BackupEngine_6restore_backup(((struct __pyx_obj_7rocksdb_8_rocksdb_BackupEngine *)__pyx_v_self), __pyx_v_backup_id, __pyx_v_db_dir, __pyx_v_wal_dir);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_12BackupEngine_6restore_backup(struct __pyx_obj_7rocksdb_8_rocksdb_BackupEngine *__pyx_v_self, PyObject *__pyx_v_backup_id, PyObject *__pyx_v_db_dir, PyObject *__pyx_v_wal_dir) {
  rocksdb::Status __pyx_v_st;
  rocksdb::BackupID __pyx_v_c_backup_id;
  std::string __pyx_v_c_db_dir;
  std::string __pyx_v_c_wal_dir;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  rocksdb::BackupID __pyx_t_1;
  std::string __pyx_t_2;
  rocksdb::Status __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("restore_backup", 0);

  /* "rocksdb/_rocksdb.pyx":1919
 *         cdef string c_wal_dir
 * 
 *         c_backup_id = backup_id             # <<<<<<<<<<<<<<
 *         c_db_dir = path_to_string(db_dir)
 *         c_wal_dir = path_to_string(wal_dir)
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint32_t(__pyx_v_backup_id); if (unlikely((__pyx_t_1 == ((rocksdb::BackupID)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1919, __pyx_L1_error)
  __pyx_v_c_backup_id = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1920
 * 
 *         c_backup_id = backup_id
 *         c_db_dir = path_to_string(db_dir)             # <<<<<<<<<<<<<<
 *         c_wal_dir = path_to_string(wal_dir)
 * 
 */
  __pyx_t_2 = __pyx_f_7rocksdb_8_rocksdb_path_to_string(__pyx_v_db_dir); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1920, __pyx_L1_error)
  __pyx_v_c_db_dir = __pyx_t_2;

  /* "rocksdb/_rocksdb.pyx":1921
 *         c_backup_id = backup_id
 *         c_db_dir = path_to_string(db_dir)
 *         c_wal_dir = path_to_string(wal_dir)             # <<<<<<<<<<<<<<
 * 
 *         with nogil:
 */
  __pyx_t_2 = __pyx_f_7rocksdb_8_rocksdb_path_to_string(__pyx_v_wal_dir); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1921, __pyx_L1_error)
  __pyx_v_c_wal_dir = __pyx_t_2;

  /* "rocksdb/_rocksdb.pyx":1923
 *         c_wal_dir = path_to_string(wal_dir)
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             st = self.engine.RestoreDBFromBackup(
 *                 c_backup_id,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      #endif
      /*try:*/ {

        /* "rocksdb/_rocksdb.pyx":1924
 * 
 *         with nogil:
 *             st = self.engine.RestoreDBFromBackup(             # <<<<<<<<<<<<<<
 *                 c_backup_id,
 *                 c_db_dir,
 */
        try {
          __pyx_t_3 = __pyx_v_self->engine->RestoreDBFromBackup(__pyx_v_c_backup_id, __pyx_v_c_db_dir, __pyx_v_c_wal_dir);
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 1924, __pyx_L4_error)
        }
        __pyx_v_st = __pyx_t_3;
      }

      /* "rocksdb/_rocksdb.pyx":1923
 *         c_wal_dir = path_to_string(wal_dir)
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             st = self.engine.RestoreDBFromBackup(
 *                 c_backup_id,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "rocksdb/_rocksdb.pyx":1929
 *                 c_wal_dir)
 * 
 *         check_status(st)             # <<<<<<<<<<<<<<
 * 
 *     def restore_latest_backup(self, db_dir, wal_dir):
 */
  __pyx_t_4 = __pyx_f_7rocksdb_8_rocksdb_check_status(__pyx_v_st); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1929, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "rocksdb/_rocksdb.pyx":1913
 *         check_status(st)
 * 
 *     def restore_backup(self, backup_id, db_dir, wal_dir):             # <<<<<<<<<<<<<<
 *         cdef Status st
 *         cdef backup.BackupID c_backup_id
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("rocksdb._rocksdb.BackupEngine.restore_backup", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1931
 *         check_status(st)
 * 
 *     def restore_latest_backup(self, db_dir, wal_dir):             # <<<<<<<<<<<<<<
 *         cdef Status st
 *         cdef string c_db_dir
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_12BackupEngine_9restore_latest_backup(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_12BackupEngine_9restore_latest_backup(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_db_dir = 0;
  PyObject *__pyx_v_wal_dir = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("restore_latest_backup (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_db_dir,&__pyx_n_s_wal_dir,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_db_dir)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_wal_dir)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("restore_latest_backup", 1, 2, 2, 1); __PYX_ERR(0, 1931, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "restore_latest_backup") < 0)) __PYX_ERR(0, 1931, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_db_dir = values[0];
    __pyx_v_wal_dir = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("restore_latest_backup", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1931, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.BackupEngine.restore_latest_backup", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_12BackupEngine_8restore_latest_backup(((struct __pyx_obj_7rocksdb_8_rocksdb_BackupEngine *)__pyx_v_self), __pyx_v_db_dir, __pyx_v_wal_dir);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_12BackupEngine_8restore_latest_backup(struct __pyx_obj_7rocksdb_8_rocksdb_BackupEngine *__pyx_v_self, PyObject *__pyx_v_db_dir, PyObject *__pyx_v_wal_dir) {
  rocksdb::Status __pyx_v_st;
  std::string __pyx_v_c_db_dir;
  std::string __pyx_v_c_wal_dir;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  rocksdb::Status __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("restore_latest_backup", 0);

  /* "rocksdb/_rocksdb.pyx":1936
 *         cdef string c_wal_dir
 * 
 *         c_db_dir = path_to_string(db_dir)             # <<<<<<<<<<<<<<
 *         c_wal_dir = path_to_string(wal_dir)
 * 
 */
  __pyx_t_1 = __pyx_f_7rocksdb_8_rocksdb_path_to_string(__pyx_v_db_dir); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1936, __pyx_L1_error)
  __pyx_v_c_db_dir = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1937
 * 
 *         c_db_dir = path_to_string(db_dir)
 *         c_wal_dir = path_to_string(wal_dir)             # <<<<<<<<<<<<<<
 * 
 *         with nogil:
 */
  __pyx_t_1 = __pyx_f_7rocksdb_8_rocksdb_path_to_string(__pyx_v_wal_dir); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1937, __pyx_L1_error)
  __pyx_v_c_wal_dir = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1939
 *         c_wal_dir = path_to_string(wal_dir)
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             st = self.engine.RestoreDBFromLatestBackup(c_db_dir, c_wal_dir)
 * 
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      #endif
      /*try:*/ {

        /* "rocksdb/_rocksdb.pyx":1940
 * 
 *         with nogil:
 *             st = self.engine.RestoreDBFromLatestBackup(c_db_dir, c_wal_dir)             # <<<<<<<<<<<<<<
 * 
 *         check_status(st)
 */
        try {
          __pyx_t_2 = __pyx_v_self->engine->RestoreDBFromLatestBackup(__pyx_v_c_db_dir, __pyx_v_c_wal_dir);
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 1940, __pyx_L4_error)
        }
        __pyx_v_st = __pyx_t_2;
      }

      /* "rocksdb/_rocksdb.pyx":1939
 *         c_wal_dir = path_to_string(wal_dir)
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             st = self.engine.RestoreDBFromLatestBackup(c_db_dir, c_wal_dir)
 * 
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "rocksdb/_rocksdb.pyx":1942
 *             st = self.engine.RestoreDBFromLatestBackup(c_db_dir, c_wal_dir)
 * 
 *         check_status(st)             # <<<<<<<<<<<<<<
 * 
 *     def stop_backup(self):
 */
  __pyx_t_3 = __pyx_f_7rocksdb_8_rocksdb_check_status(__pyx_v_st); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1942, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "rocksdb/_rocksdb.pyx":1931
 *         check_status(st)
 * 
 *     def restore_latest_backup(self, db_dir, wal_dir):             # <<<<<<<<<<<<<<
 *         cdef Status st
 *         cdef string c_db_dir
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("rocksdb._rocksdb.BackupEngine.restore_latest_backup", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1944
 *         check_status(st)
 * 
 *     def stop_backup(self):             # <<<<<<<<<<<<<<
 *         with nogil:
 *             self.engine.StopBackup()
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_12BackupEngine_11stop_backup(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_12BackupEngine_11stop_backup(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("stop_backup (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_12BackupEngine_10stop_backup(((struct __pyx_obj_7rocksdb_8_rocksdb_BackupEngine *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_12BackupEngine_10stop_backup(struct __pyx_obj_7rocksdb_8_rocksdb_BackupEngine *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("stop_backup", 0);

  /* "rocksdb/_rocksdb.pyx":1945
 * 
 *     def stop_backup(self):
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self.engine.StopBackup()
 * 
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      #endif
      /*try:*/ {

        /* "rocksdb/_rocksdb.pyx":1946
 *     def stop_backup(self):
 *         with nogil:
 *             self.engine.StopBackup()             # <<<<<<<<<<<<<<
 * 
 *     def purge_old_backups(self, num_backups_to_keep):
 */
        try {
          __pyx_v_self->engine->StopBackup();
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 1946, __pyx_L4_error)
        }
      }

      /* "rocksdb/_rocksdb.pyx":1945
 * 
 *     def stop_backup(self):
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self.engine.StopBackup()
 * 
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "rocksdb/_rocksdb.pyx":1944
 *         check_status(st)
 * 
 *     def stop_backup(self):             # <<<<<<<<<<<<<<
 *         with nogil:
 *             self.engine.StopBackup()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("rocksdb._rocksdb.BackupEngine.stop_backup", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1948
 *             self.engine.StopBackup()
 * 
 *     def purge_old_backups(self, num_backups_to_keep):             # <<<<<<<<<<<<<<
 *         cdef Status st
 *         cdef uint32_t c_num_backups_to_keep
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_12BackupEngine_13purge_old_backups(PyObject *__pyx_v_self, PyObject *__pyx_v_num_backups_to_keep); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_12BackupEngine_13purge_old_backups(PyObject *__pyx_v_self, PyObject *__pyx_v_num_backups_to_keep) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("purge_old_backups (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_12BackupEngine_12purge_old_backups(((struct __pyx_obj_7rocksdb_8_rocksdb_BackupEngine *)__pyx_v_self), ((PyObject *)__pyx_v_num_backups_to_keep));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_12BackupEngine_12purge_old_backups(struct __pyx_obj_7rocksdb_8_rocksdb_BackupEngine *__pyx_v_self, PyObject *__pyx_v_num_backups_to_keep) {
  rocksdb::Status __pyx_v_st;
  uint32_t __pyx_v_c_num_backups_to_keep;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint32_t __pyx_t_1;
  rocksdb::Status __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("purge_old_backups", 0);

  /* "rocksdb/_rocksdb.pyx":1952
 *         cdef uint32_t c_num_backups_to_keep
 * 
 *         c_num_backups_to_keep = num_backups_to_keep             # <<<<<<<<<<<<<<
 * 
 *         with nogil:
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint32_t(__pyx_v_num_backups_to_keep); if (unlikely((__pyx_t_1 == ((uint32_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1952, __pyx_L1_error)
  __pyx_v_c_num_backups_to_keep = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1954
 *         c_num_backups_to_keep = num_backups_to_keep
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             st = self.engine.PurgeOldBackups(c_num_backups_to_keep)
 *         check_status(st)
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      #endif
      /*try:*/ {

        /* "rocksdb/_rocksdb.pyx":1955
 * 
 *         with nogil:
 *             st = self.engine.PurgeOldBackups(c_num_backups_to_keep)             # <<<<<<<<<<<<<<
 *         check_status(st)
 * 
 */
        try {
          __pyx_t_2 = __pyx_v_self->engine->PurgeOldBackups(__pyx_v_c_num_backups_to_keep);
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 1955, __pyx_L4_error)
        }
        __pyx_v_st = __pyx_t_2;
      }

      /* "rocksdb/_rocksdb.pyx":1954
 *         c_num_backups_to_keep = num_backups_to_keep
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             st = self.engine.PurgeOldBackups(c_num_backups_to_keep)
 *         check_status(st)
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "rocksdb/_rocksdb.pyx":1956
 *         with nogil:
 *             st = self.engine.PurgeOldBackups(c_num_backups_to_keep)
 *         check_status(st)             # <<<<<<<<<<<<<<
 * 
 *     def delete_backup(self, backup_id):
 */
  __pyx_t_3 = __pyx_f_7rocksdb_8_rocksdb_check_status(__pyx_v_st); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1956, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "rocksdb/_rocksdb.pyx":1948
 *             self.engine.StopBackup()
 * 
 *     def purge_old_backups(self, num_backups_to_keep):             # <<<<<<<<<<<<<<
 *         cdef Status st
 *         cdef uint32_t c_num_backups_to_keep
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("rocksdb._rocksdb.BackupEngine.purge_old_backups", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1958
 *         check_status(st)
 * 
 *     def delete_backup(self, backup_id):             # <<<<<<<<<<<<<<
 *         cdef Status st
 *         cdef backup.BackupID c_backup_id
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_12BackupEngine_15delete_backup(PyObject *__pyx_v_self, PyObject *__pyx_v_backup_id); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_12BackupEngine_15delete_backup(PyObject *__pyx_v_self, PyObject *__pyx_v_backup_id) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("delete_backup (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_12BackupEngine_14delete_backup(((struct __pyx_obj_7rocksdb_8_rocksdb_BackupEngine *)__pyx_v_self), ((PyObject *)__pyx_v_backup_id));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_12BackupEngine_14delete_backup(struct __pyx_obj_7rocksdb_8_rocksdb_BackupEngine *__pyx_v_self, PyObject *__pyx_v_backup_id) {
  rocksdb::Status __pyx_v_st;
  rocksdb::BackupID __pyx_v_c_backup_id;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  rocksdb::BackupID __pyx_t_1;
  rocksdb::Status __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("delete_backup", 0);

  /* "rocksdb/_rocksdb.pyx":1962
 *         cdef backup.BackupID c_backup_id
 * 
 *         c_backup_id = backup_id             # <<<<<<<<<<<<<<
 * 
 *         with nogil:
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint32_t(__pyx_v_backup_id); if (unlikely((__pyx_t_1 == ((rocksdb::BackupID)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1962, __pyx_L1_error)
  __pyx_v_c_backup_id = __pyx_t_1;

  /* "rocksdb/_rocksdb.pyx":1964
 *         c_backup_id = backup_id
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             st = self.engine.DeleteBackup(c_backup_id)
 * 
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      #endif
      /*try:*/ {

        /* "rocksdb/_rocksdb.pyx":1965
 * 
 *         with nogil:
 *             st = self.engine.DeleteBackup(c_backup_id)             # <<<<<<<<<<<<<<
 * 
 *         check_status(st)
 */
        try {
          __pyx_t_2 = __pyx_v_self->engine->DeleteBackup(__pyx_v_c_backup_id);
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 1965, __pyx_L4_error)
        }
        __pyx_v_st = __pyx_t_2;
      }

      /* "rocksdb/_rocksdb.pyx":1964
 *         c_backup_id = backup_id
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             st = self.engine.DeleteBackup(c_backup_id)
 * 
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "rocksdb/_rocksdb.pyx":1967
 *             st = self.engine.DeleteBackup(c_backup_id)
 * 
 *         check_status(st)             # <<<<<<<<<<<<<<
 * 
 *     def get_backup_info(self):
 */
  __pyx_t_3 = __pyx_f_7rocksdb_8_rocksdb_check_status(__pyx_v_st); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1967, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "rocksdb/_rocksdb.pyx":1958
 *         check_status(st)
 * 
 *     def delete_backup(self, backup_id):             # <<<<<<<<<<<<<<
 *         cdef Status st
 *         cdef backup.BackupID c_backup_id
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("rocksdb._rocksdb.BackupEngine.delete_backup", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "rocksdb/_rocksdb.pyx":1969
 *         check_status(st)
 * 
 *     def get_backup_info(self):             # <<<<<<<<<<<<<<
 *         cdef vector[backup.BackupInfo] backup_info
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_12BackupEngine_17get_backup_info(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7rocksdb_8_rocksdb_12BackupEngine_17get_backup_info(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_backup_info (wrapper)", 0);
  __pyx_r = __pyx_pf_7rocksdb_8_rocksdb_12BackupEngine_16get_backup_info(((struct __pyx_obj_7rocksdb_8_rocksdb_BackupEngine *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7rocksdb_8_rocksdb_12BackupEngine_16get_backup_info(struct __pyx_obj_7rocksdb_8_rocksdb_BackupEngine *__pyx_v_self) {
  std::vector<struct rocksdb::BackupInfo>  __pyx_v_backup_info;
  PyObject *__pyx_v_ret = NULL;
  struct rocksdb::BackupInfo __pyx_v_ob;
  PyObject *__pyx_v_t = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::vector<struct rocksdb::BackupInfo> ::iterator __pyx_t_2;
  struct rocksdb::BackupInfo __pyx_t_3;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("get_backup_info", 0);

  /* "rocksdb/_rocksdb.pyx":1972
 *         cdef vector[backup.BackupInfo] backup_info
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self.engine.GetBackupInfo(cython.address(backup_info))
 * 
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      #endif
      /*try:*/ {

        /* "rocksdb/_rocksdb.pyx":1973
 * 
 *         with nogil:
 *             self.engine.GetBackupInfo(cython.address(backup_info))             # <<<<<<<<<<<<<<
 * 
 *         ret = []
 */
        try {
          __pyx_v_self->engine->GetBackupInfo((&__pyx_v_backup_info));
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 1973, __pyx_L4_error)
        }
      }

      /* "rocksdb/_rocksdb.pyx":1972
 *         cdef vector[backup.BackupInfo] backup_info
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self.engine.GetBackupInfo(cython.address(backup_info))
 * 
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "rocksdb/_rocksdb.pyx":1975
 *             self.engine.GetBackupInfo(cython.address(backup_info))
 * 
 *         ret = []             # <<<<<<<<<<<<<<
 *         for ob in backup_info:
 *             t = {}
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1975, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_ret = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":1976
 * 
 *         ret = []
 *         for ob in backup_info:             # <<<<<<<<<<<<<<
 *             t = {}
 *             t['backup_id'] = ob.backup_id
 */
  __pyx_t_2 = __pyx_v_backup_info.begin();
  for (;;) {
    if (!(__pyx_t_2 != __pyx_v_backup_info.end())) break;
    __pyx_t_3 = *__pyx_t_2;
    ++__pyx_t_2;
    __pyx_v_ob = __pyx_t_3;

    /* "rocksdb/_rocksdb.pyx":1977
 *         ret = []
 *         for ob in backup_info:
 *             t = {}             # <<<<<<<<<<<<<<
 *             t['backup_id'] = ob.backup_id
 *             t['timestamp'] = ob.timestamp
 */
    __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1977, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_t, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "rocksdb/_rocksdb.pyx":1978
 *         for ob in backup_info:
 *             t = {}
 *             t['backup_id'] = ob.backup_id             # <<<<<<<<<<<<<<
 *             t['timestamp'] = ob.timestamp
 *             t['size'] = ob.size
 */
    __pyx_t_1 = __Pyx_PyInt_From_uint32_t(__pyx_v_ob.backup_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1978, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(PyDict_SetItem(__pyx_v_t, __pyx_n_s_backup_id, __pyx_t_1) < 0)) __PYX_ERR(0, 1978, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "rocksdb/_rocksdb.pyx":1979
 *             t = {}
 *             t['backup_id'] = ob.backup_id
 *             t['timestamp'] = ob.timestamp             # <<<<<<<<<<<<<<
 *             t['size'] = ob.size
 *             ret.append(t)
 */
    __pyx_t_1 = __Pyx_PyInt_From_int64_t(__pyx_v_ob.timestamp); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1979, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(PyDict_SetItem(__pyx_v_t, __pyx_n_s_timestamp, __pyx_t_1) < 0)) __PYX_ERR(0, 1979, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "rocksdb/_rocksdb.pyx":1980
 *             t['backup_id'] = ob.backup_id
 *             t['timestamp'] = ob.timestamp
 *             t['size'] = ob.size             # <<<<<<<<<<<<<<
 *             ret.append(t)
 * 
 */
    __pyx_t_1 = __Pyx_PyInt_From_uint64_t(__pyx_v_ob.size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1980, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(PyDict_SetItem(__pyx_v_t, __pyx_n_s_size, __pyx_t_1) < 0)) __PYX_ERR(0, 1980, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "rocksdb/_rocksdb.pyx":1981
 *             t['timestamp'] = ob.timestamp
 *             t['size'] = ob.size
 *             ret.append(t)             # <<<<<<<<<<<<<<
 * 
 *         return ret
 */
    __pyx_t_4 = __Pyx_PyList_Append(__pyx_v_ret, __pyx_v_t); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(0, 1981, __pyx_L1_error)

    /* "rocksdb/_rocksdb.pyx":1976
 * 
 *         ret = []
 *         for ob in backup_info:             # <<<<<<<<<<<<<<
 *             t = {}
 *             t['backup_id'] = ob.backup_id
 */
  }

  /* "rocksdb/_rocksdb.pyx":1983
 *             ret.append(t)
 * 
 *         return ret             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ret);
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  /* "rocksdb/_rocksdb.pyx":1969
 *         check_status(st)
 * 
 *     def get_backup_info(self):             # <<<<<<<<<<<<<<
 *         cdef vector[backup.BackupInfo] backup_info
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("rocksdb._rocksdb.BackupEngine.get_backup_info", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyObject_string_to_py_std__in_string", 0);

  /* "string.to_py":32
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyUnicode_FromStringAndSize(char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyObject_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyUnicode_string_to_py_std__in_string", 0);

  /* "string.to_py":38
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyStr_FromStringAndSize(char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyUnicode_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyUnicode_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyStr_string_to_py_std__in_string", 0);

  /* "string.to_py":44
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyBytes_FromStringAndSize(char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyStr_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyStr_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyBytes_string_to_py_std__in_string", 0);

  /* "string.to_py":50
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyByteArray_FromStringAndSize(char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyBytes_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyByteArray_string_to_py_std__in_string", 0);

  /* "string.to_py":56
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyByteArray_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyByteArray_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.to_py":67
 * 
 * @cname("__pyx_convert_vector_to_py_int")
 * cdef object __pyx_convert_vector_to_py_int(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */

static PyObject *__pyx_convert_vector_to_py_int(const std::vector<int>  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_int", 0);

  /* "vector.to_py":68
 * @cname("__pyx_convert_vector_to_py_int")
 * cdef object __pyx_convert_vector_to_py_int(vector[X]& v):
 *     return [X_to_py(v[i]) for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;
    __pyx_t_4 = __Pyx_PyInt_From_int((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 68, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) __PYX_ERR(1, 68, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":67
 * 
 * @cname("__pyx_convert_vector_to_py_int")
 * cdef object __pyx_convert_vector_to_py_int(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.from_py":49
 * 
 * @cname("__pyx_convert_vector_from_py_int")
 * cdef vector[X] __pyx_convert_vector_from_py_int(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

static std::vector<int>  __pyx_convert_vector_from_py_int(PyObject *__pyx_v_o) {
  std::vector<int>  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<int>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_int", 0);

  /* "vector.from_py":51
 * cdef vector[X] __pyx_convert_vector_from_py_int(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(X_from_py(item))
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 51, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 51, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 51, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 51, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 51, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 51, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 51, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":52
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(X_from_py(item))             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_v_item); if (unlikely(__pyx_t_5 == -1 && PyErr_Occurred())) __PYX_ERR(1, 52, __pyx_L1_error)
    __pyx_v_v.push_back(__pyx_t_5);

    /* "vector.from_py":51
 * cdef vector[X] __pyx_convert_vector_from_py_int(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(X_from_py(item))
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":53
 *     for item in o:
 *         v.push_back(X_from_py(item))
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":49
 * 
 * @cname("__pyx_convert_vector_from_py_int")
 * cdef vector[X] __pyx_convert_vector_from_py_int(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyComparator __pyx_vtable_7rocksdb_8_rocksdb_PyComparator;

static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_PyComparator(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_7rocksdb_8_rocksdb_PyComparator *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7rocksdb_8_rocksdb_PyComparator *)o);
  p->__pyx_vtab = __pyx_vtabptr_7rocksdb_8_rocksdb_PyComparator;
  return o;
}

static void __pyx_tp_dealloc_7rocksdb_8_rocksdb_PyComparator(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyTypeObject __pyx_type_7rocksdb_8_rocksdb_PyComparator = {
  PyVarObject_HEAD_INIT(0, 0)
  "rocksdb._rocksdb.PyComparator", /*tp_name*/
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_PyComparator), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7rocksdb_8_rocksdb_PyComparator, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7rocksdb_8_rocksdb_PyComparator, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyGenericComparator __pyx_vtable_7rocksdb_8_rocksdb_PyGenericComparator;

static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_PyGenericComparator(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericComparator *p;
  PyObject *o = __pyx_tp_new_7rocksdb_8_rocksdb_PyComparator(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericComparator *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyComparator*)__pyx_vtabptr_7rocksdb_8_rocksdb_PyGenericComparator;
  p->ob = Py_None; Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_7rocksdb_8_rocksdb_19PyGenericComparator_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7rocksdb_8_rocksdb_PyGenericComparator(PyObject *o) {
  struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericComparator *p = (struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericComparator *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_7rocksdb_8_rocksdb_19PyGenericComparator_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->ob);
  #if CYTHON_USE_TYPE_SLOTS
  if (PyType_IS_GC(Py_TYPE(o)->tp_base))
  #endif
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_7rocksdb_8_rocksdb_PyComparator(o);
}

static int __pyx_tp_traverse_7rocksdb_8_rocksdb_PyGenericComparator(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericComparator *p = (struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericComparator *)o;
  e = ((likely(__pyx_ptype_7rocksdb_8_rocksdb_PyComparator)) ? ((__pyx_ptype_7rocksdb_8_rocksdb_PyComparator->tp_traverse) ? __pyx_ptype_7rocksdb_8_rocksdb_PyComparator->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_7rocksdb_8_rocksdb_PyGenericComparator)); if (e) return e;
  if (p->ob) {
    e = (*v)(p->ob, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7rocksdb_8_rocksdb_PyGenericComparator(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericComparator *p = (struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericComparator *)o;
  if (likely(__pyx_ptype_7rocksdb_8_rocksdb_PyComparator)) { if (__pyx_ptype_7rocksdb_8_rocksdb_PyComparator->tp_clear) __pyx_ptype_7rocksdb_8_rocksdb_PyComparator->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_7rocksdb_8_rocksdb_PyGenericComparator);
  tmp = ((PyObject*)p->ob);
  p->ob = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_7rocksdb_8_rocksdb_PyGenericComparator[] = {
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7rocksdb_8_rocksdb_PyGenericComparator = {
  PyVarObject_HEAD_INIT(0, 0)
  "rocksdb._rocksdb.PyGenericComparator", /*tp_name*/
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericComparator), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7rocksdb_8_rocksdb_PyGenericComparator, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7rocksdb_8_rocksdb_PyGenericComparator, /*tp_traverse*/
  __pyx_tp_clear_7rocksdb_8_rocksdb_PyGenericComparator, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7rocksdb_8_rocksdb_PyGenericComparator, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7rocksdb_8_rocksdb_PyGenericComparator, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyBytewiseComparator __pyx_vtable_7rocksdb_8_rocksdb_PyBytewiseComparator;

static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_PyBytewiseComparator(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7rocksdb_8_rocksdb_PyBytewiseComparator *p;
  PyObject *o = __pyx_tp_new_7rocksdb_8_rocksdb_PyComparator(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7rocksdb_8_rocksdb_PyBytewiseComparator *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyComparator*)__pyx_vtabptr_7rocksdb_8_rocksdb_PyBytewiseComparator;
  if (unlikely(__pyx_pw_7rocksdb_8_rocksdb_20PyBytewiseComparator_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static PyMethodDef __pyx_methods_7rocksdb_8_rocksdb_PyBytewiseComparator[] = {
  {"name", (PyCFunction)__pyx_pw_7rocksdb_8_rocksdb_20PyBytewiseComparator_3name, METH_NOARGS, 0},
  {"compare", (PyCFunction)__pyx_pw_7rocksdb_8_rocksdb_20PyBytewiseComparator_5compare, METH_VARARGS|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7rocksdb_8_rocksdb_PyBytewiseComparator = {
  PyVarObject_HEAD_INIT(0, 0)
  "rocksdb._rocksdb.PyBytewiseComparator", /*tp_name*/
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_PyBytewiseComparator), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7rocksdb_8_rocksdb_PyComparator, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7rocksdb_8_rocksdb_PyBytewiseComparator, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7rocksdb_8_rocksdb_PyBytewiseComparator, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyFilterPolicy __pyx_vtable_7rocksdb_8_rocksdb_PyFilterPolicy;

static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_PyFilterPolicy(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_7rocksdb_8_rocksdb_PyFilterPolicy *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7rocksdb_8_rocksdb_PyFilterPolicy *)o);
  p->__pyx_vtab = __pyx_vtabptr_7rocksdb_8_rocksdb_PyFilterPolicy;
  return o;
}

static void __pyx_tp_dealloc_7rocksdb_8_rocksdb_PyFilterPolicy(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyTypeObject __pyx_type_7rocksdb_8_rocksdb_PyFilterPolicy = {
  PyVarObject_HEAD_INIT(0, 0)
  "rocksdb._rocksdb.PyFilterPolicy", /*tp_name*/
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_PyFilterPolicy), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7rocksdb_8_rocksdb_PyFilterPolicy, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7rocksdb_8_rocksdb_PyFilterPolicy, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyGenericFilterPolicy __pyx_vtable_7rocksdb_8_rocksdb_PyGenericFilterPolicy;

static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_PyGenericFilterPolicy(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericFilterPolicy *p;
  PyObject *o = __pyx_tp_new_7rocksdb_8_rocksdb_PyFilterPolicy(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericFilterPolicy *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyFilterPolicy*)__pyx_vtabptr_7rocksdb_8_rocksdb_PyGenericFilterPolicy;
  new((void*)&(p->policy)) std::shared_ptr<py_rocks::FilterPolicyWrapper> ();
  p->ob = Py_None; Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_7rocksdb_8_rocksdb_21PyGenericFilterPolicy_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7rocksdb_8_rocksdb_PyGenericFilterPolicy(PyObject *o) {
  struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericFilterPolicy *p = (struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericFilterPolicy *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->policy);
  Py_CLEAR(p->ob);
  #if CYTHON_USE_TYPE_SLOTS
  if (PyType_IS_GC(Py_TYPE(o)->tp_base))
  #endif
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_7rocksdb_8_rocksdb_PyFilterPolicy(o);
}

static int __pyx_tp_traverse_7rocksdb_8_rocksdb_PyGenericFilterPolicy(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericFilterPolicy *p = (struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericFilterPolicy *)o;
  e = ((likely(__pyx_ptype_7rocksdb_8_rocksdb_PyFilterPolicy)) ? ((__pyx_ptype_7rocksdb_8_rocksdb_PyFilterPolicy->tp_traverse) ? __pyx_ptype_7rocksdb_8_rocksdb_PyFilterPolicy->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_7rocksdb_8_rocksdb_PyGenericFilterPolicy)); if (e) return e;
  if (p->ob) {
    e = (*v)(p->ob, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7rocksdb_8_rocksdb_PyGenericFilterPolicy(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericFilterPolicy *p = (struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericFilterPolicy *)o;
  if (likely(__pyx_ptype_7rocksdb_8_rocksdb_PyFilterPolicy)) { if (__pyx_ptype_7rocksdb_8_rocksdb_PyFilterPolicy->tp_clear) __pyx_ptype_7rocksdb_8_rocksdb_PyFilterPolicy->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_7rocksdb_8_rocksdb_PyGenericFilterPolicy);
  tmp = ((PyObject*)p->ob);
  p->ob = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_7rocksdb_8_rocksdb_PyGenericFilterPolicy[] = {
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7rocksdb_8_rocksdb_PyGenericFilterPolicy = {
  PyVarObject_HEAD_INIT(0, 0)
  "rocksdb._rocksdb.PyGenericFilterPolicy", /*tp_name*/
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_PyGenericFilterPolicy), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7rocksdb_8_rocksdb_PyGenericFilterPolicy, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7rocksdb_8_rocksdb_PyGenericFilterPolicy, /*tp_traverse*/
  __pyx_tp_clear_7rocksdb_8_rocksdb_PyGenericFilterPolicy, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7rocksdb_8_rocksdb_PyGenericFilterPolicy, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7rocksdb_8_rocksdb_PyGenericFilterPolicy, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyBloomFilterPolicy __pyx_vtable_7rocksdb_8_rocksdb_PyBloomFilterPolicy;

static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_PyBloomFilterPolicy(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7rocksdb_8_rocksdb_PyBloomFilterPolicy *p;
  PyObject *o = __pyx_tp_new_7rocksdb_8_rocksdb_PyFilterPolicy(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7rocksdb_8_rocksdb_PyBloomFilterPolicy *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyFilterPolicy*)__pyx_vtabptr_7rocksdb_8_rocksdb_PyBloomFilterPolicy;
  new((void*)&(p->policy)) std::shared_ptr<__pyx_t_7rocksdb_8_rocksdb_ConstFilterPolicy> ();
  if (unlikely(__pyx_pw_7rocksdb_8_rocksdb_19PyBloomFilterPolicy_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7rocksdb_8_rocksdb_PyBloomFilterPolicy(PyObject *o) {
  struct __pyx_obj_7rocksdb_8_rocksdb_PyBloomFilterPolicy *p = (struct __pyx_obj_7rocksdb_8_rocksdb_PyBloomFilterPolicy *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->policy);
  __pyx_tp_dealloc_7rocksdb_8_rocksdb_PyFilterPolicy(o);
}

static PyMethodDef __pyx_methods_7rocksdb_8_rocksdb_PyBloomFilterPolicy[] = {
  {"name", (PyCFunction)__pyx_pw_7rocksdb_8_rocksdb_19PyBloomFilterPolicy_3name, METH_NOARGS, 0},
  {"create_filter", (PyCFunction)__pyx_pw_7rocksdb_8_rocksdb_19PyBloomFilterPolicy_5create_filter, METH_O, 0},
  {"key_may_match", (PyCFunction)__pyx_pw_7rocksdb_8_rocksdb_19PyBloomFilterPolicy_7key_may_match, METH_VARARGS|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7rocksdb_8_rocksdb_PyBloomFilterPolicy = {
  PyVarObject_HEAD_INIT(0, 0)
  "rocksdb._rocksdb.PyBloomFilterPolicy", /*tp_name*/
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_PyBloomFilterPolicy), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7rocksdb_8_rocksdb_PyBloomFilterPolicy, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7rocksdb_8_rocksdb_PyBloomFilterPolicy, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7rocksdb_8_rocksdb_PyBloomFilterPolicy, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyMergeOperator __pyx_vtable_7rocksdb_8_rocksdb_PyMergeOperator;

static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_PyMergeOperator(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7rocksdb_8_rocksdb_PyMergeOperator *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7rocksdb_8_rocksdb_PyMergeOperator *)o);
  p->__pyx_vtab = __pyx_vtabptr_7rocksdb_8_rocksdb_PyMergeOperator;
  new((void*)&(p->merge_op)) std::shared_ptr<rocksdb::MergeOperator> ();
  p->ob = Py_None; Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_7rocksdb_8_rocksdb_15PyMergeOperator_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7rocksdb_8_rocksdb_PyMergeOperator(PyObject *o) {
  struct __pyx_obj_7rocksdb_8_rocksdb_PyMergeOperator *p = (struct __pyx_obj_7rocksdb_8_rocksdb_PyMergeOperator *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->merge_op);
  Py_CLEAR(p->ob);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_7rocksdb_8_rocksdb_PyMergeOperator(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7rocksdb_8_rocksdb_PyMergeOperator *p = (struct __pyx_obj_7rocksdb_8_rocksdb_PyMergeOperator *)o;
  if (p->ob) {
    e = (*v)(p->ob, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7rocksdb_8_rocksdb_PyMergeOperator(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7rocksdb_8_rocksdb_PyMergeOperator *p = (struct __pyx_obj_7rocksdb_8_rocksdb_PyMergeOperator *)o;
  tmp = ((PyObject*)p->ob);
  p->ob = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_7rocksdb_8_rocksdb_PyMergeOperator[] = {
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7rocksdb_8_rocksdb_PyMergeOperator = {
  PyVarObject_HEAD_INIT(0, 0)
  "rocksdb._rocksdb.PyMergeOperator", /*tp_name*/
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_PyMergeOperator), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7rocksdb_8_rocksdb_PyMergeOperator, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7rocksdb_8_rocksdb_PyMergeOperator, /*tp_traverse*/
  __pyx_tp_clear_7rocksdb_8_rocksdb_PyMergeOperator, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7rocksdb_8_rocksdb_PyMergeOperator, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7rocksdb_8_rocksdb_PyMergeOperator, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyCache __pyx_vtable_7rocksdb_8_rocksdb_PyCache;

static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_PyCache(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_7rocksdb_8_rocksdb_PyCache *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7rocksdb_8_rocksdb_PyCache *)o);
  p->__pyx_vtab = __pyx_vtabptr_7rocksdb_8_rocksdb_PyCache;
  return o;
}

static void __pyx_tp_dealloc_7rocksdb_8_rocksdb_PyCache(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyTypeObject __pyx_type_7rocksdb_8_rocksdb_PyCache = {
  PyVarObject_HEAD_INIT(0, 0)
  "rocksdb._rocksdb.PyCache", /*tp_name*/
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_PyCache), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7rocksdb_8_rocksdb_PyCache, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7rocksdb_8_rocksdb_PyCache, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyLRUCache __pyx_vtable_7rocksdb_8_rocksdb_PyLRUCache;

static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_PyLRUCache(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7rocksdb_8_rocksdb_PyLRUCache *p;
  PyObject *o = __pyx_tp_new_7rocksdb_8_rocksdb_PyCache(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7rocksdb_8_rocksdb_PyLRUCache *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyCache*)__pyx_vtabptr_7rocksdb_8_rocksdb_PyLRUCache;
  new((void*)&(p->cache_ob)) std::shared_ptr<rocksdb::Cache> ();
  if (unlikely(__pyx_pw_7rocksdb_8_rocksdb_10PyLRUCache_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7rocksdb_8_rocksdb_PyLRUCache(PyObject *o) {
  struct __pyx_obj_7rocksdb_8_rocksdb_PyLRUCache *p = (struct __pyx_obj_7rocksdb_8_rocksdb_PyLRUCache *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->cache_ob);
  __pyx_tp_dealloc_7rocksdb_8_rocksdb_PyCache(o);
}

static PyMethodDef __pyx_methods_7rocksdb_8_rocksdb_PyLRUCache[] = {
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7rocksdb_8_rocksdb_PyLRUCache = {
  PyVarObject_HEAD_INIT(0, 0)
  "rocksdb._rocksdb.PyLRUCache", /*tp_name*/
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_PyLRUCache), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7rocksdb_8_rocksdb_PyLRUCache, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7rocksdb_8_rocksdb_PyLRUCache, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7rocksdb_8_rocksdb_PyLRUCache, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PySliceTransform __pyx_vtable_7rocksdb_8_rocksdb_PySliceTransform;

static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_PySliceTransform(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7rocksdb_8_rocksdb_PySliceTransform *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7rocksdb_8_rocksdb_PySliceTransform *)o);
  p->__pyx_vtab = __pyx_vtabptr_7rocksdb_8_rocksdb_PySliceTransform;
  new((void*)&(p->transfomer)) std::shared_ptr<rocksdb::SliceTransform> ();
  p->ob = Py_None; Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_7rocksdb_8_rocksdb_16PySliceTransform_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7rocksdb_8_rocksdb_PySliceTransform(PyObject *o) {
  struct __pyx_obj_7rocksdb_8_rocksdb_PySliceTransform *p = (struct __pyx_obj_7rocksdb_8_rocksdb_PySliceTransform *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->transfomer);
  Py_CLEAR(p->ob);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_7rocksdb_8_rocksdb_PySliceTransform(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7rocksdb_8_rocksdb_PySliceTransform *p = (struct __pyx_obj_7rocksdb_8_rocksdb_PySliceTransform *)o;
  if (p->ob) {
    e = (*v)(p->ob, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7rocksdb_8_rocksdb_PySliceTransform(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7rocksdb_8_rocksdb_PySliceTransform *p = (struct __pyx_obj_7rocksdb_8_rocksdb_PySliceTransform *)o;
  tmp = ((PyObject*)p->ob);
  p->ob = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_7rocksdb_8_rocksdb_PySliceTransform[] = {
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7rocksdb_8_rocksdb_PySliceTransform = {
  PyVarObject_HEAD_INIT(0, 0)
  "rocksdb._rocksdb.PySliceTransform", /*tp_name*/
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_PySliceTransform), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7rocksdb_8_rocksdb_PySliceTransform, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7rocksdb_8_rocksdb_PySliceTransform, /*tp_traverse*/
  __pyx_tp_clear_7rocksdb_8_rocksdb_PySliceTransform, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7rocksdb_8_rocksdb_PySliceTransform, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7rocksdb_8_rocksdb_PySliceTransform, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyTableFactory __pyx_vtable_7rocksdb_8_rocksdb_PyTableFactory;

static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_PyTableFactory(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_7rocksdb_8_rocksdb_PyTableFactory *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7rocksdb_8_rocksdb_PyTableFactory *)o);
  p->__pyx_vtab = __pyx_vtabptr_7rocksdb_8_rocksdb_PyTableFactory;
  new((void*)&(p->factory)) std::shared_ptr<rocksdb::TableFactory> ();
  return o;
}

static void __pyx_tp_dealloc_7rocksdb_8_rocksdb_PyTableFactory(PyObject *o) {
  struct __pyx_obj_7rocksdb_8_rocksdb_PyTableFactory *p = (struct __pyx_obj_7rocksdb_8_rocksdb_PyTableFactory *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->factory);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyTypeObject __pyx_type_7rocksdb_8_rocksdb_PyTableFactory = {
  PyVarObject_HEAD_INIT(0, 0)
  "rocksdb._rocksdb.PyTableFactory", /*tp_name*/
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_PyTableFactory), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7rocksdb_8_rocksdb_PyTableFactory, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7rocksdb_8_rocksdb_PyTableFactory, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_BlockBasedTableFactory __pyx_vtable_7rocksdb_8_rocksdb_BlockBasedTableFactory;

static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_BlockBasedTableFactory(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7rocksdb_8_rocksdb_BlockBasedTableFactory *p;
  PyObject *o = __pyx_tp_new_7rocksdb_8_rocksdb_PyTableFactory(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7rocksdb_8_rocksdb_BlockBasedTableFactory *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyTableFactory*)__pyx_vtabptr_7rocksdb_8_rocksdb_BlockBasedTableFactory;
  p->py_filter_policy = ((struct __pyx_obj_7rocksdb_8_rocksdb_PyFilterPolicy *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_7rocksdb_8_rocksdb_BlockBasedTableFactory(PyObject *o) {
  struct __pyx_obj_7rocksdb_8_rocksdb_BlockBasedTableFactory *p = (struct __pyx_obj_7rocksdb_8_rocksdb_BlockBasedTableFactory *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->py_filter_policy);
  #if CYTHON_USE_TYPE_SLOTS
  if (PyType_IS_GC(Py_TYPE(o)->tp_base))
  #endif
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_7rocksdb_8_rocksdb_PyTableFactory(o);
}

static int __pyx_tp_traverse_7rocksdb_8_rocksdb_BlockBasedTableFactory(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7rocksdb_8_rocksdb_BlockBasedTableFactory *p = (struct __pyx_obj_7rocksdb_8_rocksdb_BlockBasedTableFactory *)o;
  e = ((likely(__pyx_ptype_7rocksdb_8_rocksdb_PyTableFactory)) ? ((__pyx_ptype_7rocksdb_8_rocksdb_PyTableFactory->tp_traverse) ? __pyx_ptype_7rocksdb_8_rocksdb_PyTableFactory->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_7rocksdb_8_rocksdb_BlockBasedTableFactory)); if (e) return e;
  if (p->py_filter_policy) {
    e = (*v)(((PyObject*)p->py_filter_policy), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7rocksdb_8_rocksdb_BlockBasedTableFactory(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7rocksdb_8_rocksdb_BlockBasedTableFactory *p = (struct __pyx_obj_7rocksdb_8_rocksdb_BlockBasedTableFactory *)o;
  if (likely(__pyx_ptype_7rocksdb_8_rocksdb_PyTableFactory)) { if (__pyx_ptype_7rocksdb_8_rocksdb_PyTableFactory->tp_clear) __pyx_ptype_7rocksdb_8_rocksdb_PyTableFactory->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_7rocksdb_8_rocksdb_BlockBasedTableFactory);
  tmp = ((PyObject*)p->py_filter_policy);
  p->py_filter_policy = ((struct __pyx_obj_7rocksdb_8_rocksdb_PyFilterPolicy *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_7rocksdb_8_rocksdb_BlockBasedTableFactory[] = {
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7rocksdb_8_rocksdb_BlockBasedTableFactory = {
  PyVarObject_HEAD_INIT(0, 0)
  "rocksdb._rocksdb.BlockBasedTableFactory", /*tp_name*/
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_BlockBasedTableFactory), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7rocksdb_8_rocksdb_BlockBasedTableFactory, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7rocksdb_8_rocksdb_BlockBasedTableFactory, /*tp_traverse*/
  __pyx_tp_clear_7rocksdb_8_rocksdb_BlockBasedTableFactory, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7rocksdb_8_rocksdb_BlockBasedTableFactory, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_7rocksdb_8_rocksdb_22BlockBasedTableFactory_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7rocksdb_8_rocksdb_BlockBasedTableFactory, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PlainTableFactory __pyx_vtable_7rocksdb_8_rocksdb_PlainTableFactory;

static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_PlainTableFactory(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7rocksdb_8_rocksdb_PlainTableFactory *p;
  PyObject *o = __pyx_tp_new_7rocksdb_8_rocksdb_PyTableFactory(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7rocksdb_8_rocksdb_PlainTableFactory *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyTableFactory*)__pyx_vtabptr_7rocksdb_8_rocksdb_PlainTableFactory;
  return o;
}

static PyMethodDef __pyx_methods_7rocksdb_8_rocksdb_PlainTableFactory[] = {
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7rocksdb_8_rocksdb_PlainTableFactory = {
  PyVarObject_HEAD_INIT(0, 0)
  "rocksdb._rocksdb.PlainTableFactory", /*tp_name*/
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_PlainTableFactory), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7rocksdb_8_rocksdb_PyTableFactory, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7rocksdb_8_rocksdb_PlainTableFactory, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_7rocksdb_8_rocksdb_17PlainTableFactory_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7rocksdb_8_rocksdb_PlainTableFactory, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyMemtableFactory __pyx_vtable_7rocksdb_8_rocksdb_PyMemtableFactory;

static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_PyMemtableFactory(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_7rocksdb_8_rocksdb_PyMemtableFactory *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7rocksdb_8_rocksdb_PyMemtableFactory *)o);
  p->__pyx_vtab = __pyx_vtabptr_7rocksdb_8_rocksdb_PyMemtableFactory;
  new((void*)&(p->factory)) std::shared_ptr<rocksdb::MemTableRepFactory> ();
  return o;
}

static void __pyx_tp_dealloc_7rocksdb_8_rocksdb_PyMemtableFactory(PyObject *o) {
  struct __pyx_obj_7rocksdb_8_rocksdb_PyMemtableFactory *p = (struct __pyx_obj_7rocksdb_8_rocksdb_PyMemtableFactory *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->factory);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyTypeObject __pyx_type_7rocksdb_8_rocksdb_PyMemtableFactory = {
  PyVarObject_HEAD_INIT(0, 0)
  "rocksdb._rocksdb.PyMemtableFactory", /*tp_name*/
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_PyMemtableFactory), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7rocksdb_8_rocksdb_PyMemtableFactory, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7rocksdb_8_rocksdb_PyMemtableFactory, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_SkipListMemtableFactory __pyx_vtable_7rocksdb_8_rocksdb_SkipListMemtableFactory;

static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_SkipListMemtableFactory(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7rocksdb_8_rocksdb_SkipListMemtableFactory *p;
  PyObject *o = __pyx_tp_new_7rocksdb_8_rocksdb_PyMemtableFactory(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7rocksdb_8_rocksdb_SkipListMemtableFactory *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyMemtableFactory*)__pyx_vtabptr_7rocksdb_8_rocksdb_SkipListMemtableFactory;
  return o;
}

static PyMethodDef __pyx_methods_7rocksdb_8_rocksdb_SkipListMemtableFactory[] = {
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7rocksdb_8_rocksdb_SkipListMemtableFactory = {
  PyVarObject_HEAD_INIT(0, 0)
  "rocksdb._rocksdb.SkipListMemtableFactory", /*tp_name*/
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_SkipListMemtableFactory), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7rocksdb_8_rocksdb_PyMemtableFactory, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7rocksdb_8_rocksdb_SkipListMemtableFactory, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_7rocksdb_8_rocksdb_23SkipListMemtableFactory_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7rocksdb_8_rocksdb_SkipListMemtableFactory, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_VectorMemtableFactory __pyx_vtable_7rocksdb_8_rocksdb_VectorMemtableFactory;

static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_VectorMemtableFactory(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7rocksdb_8_rocksdb_VectorMemtableFactory *p;
  PyObject *o = __pyx_tp_new_7rocksdb_8_rocksdb_PyMemtableFactory(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7rocksdb_8_rocksdb_VectorMemtableFactory *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyMemtableFactory*)__pyx_vtabptr_7rocksdb_8_rocksdb_VectorMemtableFactory;
  return o;
}

static PyMethodDef __pyx_methods_7rocksdb_8_rocksdb_VectorMemtableFactory[] = {
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7rocksdb_8_rocksdb_VectorMemtableFactory = {
  PyVarObject_HEAD_INIT(0, 0)
  "rocksdb._rocksdb.VectorMemtableFactory", /*tp_name*/
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_VectorMemtableFactory), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7rocksdb_8_rocksdb_PyMemtableFactory, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7rocksdb_8_rocksdb_VectorMemtableFactory, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_7rocksdb_8_rocksdb_21VectorMemtableFactory_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7rocksdb_8_rocksdb_VectorMemtableFactory, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_HashSkipListMemtableFactory __pyx_vtable_7rocksdb_8_rocksdb_HashSkipListMemtableFactory;

static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_HashSkipListMemtableFactory(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7rocksdb_8_rocksdb_HashSkipListMemtableFactory *p;
  PyObject *o = __pyx_tp_new_7rocksdb_8_rocksdb_PyMemtableFactory(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7rocksdb_8_rocksdb_HashSkipListMemtableFactory *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyMemtableFactory*)__pyx_vtabptr_7rocksdb_8_rocksdb_HashSkipListMemtableFactory;
  return o;
}

static PyMethodDef __pyx_methods_7rocksdb_8_rocksdb_HashSkipListMemtableFactory[] = {
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7rocksdb_8_rocksdb_HashSkipListMemtableFactory = {
  PyVarObject_HEAD_INIT(0, 0)
  "rocksdb._rocksdb.HashSkipListMemtableFactory", /*tp_name*/
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_HashSkipListMemtableFactory), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7rocksdb_8_rocksdb_PyMemtableFactory, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7rocksdb_8_rocksdb_HashSkipListMemtableFactory, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_7rocksdb_8_rocksdb_27HashSkipListMemtableFactory_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7rocksdb_8_rocksdb_HashSkipListMemtableFactory, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_HashLinkListMemtableFactory __pyx_vtable_7rocksdb_8_rocksdb_HashLinkListMemtableFactory;

static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_HashLinkListMemtableFactory(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7rocksdb_8_rocksdb_HashLinkListMemtableFactory *p;
  PyObject *o = __pyx_tp_new_7rocksdb_8_rocksdb_PyMemtableFactory(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7rocksdb_8_rocksdb_HashLinkListMemtableFactory *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_7rocksdb_8_rocksdb_PyMemtableFactory*)__pyx_vtabptr_7rocksdb_8_rocksdb_HashLinkListMemtableFactory;
  return o;
}

static PyMethodDef __pyx_methods_7rocksdb_8_rocksdb_HashLinkListMemtableFactory[] = {
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7rocksdb_8_rocksdb_HashLinkListMemtableFactory = {
  PyVarObject_HEAD_INIT(0, 0)
  "rocksdb._rocksdb.HashLinkListMemtableFactory", /*tp_name*/
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_HashLinkListMemtableFactory), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7rocksdb_8_rocksdb_PyMemtableFactory, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7rocksdb_8_rocksdb_HashLinkListMemtableFactory, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_7rocksdb_8_rocksdb_27HashLinkListMemtableFactory_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7rocksdb_8_rocksdb_HashLinkListMemtableFactory, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_CompressionType(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_7rocksdb_8_rocksdb_CompressionType(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyTypeObject __pyx_type_7rocksdb_8_rocksdb_CompressionType = {
  PyVarObject_HEAD_INIT(0, 0)
  "rocksdb._rocksdb.CompressionType", /*tp_name*/
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_CompressionType), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7rocksdb_8_rocksdb_CompressionType, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7rocksdb_8_rocksdb_CompressionType, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_CompactionPri(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_7rocksdb_8_rocksdb_CompactionPri(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyTypeObject __pyx_type_7rocksdb_8_rocksdb_CompactionPri = {
  PyVarObject_HEAD_INIT(0, 0)
  "rocksdb._rocksdb.CompactionPri", /*tp_name*/
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_CompactionPri), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7rocksdb_8_rocksdb_CompactionPri, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7rocksdb_8_rocksdb_CompactionPri, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_Options(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_7rocksdb_8_rocksdb_Options *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)o);
  p->py_comparator = ((struct __pyx_obj_7rocksdb_8_rocksdb_PyComparator *)Py_None); Py_INCREF(Py_None);
  p->py_merge_operator = ((struct __pyx_obj_7rocksdb_8_rocksdb_PyMergeOperator *)Py_None); Py_INCREF(Py_None);
  p->py_prefix_extractor = ((struct __pyx_obj_7rocksdb_8_rocksdb_PySliceTransform *)Py_None); Py_INCREF(Py_None);
  p->py_table_factory = ((struct __pyx_obj_7rocksdb_8_rocksdb_PyTableFactory *)Py_None); Py_INCREF(Py_None);
  p->py_memtable_factory = ((struct __pyx_obj_7rocksdb_8_rocksdb_PyMemtableFactory *)Py_None); Py_INCREF(Py_None);
  p->py_row_cache = ((struct __pyx_obj_7rocksdb_8_rocksdb_PyCache *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_7rocksdb_8_rocksdb_7Options_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7rocksdb_8_rocksdb_Options(PyObject *o) {
  struct __pyx_obj_7rocksdb_8_rocksdb_Options *p = (struct __pyx_obj_7rocksdb_8_rocksdb_Options *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_7rocksdb_8_rocksdb_7Options_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->py_comparator);
  Py_CLEAR(p->py_merge_operator);
  Py_CLEAR(p->py_prefix_extractor);
  Py_CLEAR(p->py_table_factory);
  Py_CLEAR(p->py_memtable_factory);
  Py_CLEAR(p->py_row_cache);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_7rocksdb_8_rocksdb_Options(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7rocksdb_8_rocksdb_Options *p = (struct __pyx_obj_7rocksdb_8_rocksdb_Options *)o;
  if (p->py_comparator) {
    e = (*v)(((PyObject*)p->py_comparator), a); if (e) return e;
  }
  if (p->py_merge_operator) {
    e = (*v)(((PyObject*)p->py_merge_operator), a); if (e) return e;
  }
  if (p->py_prefix_extractor) {
    e = (*v)(((PyObject*)p->py_prefix_extractor), a); if (e) return e;
  }
  if (p->py_table_factory) {
    e = (*v)(((PyObject*)p->py_table_factory), a); if (e) return e;
  }
  if (p->py_memtable_factory) {
    e = (*v)(((PyObject*)p->py_memtable_factory), a); if (e) return e;
  }
  if (p->py_row_cache) {
    e = (*v)(((PyObject*)p->py_row_cache), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7rocksdb_8_rocksdb_Options(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7rocksdb_8_rocksdb_Options *p = (struct __pyx_obj_7rocksdb_8_rocksdb_Options *)o;
  tmp = ((PyObject*)p->py_comparator);
  p->py_comparator = ((struct __pyx_obj_7rocksdb_8_rocksdb_PyComparator *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->py_merge_operator);
  p->py_merge_operator = ((struct __pyx_obj_7rocksdb_8_rocksdb_PyMergeOperator *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->py_prefix_extractor);
  p->py_prefix_extractor = ((struct __pyx_obj_7rocksdb_8_rocksdb_PySliceTransform *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->py_table_factory);
  p->py_table_factory = ((struct __pyx_obj_7rocksdb_8_rocksdb_PyTableFactory *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->py_memtable_factory);
  p->py_memtable_factory = ((struct __pyx_obj_7rocksdb_8_rocksdb_PyMemtableFactory *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->py_row_cache);
  p->py_row_cache = ((struct __pyx_obj_7rocksdb_8_rocksdb_PyCache *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_create_if_missing(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_17create_if_missing_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_create_if_missing(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_17create_if_missing_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_error_if_exists(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_15error_if_exists_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_error_if_exists(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_15error_if_exists_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_paranoid_checks(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_15paranoid_checks_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_paranoid_checks(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_15paranoid_checks_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_write_buffer_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_17write_buffer_size_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_write_buffer_size(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_17write_buffer_size_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_max_write_buffer_number(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_23max_write_buffer_number_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_max_write_buffer_number(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_23max_write_buffer_number_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_max_compaction_bytes(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_20max_compaction_bytes_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_max_compaction_bytes(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_20max_compaction_bytes_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_min_write_buffer_number_to_merge(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_32min_write_buffer_number_to_merge_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_min_write_buffer_number_to_merge(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_32min_write_buffer_number_to_merge_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_max_open_files(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_14max_open_files_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_max_open_files(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_14max_open_files_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_compression_opts(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_16compression_opts_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_compression_opts(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_16compression_opts_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_compaction_pri(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_14compaction_pri_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_compaction_pri(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_14compaction_pri_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_compression(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_11compression_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_compression(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_11compression_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_num_levels(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_10num_levels_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_num_levels(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_10num_levels_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_level0_file_num_compaction_trigger(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_34level0_file_num_compaction_trigger_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_level0_file_num_compaction_trigger(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_34level0_file_num_compaction_trigger_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_level0_slowdown_writes_trigger(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_30level0_slowdown_writes_trigger_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_level0_slowdown_writes_trigger(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_30level0_slowdown_writes_trigger_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_level0_stop_writes_trigger(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_26level0_stop_writes_trigger_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_level0_stop_writes_trigger(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_26level0_stop_writes_trigger_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_max_mem_compaction_level(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_24max_mem_compaction_level_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_max_mem_compaction_level(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_24max_mem_compaction_level_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_target_file_size_base(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_21target_file_size_base_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_target_file_size_base(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_21target_file_size_base_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_target_file_size_multiplier(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_27target_file_size_multiplier_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_target_file_size_multiplier(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_27target_file_size_multiplier_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_max_bytes_for_level_base(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_24max_bytes_for_level_base_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_max_bytes_for_level_base(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_24max_bytes_for_level_base_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_max_bytes_for_level_multiplier(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_30max_bytes_for_level_multiplier_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_max_bytes_for_level_multiplier(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_30max_bytes_for_level_multiplier_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_max_bytes_for_level_multiplier_additional(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_41max_bytes_for_level_multiplier_additional_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_max_bytes_for_level_multiplier_additional(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_41max_bytes_for_level_multiplier_additional_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_use_fsync(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_9use_fsync_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_use_fsync(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_9use_fsync_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_db_log_dir(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_10db_log_dir_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_db_log_dir(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_10db_log_dir_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_wal_dir(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_7wal_dir_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_wal_dir(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_7wal_dir_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_delete_obsolete_files_period_micros(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_35delete_obsolete_files_period_micros_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_delete_obsolete_files_period_micros(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_35delete_obsolete_files_period_micros_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_max_background_compactions(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_26max_background_compactions_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_max_background_compactions(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_26max_background_compactions_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_max_background_flushes(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_22max_background_flushes_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_max_background_flushes(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_22max_background_flushes_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_max_log_file_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_17max_log_file_size_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_max_log_file_size(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_17max_log_file_size_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_log_file_time_to_roll(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_21log_file_time_to_roll_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_log_file_time_to_roll(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_21log_file_time_to_roll_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_keep_log_file_num(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_17keep_log_file_num_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_keep_log_file_num(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_17keep_log_file_num_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_soft_rate_limit(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_15soft_rate_limit_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_soft_rate_limit(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_15soft_rate_limit_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_hard_rate_limit(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_15hard_rate_limit_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_hard_rate_limit(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_15hard_rate_limit_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_rate_limit_delay_max_milliseconds(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_33rate_limit_delay_max_milliseconds_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_rate_limit_delay_max_milliseconds(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_33rate_limit_delay_max_milliseconds_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_max_manifest_file_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_22max_manifest_file_size_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_max_manifest_file_size(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_22max_manifest_file_size_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_table_cache_numshardbits(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_24table_cache_numshardbits_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_table_cache_numshardbits(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_24table_cache_numshardbits_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_arena_block_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_16arena_block_size_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_arena_block_size(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_16arena_block_size_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_disable_auto_compactions(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_24disable_auto_compactions_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_disable_auto_compactions(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_24disable_auto_compactions_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_wal_ttl_seconds(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_15wal_ttl_seconds_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_wal_ttl_seconds(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_15wal_ttl_seconds_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_wal_size_limit_mb(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_17wal_size_limit_mb_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_wal_size_limit_mb(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_17wal_size_limit_mb_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_manifest_preallocation_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_27manifest_preallocation_size_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_manifest_preallocation_size(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_27manifest_preallocation_size_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_purge_redundant_kvs_while_flush(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_31purge_redundant_kvs_while_flush_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_purge_redundant_kvs_while_flush(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_31purge_redundant_kvs_while_flush_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_enable_write_thread_adaptive_yield(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_34enable_write_thread_adaptive_yield_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_enable_write_thread_adaptive_yield(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_34enable_write_thread_adaptive_yield_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_allow_concurrent_memtable_write(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_31allow_concurrent_memtable_write_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_allow_concurrent_memtable_write(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_31allow_concurrent_memtable_write_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_allow_mmap_reads(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_16allow_mmap_reads_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_allow_mmap_reads(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_16allow_mmap_reads_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_allow_mmap_writes(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_17allow_mmap_writes_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_allow_mmap_writes(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_17allow_mmap_writes_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_is_fd_close_on_exec(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_19is_fd_close_on_exec_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_is_fd_close_on_exec(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_19is_fd_close_on_exec_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_skip_log_error_on_recovery(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_26skip_log_error_on_recovery_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_skip_log_error_on_recovery(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_26skip_log_error_on_recovery_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_stats_dump_period_sec(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_21stats_dump_period_sec_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_stats_dump_period_sec(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_21stats_dump_period_sec_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_advise_random_on_open(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_21advise_random_on_open_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_advise_random_on_open(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_21advise_random_on_open_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_use_adaptive_mutex(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_18use_adaptive_mutex_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_use_adaptive_mutex(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_18use_adaptive_mutex_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_bytes_per_sync(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_14bytes_per_sync_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_bytes_per_sync(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_14bytes_per_sync_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_compaction_style(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_16compaction_style_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_compaction_style(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_16compaction_style_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_compaction_options_universal(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_28compaction_options_universal_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_compaction_options_universal(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_28compaction_options_universal_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_max_sequential_skip_in_iterations(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_33max_sequential_skip_in_iterations_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_max_sequential_skip_in_iterations(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_33max_sequential_skip_in_iterations_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_inplace_update_support(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_22inplace_update_support_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_inplace_update_support(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_22inplace_update_support_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_table_factory(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_13table_factory_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_table_factory(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_13table_factory_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_memtable_factory(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_16memtable_factory_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_memtable_factory(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_16memtable_factory_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_inplace_update_num_locks(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_24inplace_update_num_locks_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_inplace_update_num_locks(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_24inplace_update_num_locks_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_comparator(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_10comparator_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_comparator(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_10comparator_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_merge_operator(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_14merge_operator_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_merge_operator(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_14merge_operator_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_prefix_extractor(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_16prefix_extractor_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_prefix_extractor(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_16prefix_extractor_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_7Options_row_cache(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_7Options_9row_cache_1__get__(o);
}

static int __pyx_setprop_7rocksdb_8_rocksdb_7Options_row_cache(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7rocksdb_8_rocksdb_7Options_9row_cache_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_7rocksdb_8_rocksdb_Options[] = {
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7rocksdb_8_rocksdb_Options[] = {
  {(char *)"create_if_missing", __pyx_getprop_7rocksdb_8_rocksdb_7Options_create_if_missing, __pyx_setprop_7rocksdb_8_rocksdb_7Options_create_if_missing, (char *)0, 0},
  {(char *)"error_if_exists", __pyx_getprop_7rocksdb_8_rocksdb_7Options_error_if_exists, __pyx_setprop_7rocksdb_8_rocksdb_7Options_error_if_exists, (char *)0, 0},
  {(char *)"paranoid_checks", __pyx_getprop_7rocksdb_8_rocksdb_7Options_paranoid_checks, __pyx_setprop_7rocksdb_8_rocksdb_7Options_paranoid_checks, (char *)0, 0},
  {(char *)"write_buffer_size", __pyx_getprop_7rocksdb_8_rocksdb_7Options_write_buffer_size, __pyx_setprop_7rocksdb_8_rocksdb_7Options_write_buffer_size, (char *)0, 0},
  {(char *)"max_write_buffer_number", __pyx_getprop_7rocksdb_8_rocksdb_7Options_max_write_buffer_number, __pyx_setprop_7rocksdb_8_rocksdb_7Options_max_write_buffer_number, (char *)0, 0},
  {(char *)"max_compaction_bytes", __pyx_getprop_7rocksdb_8_rocksdb_7Options_max_compaction_bytes, __pyx_setprop_7rocksdb_8_rocksdb_7Options_max_compaction_bytes, (char *)0, 0},
  {(char *)"min_write_buffer_number_to_merge", __pyx_getprop_7rocksdb_8_rocksdb_7Options_min_write_buffer_number_to_merge, __pyx_setprop_7rocksdb_8_rocksdb_7Options_min_write_buffer_number_to_merge, (char *)0, 0},
  {(char *)"max_open_files", __pyx_getprop_7rocksdb_8_rocksdb_7Options_max_open_files, __pyx_setprop_7rocksdb_8_rocksdb_7Options_max_open_files, (char *)0, 0},
  {(char *)"compression_opts", __pyx_getprop_7rocksdb_8_rocksdb_7Options_compression_opts, __pyx_setprop_7rocksdb_8_rocksdb_7Options_compression_opts, (char *)0, 0},
  {(char *)"compaction_pri", __pyx_getprop_7rocksdb_8_rocksdb_7Options_compaction_pri, __pyx_setprop_7rocksdb_8_rocksdb_7Options_compaction_pri, (char *)0, 0},
  {(char *)"compression", __pyx_getprop_7rocksdb_8_rocksdb_7Options_compression, __pyx_setprop_7rocksdb_8_rocksdb_7Options_compression, (char *)0, 0},
  {(char *)"num_levels", __pyx_getprop_7rocksdb_8_rocksdb_7Options_num_levels, __pyx_setprop_7rocksdb_8_rocksdb_7Options_num_levels, (char *)0, 0},
  {(char *)"level0_file_num_compaction_trigger", __pyx_getprop_7rocksdb_8_rocksdb_7Options_level0_file_num_compaction_trigger, __pyx_setprop_7rocksdb_8_rocksdb_7Options_level0_file_num_compaction_trigger, (char *)0, 0},
  {(char *)"level0_slowdown_writes_trigger", __pyx_getprop_7rocksdb_8_rocksdb_7Options_level0_slowdown_writes_trigger, __pyx_setprop_7rocksdb_8_rocksdb_7Options_level0_slowdown_writes_trigger, (char *)0, 0},
  {(char *)"level0_stop_writes_trigger", __pyx_getprop_7rocksdb_8_rocksdb_7Options_level0_stop_writes_trigger, __pyx_setprop_7rocksdb_8_rocksdb_7Options_level0_stop_writes_trigger, (char *)0, 0},
  {(char *)"max_mem_compaction_level", __pyx_getprop_7rocksdb_8_rocksdb_7Options_max_mem_compaction_level, __pyx_setprop_7rocksdb_8_rocksdb_7Options_max_mem_compaction_level, (char *)0, 0},
  {(char *)"target_file_size_base", __pyx_getprop_7rocksdb_8_rocksdb_7Options_target_file_size_base, __pyx_setprop_7rocksdb_8_rocksdb_7Options_target_file_size_base, (char *)0, 0},
  {(char *)"target_file_size_multiplier", __pyx_getprop_7rocksdb_8_rocksdb_7Options_target_file_size_multiplier, __pyx_setprop_7rocksdb_8_rocksdb_7Options_target_file_size_multiplier, (char *)0, 0},
  {(char *)"max_bytes_for_level_base", __pyx_getprop_7rocksdb_8_rocksdb_7Options_max_bytes_for_level_base, __pyx_setprop_7rocksdb_8_rocksdb_7Options_max_bytes_for_level_base, (char *)0, 0},
  {(char *)"max_bytes_for_level_multiplier", __pyx_getprop_7rocksdb_8_rocksdb_7Options_max_bytes_for_level_multiplier, __pyx_setprop_7rocksdb_8_rocksdb_7Options_max_bytes_for_level_multiplier, (char *)0, 0},
  {(char *)"max_bytes_for_level_multiplier_additional", __pyx_getprop_7rocksdb_8_rocksdb_7Options_max_bytes_for_level_multiplier_additional, __pyx_setprop_7rocksdb_8_rocksdb_7Options_max_bytes_for_level_multiplier_additional, (char *)0, 0},
  {(char *)"use_fsync", __pyx_getprop_7rocksdb_8_rocksdb_7Options_use_fsync, __pyx_setprop_7rocksdb_8_rocksdb_7Options_use_fsync, (char *)0, 0},
  {(char *)"db_log_dir", __pyx_getprop_7rocksdb_8_rocksdb_7Options_db_log_dir, __pyx_setprop_7rocksdb_8_rocksdb_7Options_db_log_dir, (char *)0, 0},
  {(char *)"wal_dir", __pyx_getprop_7rocksdb_8_rocksdb_7Options_wal_dir, __pyx_setprop_7rocksdb_8_rocksdb_7Options_wal_dir, (char *)0, 0},
  {(char *)"delete_obsolete_files_period_micros", __pyx_getprop_7rocksdb_8_rocksdb_7Options_delete_obsolete_files_period_micros, __pyx_setprop_7rocksdb_8_rocksdb_7Options_delete_obsolete_files_period_micros, (char *)0, 0},
  {(char *)"max_background_compactions", __pyx_getprop_7rocksdb_8_rocksdb_7Options_max_background_compactions, __pyx_setprop_7rocksdb_8_rocksdb_7Options_max_background_compactions, (char *)0, 0},
  {(char *)"max_background_flushes", __pyx_getprop_7rocksdb_8_rocksdb_7Options_max_background_flushes, __pyx_setprop_7rocksdb_8_rocksdb_7Options_max_background_flushes, (char *)0, 0},
  {(char *)"max_log_file_size", __pyx_getprop_7rocksdb_8_rocksdb_7Options_max_log_file_size, __pyx_setprop_7rocksdb_8_rocksdb_7Options_max_log_file_size, (char *)0, 0},
  {(char *)"log_file_time_to_roll", __pyx_getprop_7rocksdb_8_rocksdb_7Options_log_file_time_to_roll, __pyx_setprop_7rocksdb_8_rocksdb_7Options_log_file_time_to_roll, (char *)0, 0},
  {(char *)"keep_log_file_num", __pyx_getprop_7rocksdb_8_rocksdb_7Options_keep_log_file_num, __pyx_setprop_7rocksdb_8_rocksdb_7Options_keep_log_file_num, (char *)0, 0},
  {(char *)"soft_rate_limit", __pyx_getprop_7rocksdb_8_rocksdb_7Options_soft_rate_limit, __pyx_setprop_7rocksdb_8_rocksdb_7Options_soft_rate_limit, (char *)0, 0},
  {(char *)"hard_rate_limit", __pyx_getprop_7rocksdb_8_rocksdb_7Options_hard_rate_limit, __pyx_setprop_7rocksdb_8_rocksdb_7Options_hard_rate_limit, (char *)0, 0},
  {(char *)"rate_limit_delay_max_milliseconds", __pyx_getprop_7rocksdb_8_rocksdb_7Options_rate_limit_delay_max_milliseconds, __pyx_setprop_7rocksdb_8_rocksdb_7Options_rate_limit_delay_max_milliseconds, (char *)0, 0},
  {(char *)"max_manifest_file_size", __pyx_getprop_7rocksdb_8_rocksdb_7Options_max_manifest_file_size, __pyx_setprop_7rocksdb_8_rocksdb_7Options_max_manifest_file_size, (char *)0, 0},
  {(char *)"table_cache_numshardbits", __pyx_getprop_7rocksdb_8_rocksdb_7Options_table_cache_numshardbits, __pyx_setprop_7rocksdb_8_rocksdb_7Options_table_cache_numshardbits, (char *)0, 0},
  {(char *)"arena_block_size", __pyx_getprop_7rocksdb_8_rocksdb_7Options_arena_block_size, __pyx_setprop_7rocksdb_8_rocksdb_7Options_arena_block_size, (char *)0, 0},
  {(char *)"disable_auto_compactions", __pyx_getprop_7rocksdb_8_rocksdb_7Options_disable_auto_compactions, __pyx_setprop_7rocksdb_8_rocksdb_7Options_disable_auto_compactions, (char *)0, 0},
  {(char *)"wal_ttl_seconds", __pyx_getprop_7rocksdb_8_rocksdb_7Options_wal_ttl_seconds, __pyx_setprop_7rocksdb_8_rocksdb_7Options_wal_ttl_seconds, (char *)0, 0},
  {(char *)"wal_size_limit_mb", __pyx_getprop_7rocksdb_8_rocksdb_7Options_wal_size_limit_mb, __pyx_setprop_7rocksdb_8_rocksdb_7Options_wal_size_limit_mb, (char *)0, 0},
  {(char *)"manifest_preallocation_size", __pyx_getprop_7rocksdb_8_rocksdb_7Options_manifest_preallocation_size, __pyx_setprop_7rocksdb_8_rocksdb_7Options_manifest_preallocation_size, (char *)0, 0},
  {(char *)"purge_redundant_kvs_while_flush", __pyx_getprop_7rocksdb_8_rocksdb_7Options_purge_redundant_kvs_while_flush, __pyx_setprop_7rocksdb_8_rocksdb_7Options_purge_redundant_kvs_while_flush, (char *)0, 0},
  {(char *)"enable_write_thread_adaptive_yield", __pyx_getprop_7rocksdb_8_rocksdb_7Options_enable_write_thread_adaptive_yield, __pyx_setprop_7rocksdb_8_rocksdb_7Options_enable_write_thread_adaptive_yield, (char *)0, 0},
  {(char *)"allow_concurrent_memtable_write", __pyx_getprop_7rocksdb_8_rocksdb_7Options_allow_concurrent_memtable_write, __pyx_setprop_7rocksdb_8_rocksdb_7Options_allow_concurrent_memtable_write, (char *)0, 0},
  {(char *)"allow_mmap_reads", __pyx_getprop_7rocksdb_8_rocksdb_7Options_allow_mmap_reads, __pyx_setprop_7rocksdb_8_rocksdb_7Options_allow_mmap_reads, (char *)0, 0},
  {(char *)"allow_mmap_writes", __pyx_getprop_7rocksdb_8_rocksdb_7Options_allow_mmap_writes, __pyx_setprop_7rocksdb_8_rocksdb_7Options_allow_mmap_writes, (char *)0, 0},
  {(char *)"is_fd_close_on_exec", __pyx_getprop_7rocksdb_8_rocksdb_7Options_is_fd_close_on_exec, __pyx_setprop_7rocksdb_8_rocksdb_7Options_is_fd_close_on_exec, (char *)0, 0},
  {(char *)"skip_log_error_on_recovery", __pyx_getprop_7rocksdb_8_rocksdb_7Options_skip_log_error_on_recovery, __pyx_setprop_7rocksdb_8_rocksdb_7Options_skip_log_error_on_recovery, (char *)0, 0},
  {(char *)"stats_dump_period_sec", __pyx_getprop_7rocksdb_8_rocksdb_7Options_stats_dump_period_sec, __pyx_setprop_7rocksdb_8_rocksdb_7Options_stats_dump_period_sec, (char *)0, 0},
  {(char *)"advise_random_on_open", __pyx_getprop_7rocksdb_8_rocksdb_7Options_advise_random_on_open, __pyx_setprop_7rocksdb_8_rocksdb_7Options_advise_random_on_open, (char *)0, 0},
  {(char *)"use_adaptive_mutex", __pyx_getprop_7rocksdb_8_rocksdb_7Options_use_adaptive_mutex, __pyx_setprop_7rocksdb_8_rocksdb_7Options_use_adaptive_mutex, (char *)0, 0},
  {(char *)"bytes_per_sync", __pyx_getprop_7rocksdb_8_rocksdb_7Options_bytes_per_sync, __pyx_setprop_7rocksdb_8_rocksdb_7Options_bytes_per_sync, (char *)0, 0},
  {(char *)"compaction_style", __pyx_getprop_7rocksdb_8_rocksdb_7Options_compaction_style, __pyx_setprop_7rocksdb_8_rocksdb_7Options_compaction_style, (char *)0, 0},
  {(char *)"compaction_options_universal", __pyx_getprop_7rocksdb_8_rocksdb_7Options_compaction_options_universal, __pyx_setprop_7rocksdb_8_rocksdb_7Options_compaction_options_universal, (char *)0, 0},
  {(char *)"max_sequential_skip_in_iterations", __pyx_getprop_7rocksdb_8_rocksdb_7Options_max_sequential_skip_in_iterations, __pyx_setprop_7rocksdb_8_rocksdb_7Options_max_sequential_skip_in_iterations, (char *)0, 0},
  {(char *)"inplace_update_support", __pyx_getprop_7rocksdb_8_rocksdb_7Options_inplace_update_support, __pyx_setprop_7rocksdb_8_rocksdb_7Options_inplace_update_support, (char *)0, 0},
  {(char *)"table_factory", __pyx_getprop_7rocksdb_8_rocksdb_7Options_table_factory, __pyx_setprop_7rocksdb_8_rocksdb_7Options_table_factory, (char *)0, 0},
  {(char *)"memtable_factory", __pyx_getprop_7rocksdb_8_rocksdb_7Options_memtable_factory, __pyx_setprop_7rocksdb_8_rocksdb_7Options_memtable_factory, (char *)0, 0},
  {(char *)"inplace_update_num_locks", __pyx_getprop_7rocksdb_8_rocksdb_7Options_inplace_update_num_locks, __pyx_setprop_7rocksdb_8_rocksdb_7Options_inplace_update_num_locks, (char *)0, 0},
  {(char *)"comparator", __pyx_getprop_7rocksdb_8_rocksdb_7Options_comparator, __pyx_setprop_7rocksdb_8_rocksdb_7Options_comparator, (char *)0, 0},
  {(char *)"merge_operator", __pyx_getprop_7rocksdb_8_rocksdb_7Options_merge_operator, __pyx_setprop_7rocksdb_8_rocksdb_7Options_merge_operator, (char *)0, 0},
  {(char *)"prefix_extractor", __pyx_getprop_7rocksdb_8_rocksdb_7Options_prefix_extractor, __pyx_setprop_7rocksdb_8_rocksdb_7Options_prefix_extractor, (char *)0, 0},
  {(char *)"row_cache", __pyx_getprop_7rocksdb_8_rocksdb_7Options_row_cache, __pyx_setprop_7rocksdb_8_rocksdb_7Options_row_cache, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7rocksdb_8_rocksdb_Options = {
  PyVarObject_HEAD_INIT(0, 0)
  "rocksdb._rocksdb.Options", /*tp_name*/
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_Options), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7rocksdb_8_rocksdb_Options, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7rocksdb_8_rocksdb_Options, /*tp_traverse*/
  __pyx_tp_clear_7rocksdb_8_rocksdb_Options, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7rocksdb_8_rocksdb_Options, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7rocksdb_8_rocksdb_Options, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_7rocksdb_8_rocksdb_7Options_5__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7rocksdb_8_rocksdb_Options, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_Snapshot(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7rocksdb_8_rocksdb_Snapshot *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7rocksdb_8_rocksdb_Snapshot *)o);
  p->db = ((struct __pyx_obj_7rocksdb_8_rocksdb_DB *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_7rocksdb_8_rocksdb_8Snapshot_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7rocksdb_8_rocksdb_Snapshot(PyObject *o) {
  struct __pyx_obj_7rocksdb_8_rocksdb_Snapshot *p = (struct __pyx_obj_7rocksdb_8_rocksdb_Snapshot *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_7rocksdb_8_rocksdb_8Snapshot_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->db);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_7rocksdb_8_rocksdb_Snapshot(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7rocksdb_8_rocksdb_Snapshot *p = (struct __pyx_obj_7rocksdb_8_rocksdb_Snapshot *)o;
  if (p->db) {
    e = (*v)(((PyObject*)p->db), a); if (e) return e;
  }
  return 0;
}

static PyMethodDef __pyx_methods_7rocksdb_8_rocksdb_Snapshot[] = {
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7rocksdb_8_rocksdb_Snapshot = {
  PyVarObject_HEAD_INIT(0, 0)
  "rocksdb._rocksdb.Snapshot", /*tp_name*/
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_Snapshot), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7rocksdb_8_rocksdb_Snapshot, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7rocksdb_8_rocksdb_Snapshot, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7rocksdb_8_rocksdb_Snapshot, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7rocksdb_8_rocksdb_Snapshot, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_BaseIterator __pyx_vtable_7rocksdb_8_rocksdb_BaseIterator;

static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_BaseIterator(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *)o);
  p->__pyx_vtab = __pyx_vtabptr_7rocksdb_8_rocksdb_BaseIterator;
  p->db = ((struct __pyx_obj_7rocksdb_8_rocksdb_DB *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7rocksdb_8_rocksdb_BaseIterator(PyObject *o) {
  struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *p = (struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->db);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_7rocksdb_8_rocksdb_BaseIterator(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *p = (struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *)o;
  if (p->db) {
    e = (*v)(((PyObject*)p->db), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7rocksdb_8_rocksdb_BaseIterator(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *p = (struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *)o;
  tmp = ((PyObject*)p->db);
  p->db = ((struct __pyx_obj_7rocksdb_8_rocksdb_DB *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_7rocksdb_8_rocksdb_BaseIterator[] = {
  {"__next__", (PyCFunction)__pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_7__next__, METH_NOARGS|METH_COEXIST, 0},
  {"get", (PyCFunction)__pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_9get, METH_NOARGS, 0},
  {"__reversed__", (PyCFunction)__pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_11__reversed__, METH_NOARGS, 0},
  {"seek_to_first", (PyCFunction)__pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_13seek_to_first, METH_NOARGS, 0},
  {"seek_to_last", (PyCFunction)__pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_15seek_to_last, METH_NOARGS, 0},
  {"seek", (PyCFunction)__pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_17seek, METH_O, 0},
  {"seek_for_prev", (PyCFunction)__pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_19seek_for_prev, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7rocksdb_8_rocksdb_BaseIterator = {
  PyVarObject_HEAD_INIT(0, 0)
  "rocksdb._rocksdb.BaseIterator", /*tp_name*/
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7rocksdb_8_rocksdb_BaseIterator, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7rocksdb_8_rocksdb_BaseIterator, /*tp_traverse*/
  __pyx_tp_clear_7rocksdb_8_rocksdb_BaseIterator, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_5__iter__, /*tp_iter*/
  __pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_7__next__, /*tp_iternext*/
  __pyx_methods_7rocksdb_8_rocksdb_BaseIterator, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7rocksdb_8_rocksdb_BaseIterator, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_KeysIterator __pyx_vtable_7rocksdb_8_rocksdb_KeysIterator;

static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_KeysIterator(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7rocksdb_8_rocksdb_KeysIterator *p;
  PyObject *o = __pyx_tp_new_7rocksdb_8_rocksdb_BaseIterator(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7rocksdb_8_rocksdb_KeysIterator *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_7rocksdb_8_rocksdb_BaseIterator*)__pyx_vtabptr_7rocksdb_8_rocksdb_KeysIterator;
  return o;
}

static PyTypeObject __pyx_type_7rocksdb_8_rocksdb_KeysIterator = {
  PyVarObject_HEAD_INIT(0, 0)
  "rocksdb._rocksdb.KeysIterator", /*tp_name*/
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_KeysIterator), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7rocksdb_8_rocksdb_BaseIterator, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7rocksdb_8_rocksdb_BaseIterator, /*tp_traverse*/
  __pyx_tp_clear_7rocksdb_8_rocksdb_BaseIterator, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_5__iter__, /*tp_iter*/
  #else
  0, /*tp_iter*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_7__next__, /*tp_iternext*/
  #else
  0, /*tp_iternext*/
  #endif
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7rocksdb_8_rocksdb_KeysIterator, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_ValuesIterator __pyx_vtable_7rocksdb_8_rocksdb_ValuesIterator;

static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_ValuesIterator(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7rocksdb_8_rocksdb_ValuesIterator *p;
  PyObject *o = __pyx_tp_new_7rocksdb_8_rocksdb_BaseIterator(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7rocksdb_8_rocksdb_ValuesIterator *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_7rocksdb_8_rocksdb_BaseIterator*)__pyx_vtabptr_7rocksdb_8_rocksdb_ValuesIterator;
  return o;
}

static PyTypeObject __pyx_type_7rocksdb_8_rocksdb_ValuesIterator = {
  PyVarObject_HEAD_INIT(0, 0)
  "rocksdb._rocksdb.ValuesIterator", /*tp_name*/
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_ValuesIterator), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7rocksdb_8_rocksdb_BaseIterator, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7rocksdb_8_rocksdb_BaseIterator, /*tp_traverse*/
  __pyx_tp_clear_7rocksdb_8_rocksdb_BaseIterator, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_5__iter__, /*tp_iter*/
  #else
  0, /*tp_iter*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_7__next__, /*tp_iternext*/
  #else
  0, /*tp_iternext*/
  #endif
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7rocksdb_8_rocksdb_ValuesIterator, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_ItemsIterator __pyx_vtable_7rocksdb_8_rocksdb_ItemsIterator;

static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_ItemsIterator(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7rocksdb_8_rocksdb_ItemsIterator *p;
  PyObject *o = __pyx_tp_new_7rocksdb_8_rocksdb_BaseIterator(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7rocksdb_8_rocksdb_ItemsIterator *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_7rocksdb_8_rocksdb_BaseIterator*)__pyx_vtabptr_7rocksdb_8_rocksdb_ItemsIterator;
  return o;
}

static PyTypeObject __pyx_type_7rocksdb_8_rocksdb_ItemsIterator = {
  PyVarObject_HEAD_INIT(0, 0)
  "rocksdb._rocksdb.ItemsIterator", /*tp_name*/
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_ItemsIterator), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7rocksdb_8_rocksdb_BaseIterator, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7rocksdb_8_rocksdb_BaseIterator, /*tp_traverse*/
  __pyx_tp_clear_7rocksdb_8_rocksdb_BaseIterator, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_5__iter__, /*tp_iter*/
  #else
  0, /*tp_iter*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_7rocksdb_8_rocksdb_12BaseIterator_7__next__, /*tp_iternext*/
  #else
  0, /*tp_iternext*/
  #endif
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7rocksdb_8_rocksdb_ItemsIterator, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_ReversedIterator(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7rocksdb_8_rocksdb_ReversedIterator *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7rocksdb_8_rocksdb_ReversedIterator *)o);
  p->it = ((struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_7rocksdb_8_rocksdb_16ReversedIterator_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7rocksdb_8_rocksdb_ReversedIterator(PyObject *o) {
  struct __pyx_obj_7rocksdb_8_rocksdb_ReversedIterator *p = (struct __pyx_obj_7rocksdb_8_rocksdb_ReversedIterator *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->it);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_7rocksdb_8_rocksdb_ReversedIterator(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7rocksdb_8_rocksdb_ReversedIterator *p = (struct __pyx_obj_7rocksdb_8_rocksdb_ReversedIterator *)o;
  if (p->it) {
    e = (*v)(((PyObject*)p->it), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7rocksdb_8_rocksdb_ReversedIterator(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7rocksdb_8_rocksdb_ReversedIterator *p = (struct __pyx_obj_7rocksdb_8_rocksdb_ReversedIterator *)o;
  tmp = ((PyObject*)p->it);
  p->it = ((struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_7rocksdb_8_rocksdb_ReversedIterator[] = {
  {"seek_to_first", (PyCFunction)__pyx_pw_7rocksdb_8_rocksdb_16ReversedIterator_3seek_to_first, METH_NOARGS, 0},
  {"seek_to_last", (PyCFunction)__pyx_pw_7rocksdb_8_rocksdb_16ReversedIterator_5seek_to_last, METH_NOARGS, 0},
  {"seek", (PyCFunction)__pyx_pw_7rocksdb_8_rocksdb_16ReversedIterator_7seek, METH_O, 0},
  {"seek_for_prev", (PyCFunction)__pyx_pw_7rocksdb_8_rocksdb_16ReversedIterator_9seek_for_prev, METH_O, 0},
  {"get", (PyCFunction)__pyx_pw_7rocksdb_8_rocksdb_16ReversedIterator_11get, METH_NOARGS, 0},
  {"__reversed__", (PyCFunction)__pyx_pw_7rocksdb_8_rocksdb_16ReversedIterator_15__reversed__, METH_NOARGS, 0},
  {"__next__", (PyCFunction)__pyx_pw_7rocksdb_8_rocksdb_16ReversedIterator_17__next__, METH_NOARGS|METH_COEXIST, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7rocksdb_8_rocksdb_ReversedIterator = {
  PyVarObject_HEAD_INIT(0, 0)
  "rocksdb._rocksdb.ReversedIterator", /*tp_name*/
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_ReversedIterator), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7rocksdb_8_rocksdb_ReversedIterator, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7rocksdb_8_rocksdb_ReversedIterator, /*tp_traverse*/
  __pyx_tp_clear_7rocksdb_8_rocksdb_ReversedIterator, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_7rocksdb_8_rocksdb_16ReversedIterator_13__iter__, /*tp_iter*/
  __pyx_pw_7rocksdb_8_rocksdb_16ReversedIterator_17__next__, /*tp_iternext*/
  __pyx_methods_7rocksdb_8_rocksdb_ReversedIterator, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7rocksdb_8_rocksdb_ReversedIterator, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_WriteBatchIterator(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatchIterator *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatchIterator *)o);
  new((void*)&(p->items)) std::vector<py_rocks::RecordItemsHandler::BatchItem> ();
  p->batch = ((struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatch *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_7rocksdb_8_rocksdb_WriteBatchIterator(PyObject *o) {
  struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatchIterator *p = (struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatchIterator *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->items);
  Py_CLEAR(p->batch);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_7rocksdb_8_rocksdb_WriteBatchIterator(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatchIterator *p = (struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatchIterator *)o;
  if (p->batch) {
    e = (*v)(((PyObject*)p->batch), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7rocksdb_8_rocksdb_WriteBatchIterator(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatchIterator *p = (struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatchIterator *)o;
  tmp = ((PyObject*)p->batch);
  p->batch = ((struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatch *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_7rocksdb_8_rocksdb_WriteBatchIterator[] = {
  {"__next__", (PyCFunction)__pyx_pw_7rocksdb_8_rocksdb_18WriteBatchIterator_5__next__, METH_NOARGS|METH_COEXIST, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7rocksdb_8_rocksdb_WriteBatchIterator = {
  PyVarObject_HEAD_INIT(0, 0)
  "rocksdb._rocksdb.WriteBatchIterator", /*tp_name*/
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatchIterator), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7rocksdb_8_rocksdb_WriteBatchIterator, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7rocksdb_8_rocksdb_WriteBatchIterator, /*tp_traverse*/
  __pyx_tp_clear_7rocksdb_8_rocksdb_WriteBatchIterator, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_7rocksdb_8_rocksdb_18WriteBatchIterator_3__iter__, /*tp_iter*/
  __pyx_pw_7rocksdb_8_rocksdb_18WriteBatchIterator_5__next__, /*tp_iternext*/
  __pyx_methods_7rocksdb_8_rocksdb_WriteBatchIterator, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_7rocksdb_8_rocksdb_18WriteBatchIterator_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7rocksdb_8_rocksdb_WriteBatchIterator, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_WriteBatch(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_7rocksdb_8_rocksdb_10WriteBatch_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7rocksdb_8_rocksdb_WriteBatch(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_7rocksdb_8_rocksdb_10WriteBatch_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_7rocksdb_8_rocksdb_WriteBatch[] = {
  {"put", (PyCFunction)__pyx_pw_7rocksdb_8_rocksdb_10WriteBatch_5put, METH_VARARGS|METH_KEYWORDS, 0},
  {"merge", (PyCFunction)__pyx_pw_7rocksdb_8_rocksdb_10WriteBatch_7merge, METH_VARARGS|METH_KEYWORDS, 0},
  {"delete", (PyCFunction)__pyx_pw_7rocksdb_8_rocksdb_10WriteBatch_9delete, METH_O, 0},
  {"clear", (PyCFunction)__pyx_pw_7rocksdb_8_rocksdb_10WriteBatch_11clear, METH_NOARGS, 0},
  {"data", (PyCFunction)__pyx_pw_7rocksdb_8_rocksdb_10WriteBatch_13data, METH_NOARGS, 0},
  {"count", (PyCFunction)__pyx_pw_7rocksdb_8_rocksdb_10WriteBatch_15count, METH_NOARGS, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7rocksdb_8_rocksdb_WriteBatch = {
  PyVarObject_HEAD_INIT(0, 0)
  "rocksdb._rocksdb.WriteBatch", /*tp_name*/
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_WriteBatch), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7rocksdb_8_rocksdb_WriteBatch, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_7rocksdb_8_rocksdb_10WriteBatch_17__iter__, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7rocksdb_8_rocksdb_WriteBatch, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7rocksdb_8_rocksdb_WriteBatch, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_7rocksdb_8_rocksdb_DB __pyx_vtable_7rocksdb_8_rocksdb_DB;

static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_DB(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7rocksdb_8_rocksdb_DB *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7rocksdb_8_rocksdb_DB *)o);
  p->__pyx_vtab = __pyx_vtabptr_7rocksdb_8_rocksdb_DB;
  p->opts = ((struct __pyx_obj_7rocksdb_8_rocksdb_Options *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_7rocksdb_8_rocksdb_2DB_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7rocksdb_8_rocksdb_DB(PyObject *o) {
  struct __pyx_obj_7rocksdb_8_rocksdb_DB *p = (struct __pyx_obj_7rocksdb_8_rocksdb_DB *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_7rocksdb_8_rocksdb_2DB_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->opts);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_7rocksdb_8_rocksdb_DB(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7rocksdb_8_rocksdb_DB *p = (struct __pyx_obj_7rocksdb_8_rocksdb_DB *)o;
  if (p->opts) {
    e = (*v)(((PyObject*)p->opts), a); if (e) return e;
  }
  return 0;
}

static PyObject *__pyx_getprop_7rocksdb_8_rocksdb_2DB_options(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7rocksdb_8_rocksdb_2DB_7options_1__get__(o);
}

static PyMethodDef __pyx_methods_7rocksdb_8_rocksdb_DB[] = {
  {"put", (PyCFunction)__pyx_pw_7rocksdb_8_rocksdb_2DB_5put, METH_VARARGS|METH_KEYWORDS, 0},
  {"delete", (PyCFunction)__pyx_pw_7rocksdb_8_rocksdb_2DB_7delete, METH_VARARGS|METH_KEYWORDS, 0},
  {"merge", (PyCFunction)__pyx_pw_7rocksdb_8_rocksdb_2DB_9merge, METH_VARARGS|METH_KEYWORDS, 0},
  {"write", (PyCFunction)__pyx_pw_7rocksdb_8_rocksdb_2DB_11write, METH_VARARGS|METH_KEYWORDS, 0},
  {"get", (PyCFunction)__pyx_pw_7rocksdb_8_rocksdb_2DB_13get, METH_VARARGS|METH_KEYWORDS, 0},
  {"multi_get", (PyCFunction)__pyx_pw_7rocksdb_8_rocksdb_2DB_15multi_get, METH_VARARGS|METH_KEYWORDS, 0},
  {"key_may_exist", (PyCFunction)__pyx_pw_7rocksdb_8_rocksdb_2DB_17key_may_exist, METH_VARARGS|METH_KEYWORDS, 0},
  {"iterkeys", (PyCFunction)__pyx_pw_7rocksdb_8_rocksdb_2DB_19iterkeys, METH_VARARGS|METH_KEYWORDS, 0},
  {"itervalues", (PyCFunction)__pyx_pw_7rocksdb_8_rocksdb_2DB_21itervalues, METH_VARARGS|METH_KEYWORDS, 0},
  {"iteritems", (PyCFunction)__pyx_pw_7rocksdb_8_rocksdb_2DB_23iteritems, METH_VARARGS|METH_KEYWORDS, 0},
  {"snapshot", (PyCFunction)__pyx_pw_7rocksdb_8_rocksdb_2DB_25snapshot, METH_NOARGS, 0},
  {"get_property", (PyCFunction)__pyx_pw_7rocksdb_8_rocksdb_2DB_27get_property, METH_O, 0},
  {"get_live_files_metadata", (PyCFunction)__pyx_pw_7rocksdb_8_rocksdb_2DB_29get_live_files_metadata, METH_NOARGS, 0},
  {"compact_range", (PyCFunction)__pyx_pw_7rocksdb_8_rocksdb_2DB_31compact_range, METH_VARARGS|METH_KEYWORDS, 0},
  {"__parse_read_opts", (PyCFunction)__pyx_pw_7rocksdb_8_rocksdb_2DB_33__parse_read_opts, METH_VARARGS|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7rocksdb_8_rocksdb_DB[] = {
  {(char *)"options", __pyx_getprop_7rocksdb_8_rocksdb_2DB_options, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7rocksdb_8_rocksdb_DB = {
  PyVarObject_HEAD_INIT(0, 0)
  "rocksdb._rocksdb.DB", /*tp_name*/
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_DB), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7rocksdb_8_rocksdb_DB, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7rocksdb_8_rocksdb_DB, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7rocksdb_8_rocksdb_DB, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7rocksdb_8_rocksdb_DB, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7rocksdb_8_rocksdb_DB, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_7rocksdb_8_rocksdb_BackupEngine(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_7rocksdb_8_rocksdb_12BackupEngine_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7rocksdb_8_rocksdb_BackupEngine(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_7rocksdb_8_rocksdb_12BackupEngine_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_7rocksdb_8_rocksdb_BackupEngine[] = {
  {"create_backup", (PyCFunction)__pyx_pw_7rocksdb_8_rocksdb_12BackupEngine_5create_backup, METH_VARARGS|METH_KEYWORDS, 0},
  {"restore_backup", (PyCFunction)__pyx_pw_7rocksdb_8_rocksdb_12BackupEngine_7restore_backup, METH_VARARGS|METH_KEYWORDS, 0},
  {"restore_latest_backup", (PyCFunction)__pyx_pw_7rocksdb_8_rocksdb_12BackupEngine_9restore_latest_backup, METH_VARARGS|METH_KEYWORDS, 0},
  {"stop_backup", (PyCFunction)__pyx_pw_7rocksdb_8_rocksdb_12BackupEngine_11stop_backup, METH_NOARGS, 0},
  {"purge_old_backups", (PyCFunction)__pyx_pw_7rocksdb_8_rocksdb_12BackupEngine_13purge_old_backups, METH_O, 0},
  {"delete_backup", (PyCFunction)__pyx_pw_7rocksdb_8_rocksdb_12BackupEngine_15delete_backup, METH_O, 0},
  {"get_backup_info", (PyCFunction)__pyx_pw_7rocksdb_8_rocksdb_12BackupEngine_17get_backup_info, METH_NOARGS, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7rocksdb_8_rocksdb_BackupEngine = {
  PyVarObject_HEAD_INIT(0, 0)
  "rocksdb._rocksdb.BackupEngine", /*tp_name*/
  sizeof(struct __pyx_obj_7rocksdb_8_rocksdb_BackupEngine), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7rocksdb_8_rocksdb_BackupEngine, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7rocksdb_8_rocksdb_BackupEngine, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7rocksdb_8_rocksdb_BackupEngine, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    "_rocksdb",
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_AssociativeMergeOperator, __pyx_k_AssociativeMergeOperator, sizeof(__pyx_k_AssociativeMergeOperator), 0, 0, 1, 1},
  {&__pyx_n_s_BaseException, __pyx_k_BaseException, sizeof(__pyx_k_BaseException), 0, 0, 1, 1},
  {&__pyx_n_s_BloomFilterPolicy, __pyx_k_BloomFilterPolicy, sizeof(__pyx_k_BloomFilterPolicy), 0, 0, 1, 1},
  {&__pyx_n_s_BytewiseComparator, __pyx_k_BytewiseComparator, sizeof(__pyx_k_BytewiseComparator), 0, 0, 1, 1},
  {&__pyx_kp_s_Cannot_set_filter_policy_s, __pyx_k_Cannot_set_filter_policy_s, sizeof(__pyx_k_Cannot_set_filter_policy_s), 0, 0, 1, 0},
  {&__pyx_kp_s_Cannot_set_s_as_comparator, __pyx_k_Cannot_set_s_as_comparator, sizeof(__pyx_k_Cannot_set_s_as_comparator), 0, 0, 1, 0},
  {&__pyx_n_s_Comparator, __pyx_k_Comparator, sizeof(__pyx_k_Comparator), 0, 0, 1, 1},
  {&__pyx_n_s_Corruption, __pyx_k_Corruption, sizeof(__pyx_k_Corruption), 0, 0, 1, 1},
  {&__pyx_n_s_Delete, __pyx_k_Delete, sizeof(__pyx_k_Delete), 0, 0, 1, 1},
  {&__pyx_n_s_FilterPolicy, __pyx_k_FilterPolicy, sizeof(__pyx_k_FilterPolicy), 0, 0, 1, 1},
  {&__pyx_n_s_IAssociativeMergeOperator, __pyx_k_IAssociativeMergeOperator, sizeof(__pyx_k_IAssociativeMergeOperator), 0, 0, 1, 1},
  {&__pyx_n_s_IComparator, __pyx_k_IComparator, sizeof(__pyx_k_IComparator), 0, 0, 1, 1},
  {&__pyx_n_s_IFilterPolicy, __pyx_k_IFilterPolicy, sizeof(__pyx_k_IFilterPolicy), 0, 0, 1, 1},
  {&__pyx_n_s_IMergeOperator, __pyx_k_IMergeOperator, sizeof(__pyx_k_IMergeOperator), 0, 0, 1, 1},
  {&__pyx_n_s_ISliceTransform, __pyx_k_ISliceTransform, sizeof(__pyx_k_ISliceTransform), 0, 0, 1, 1},
  {&__pyx_n_s_Incomplete, __pyx_k_Incomplete, sizeof(__pyx_k_Incomplete), 0, 0, 1, 1},
  {&__pyx_n_s_InvalidArgument, __pyx_k_InvalidArgument, sizeof(__pyx_k_InvalidArgument), 0, 0, 1, 1},
  {&__pyx_kp_s_Invalid_read_tier, __pyx_k_Invalid_read_tier, sizeof(__pyx_k_Invalid_read_tier), 0, 0, 1, 0},
  {&__pyx_n_s_LRUCache, __pyx_k_LRUCache, sizeof(__pyx_k_LRUCache), 0, 0, 1, 1},
  {&__pyx_n_s_Merge, __pyx_k_Merge, sizeof(__pyx_k_Merge), 0, 0, 1, 1},
  {&__pyx_n_s_MergeInProgress, __pyx_k_MergeInProgress, sizeof(__pyx_k_MergeInProgress), 0, 0, 1, 1},
  {&__pyx_n_s_MergeOperator, __pyx_k_MergeOperator, sizeof(__pyx_k_MergeOperator), 0, 0, 1, 1},
  {&__pyx_n_s_NotFound, __pyx_k_NotFound, sizeof(__pyx_k_NotFound), 0, 0, 1, 1},
  {&__pyx_n_s_NotSupported, __pyx_k_NotSupported, sizeof(__pyx_k_NotSupported), 0, 0, 1, 1},
  {&__pyx_kp_s_Options_object_is_already_used_b, __pyx_k_Options_object_is_already_used_b, sizeof(__pyx_k_Options_object_is_already_used_b), 0, 0, 1, 0},
  {&__pyx_n_s_Put, __pyx_k_Put, sizeof(__pyx_k_Put), 0, 0, 1, 1},
  {&__pyx_n_s_RocksIOError, __pyx_k_RocksIOError, sizeof(__pyx_k_RocksIOError), 0, 0, 1, 1},
  {&__pyx_n_s_SliceTransform, __pyx_k_SliceTransform, sizeof(__pyx_k_SliceTransform), 0, 0, 1, 1},
  {&__pyx_n_s_StopIteration, __pyx_k_StopIteration, sizeof(__pyx_k_StopIteration), 0, 0, 1, 1},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_kp_s_Unknonw_type_s, __pyx_k_Unknonw_type_s, sizeof(__pyx_k_Unknonw_type_s), 0, 0, 1, 0},
  {&__pyx_kp_s_Unknown_checksum_s, __pyx_k_Unknown_checksum_s, sizeof(__pyx_k_Unknown_checksum_s), 0, 0, 1, 0},
  {&__pyx_kp_s_Unknown_compaction_pri_s, __pyx_k_Unknown_compaction_pri_s, sizeof(__pyx_k_Unknown_compaction_pri_s), 0, 0, 1, 0},
  {&__pyx_kp_s_Unknown_compaction_style, __pyx_k_Unknown_compaction_style, sizeof(__pyx_k_Unknown_compaction_style), 0, 0, 1, 0},
  {&__pyx_kp_s_Unknown_compaction_style_2, __pyx_k_Unknown_compaction_style_2, sizeof(__pyx_k_Unknown_compaction_style_2), 0, 0, 1, 0},
  {&__pyx_kp_s_Unknown_compression_s, __pyx_k_Unknown_compression_s, sizeof(__pyx_k_Unknown_compression_s), 0, 0, 1, 0},
  {&__pyx_kp_s_Unknown_encoding_type_s, __pyx_k_Unknown_encoding_type_s, sizeof(__pyx_k_Unknown_encoding_type_s), 0, 0, 1, 0},
  {&__pyx_kp_s_Unknown_error_s, __pyx_k_Unknown_error_s, sizeof(__pyx_k_Unknown_error_s), 0, 0, 1, 0},
  {&__pyx_kp_s_Unknown_index_type_s, __pyx_k_Unknown_index_type_s, sizeof(__pyx_k_Unknown_index_type_s), 0, 0, 1, 0},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_kp_s_Wrong_type_for_path_s, __pyx_k_Wrong_type_for_path_s, sizeof(__pyx_k_Wrong_type_for_path_s), 0, 0, 1, 0},
  {&__pyx_n_s_a, __pyx_k_a, sizeof(__pyx_k_a), 0, 0, 1, 1},
  {&__pyx_n_s_all, __pyx_k_all, sizeof(__pyx_k_all), 0, 0, 1, 1},
  {&__pyx_n_s_ascii, __pyx_k_ascii, sizeof(__pyx_k_ascii), 0, 0, 1, 1},
  {&__pyx_n_s_b, __pyx_k_b, sizeof(__pyx_k_b), 0, 0, 1, 1},
  {&__pyx_n_s_backup_dir, __pyx_k_backup_dir, sizeof(__pyx_k_backup_dir), 0, 0, 1, 1},
  {&__pyx_n_s_backup_id, __pyx_k_backup_id, sizeof(__pyx_k_backup_id), 0, 0, 1, 1},
  {&__pyx_n_s_batch, __pyx_k_batch, sizeof(__pyx_k_batch), 0, 0, 1, 1},
  {&__pyx_n_s_begin, __pyx_k_begin, sizeof(__pyx_k_begin), 0, 0, 1, 1},
  {&__pyx_n_s_binary_search, __pyx_k_binary_search, sizeof(__pyx_k_binary_search), 0, 0, 1, 1},
  {&__pyx_n_s_bits_per_key, __pyx_k_bits_per_key, sizeof(__pyx_k_bits_per_key), 0, 0, 1, 1},
  {&__pyx_n_s_block_cache, __pyx_k_block_cache, sizeof(__pyx_k_block_cache), 0, 0, 1, 1},
  {&__pyx_n_s_block_cache_compressed, __pyx_k_block_cache_compressed, sizeof(__pyx_k_block_cache_compressed), 0, 0, 1, 1},
  {&__pyx_n_s_block_restart_interval, __pyx_k_block_restart_interval, sizeof(__pyx_k_block_restart_interval), 0, 0, 1, 1},
  {&__pyx_n_s_block_size, __pyx_k_block_size, sizeof(__pyx_k_block_size), 0, 0, 1, 1},
  {&__pyx_n_s_block_size_deviation, __pyx_k_block_size_deviation, sizeof(__pyx_k_block_size_deviation), 0, 0, 1, 1},
  {&__pyx_n_s_bloom_bits_per_key, __pyx_k_bloom_bits_per_key, sizeof(__pyx_k_bloom_bits_per_key), 0, 0, 1, 1},
  {&__pyx_n_s_bottommost_level_compaction, __pyx_k_bottommost_level_compaction, sizeof(__pyx_k_bottommost_level_compaction), 0, 0, 1, 1},
  {&__pyx_kp_s_bottommost_level_compaction_is_n, __pyx_k_bottommost_level_compaction_is_n, sizeof(__pyx_k_bottommost_level_compaction_is_n), 0, 0, 1, 0},
  {&__pyx_n_s_bucket_count, __pyx_k_bucket_count, sizeof(__pyx_k_bucket_count), 0, 0, 1, 1},
  {&__pyx_n_s_by_compensated_size, __pyx_k_by_compensated_size, sizeof(__pyx_k_by_compensated_size), 0, 0, 1, 1},
  {&__pyx_n_u_by_compensated_size, __pyx_k_by_compensated_size, sizeof(__pyx_k_by_compensated_size), 0, 1, 0, 1},
  {&__pyx_n_s_bzip2_compression, __pyx_k_bzip2_compression, sizeof(__pyx_k_bzip2_compression), 0, 0, 1, 1},
  {&__pyx_n_u_bzip2_compression, __pyx_k_bzip2_compression, sizeof(__pyx_k_bzip2_compression), 0, 1, 0, 1},
  {&__pyx_n_s_cache, __pyx_k_cache, sizeof(__pyx_k_cache), 0, 0, 1, 1},
  {&__pyx_n_s_capacity, __pyx_k_capacity, sizeof(__pyx_k_capacity), 0, 0, 1, 1},
  {&__pyx_n_s_change_level, __pyx_k_change_level, sizeof(__pyx_k_change_level), 0, 0, 1, 1},
  {&__pyx_n_s_checksum, __pyx_k_checksum, sizeof(__pyx_k_checksum), 0, 0, 1, 1},
  {&__pyx_n_s_compare, __pyx_k_compare, sizeof(__pyx_k_compare), 0, 0, 1, 1},
  {&__pyx_n_s_compression_size_percent, __pyx_k_compression_size_percent, sizeof(__pyx_k_compression_size_percent), 0, 0, 1, 1},
  {&__pyx_n_s_count, __pyx_k_count, sizeof(__pyx_k_count), 0, 0, 1, 1},
  {&__pyx_n_s_crc32, __pyx_k_crc32, sizeof(__pyx_k_crc32), 0, 0, 1, 1},
  {&__pyx_n_s_create_filter, __pyx_k_create_filter, sizeof(__pyx_k_create_filter), 0, 0, 1, 1},
  {&__pyx_n_s_data, __pyx_k_data, sizeof(__pyx_k_data), 0, 0, 1, 1},
  {&__pyx_n_s_db, __pyx_k_db, sizeof(__pyx_k_db), 0, 0, 1, 1},
  {&__pyx_n_s_db_dir, __pyx_k_db_dir, sizeof(__pyx_k_db_dir), 0, 0, 1, 1},
  {&__pyx_n_s_db_name, __pyx_k_db_name, sizeof(__pyx_k_db_name), 0, 0, 1, 1},
  {&__pyx_n_s_db_path, __pyx_k_db_path, sizeof(__pyx_k_db_path), 0, 0, 1, 1},
  {&__pyx_n_s_disable_compression, __pyx_k_disable_compression, sizeof(__pyx_k_disable_compression), 0, 0, 1, 1},
  {&__pyx_n_u_disable_compression, __pyx_k_disable_compression, sizeof(__pyx_k_disable_compression), 0, 1, 0, 1},
  {&__pyx_n_s_disable_wal, __pyx_k_disable_wal, sizeof(__pyx_k_disable_wal), 0, 0, 1, 1},
  {&__pyx_n_s_encode, __pyx_k_encode, sizeof(__pyx_k_encode), 0, 0, 1, 1},
  {&__pyx_n_s_encoding_type, __pyx_k_encoding_type, sizeof(__pyx_k_encoding_type), 0, 0, 1, 1},
  {&__pyx_n_s_end, __pyx_k_end, sizeof(__pyx_k_end), 0, 0, 1, 1},
  {&__pyx_n_s_errors, __pyx_k_errors, sizeof(__pyx_k_errors), 0, 0, 1, 1},
  {&__pyx_n_s_fetch, __pyx_k_fetch, sizeof(__pyx_k_fetch), 0, 0, 1, 1},
  {&__pyx_n_s_fifo, __pyx_k_fifo, sizeof(__pyx_k_fifo), 0, 0, 1, 1},
  {&__pyx_n_s_fill_cache, __pyx_k_fill_cache, sizeof(__pyx_k_fill_cache), 0, 0, 1, 1},
  {&__pyx_n_s_filter, __pyx_k_filter, sizeof(__pyx_k_filter), 0, 0, 1, 1},
  {&__pyx_n_s_filter_policy, __pyx_k_filter_policy, sizeof(__pyx_k_filter_policy), 0, 0, 1, 1},
  {&__pyx_n_s_flush_before_backup, __pyx_k_flush_before_backup, sizeof(__pyx_k_flush_before_backup), 0, 0, 1, 1},
  {&__pyx_n_s_force, __pyx_k_force, sizeof(__pyx_k_force), 0, 0, 1, 1},
  {&__pyx_n_s_format_exc, __pyx_k_format_exc, sizeof(__pyx_k_format_exc), 0, 0, 1, 1},
  {&__pyx_n_s_full_merge, __pyx_k_full_merge, sizeof(__pyx_k_full_merge), 0, 0, 1, 1},
  {&__pyx_n_s_full_scan_mode, __pyx_k_full_scan_mode, sizeof(__pyx_k_full_scan_mode), 0, 0, 1, 1},
  {&__pyx_n_s_get, __pyx_k_get, sizeof(__pyx_k_get), 0, 0, 1, 1},
  {&__pyx_n_s_getfilesystemencoding, __pyx_k_getfilesystemencoding, sizeof(__pyx_k_getfilesystemencoding), 0, 0, 1, 1},
  {&__pyx_n_s_hash_index_allow_collision, __pyx_k_hash_index_allow_collision, sizeof(__pyx_k_hash_index_allow_collision), 0, 0, 1, 1},
  {&__pyx_n_s_hash_search, __pyx_k_hash_search, sizeof(__pyx_k_hash_search), 0, 0, 1, 1},
  {&__pyx_n_s_hash_table_ratio, __pyx_k_hash_table_ratio, sizeof(__pyx_k_hash_table_ratio), 0, 0, 1, 1},
  {&__pyx_kp_s_home_tumh_python_rocksdb_rocksd, __pyx_k_home_tumh_python_rocksdb_rocksd, sizeof(__pyx_k_home_tumh_python_rocksdb_rocksd), 0, 0, 1, 0},
  {&__pyx_n_s_huge_page_tlb_size, __pyx_k_huge_page_tlb_size, sizeof(__pyx_k_huge_page_tlb_size), 0, 0, 1, 1},
  {&__pyx_n_s_if_compaction_filter, __pyx_k_if_compaction_filter, sizeof(__pyx_k_if_compaction_filter), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_in_domain, __pyx_k_in_domain, sizeof(__pyx_k_in_domain), 0, 0, 1, 1},
  {&__pyx_n_s_in_range, __pyx_k_in_range, sizeof(__pyx_k_in_range), 0, 0, 1, 1},
  {&__pyx_n_s_index_sparseness, __pyx_k_index_sparseness, sizeof(__pyx_k_index_sparseness), 0, 0, 1, 1},
  {&__pyx_n_s_index_type, __pyx_k_index_type, sizeof(__pyx_k_index_type), 0, 0, 1, 1},
  {&__pyx_n_s_interfaces, __pyx_k_interfaces, sizeof(__pyx_k_interfaces), 0, 0, 1, 1},
  {&__pyx_n_s_it, __pyx_k_it, sizeof(__pyx_k_it), 0, 0, 1, 1},
  {&__pyx_n_s_items, __pyx_k_items, sizeof(__pyx_k_items), 0, 0, 1, 1},
  {&__pyx_n_s_key, __pyx_k_key, sizeof(__pyx_k_key), 0, 0, 1, 1},
  {&__pyx_n_s_key_may_match, __pyx_k_key_may_match, sizeof(__pyx_k_key_may_match), 0, 0, 1, 1},
  {&__pyx_n_s_keys, __pyx_k_keys, sizeof(__pyx_k_keys), 0, 0, 1, 1},
  {&__pyx_n_s_largest_seqno, __pyx_k_largest_seqno, sizeof(__pyx_k_largest_seqno), 0, 0, 1, 1},
  {&__pyx_n_s_largestkey, __pyx_k_largestkey, sizeof(__pyx_k_largestkey), 0, 0, 1, 1},
  {&__pyx_n_s_level, __pyx_k_level, sizeof(__pyx_k_level), 0, 0, 1, 1},
  {&__pyx_n_s_lz4_compression, __pyx_k_lz4_compression, sizeof(__pyx_k_lz4_compression), 0, 0, 1, 1},
  {&__pyx_n_u_lz4_compression, __pyx_k_lz4_compression, sizeof(__pyx_k_lz4_compression), 0, 1, 0, 1},
  {&__pyx_n_s_lz4hc_compression, __pyx_k_lz4hc_compression, sizeof(__pyx_k_lz4hc_compression), 0, 0, 1, 1},
  {&__pyx_n_u_lz4hc_compression, __pyx_k_lz4hc_compression, sizeof(__pyx_k_lz4hc_compression), 0, 1, 0, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_max_dict_bytes, __pyx_k_max_dict_bytes, sizeof(__pyx_k_max_dict_bytes), 0, 0, 1, 1},
  {&__pyx_n_s_max_merge_width, __pyx_k_max_merge_width, sizeof(__pyx_k_max_merge_width), 0, 0, 1, 1},
  {&__pyx_n_s_max_size_amplification_percent, __pyx_k_max_size_amplification_percent, sizeof(__pyx_k_max_size_amplification_percent), 0, 0, 1, 1},
  {&__pyx_n_s_merge, __pyx_k_merge, sizeof(__pyx_k_merge), 0, 0, 1, 1},
  {&__pyx_n_s_min_merge_width, __pyx_k_min_merge_width, sizeof(__pyx_k_min_merge_width), 0, 0, 1, 1},
  {&__pyx_n_s_min_overlapping_ratio, __pyx_k_min_overlapping_ratio, sizeof(__pyx_k_min_overlapping_ratio), 0, 0, 1, 1},
  {&__pyx_n_u_min_overlapping_ratio, __pyx_k_min_overlapping_ratio, sizeof(__pyx_k_min_overlapping_ratio), 0, 1, 0, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_no_block_cache, __pyx_k_no_block_cache, sizeof(__pyx_k_no_block_cache), 0, 0, 1, 1},
  {&__pyx_n_s_no_compression, __pyx_k_no_compression, sizeof(__pyx_k_no_compression), 0, 0, 1, 1},
  {&__pyx_n_u_no_compression, __pyx_k_no_compression, sizeof(__pyx_k_no_compression), 0, 1, 0, 1},
  {&__pyx_n_s_none, __pyx_k_none, sizeof(__pyx_k_none), 0, 0, 1, 1},
  {&__pyx_n_s_ob, __pyx_k_ob, sizeof(__pyx_k_ob), 0, 0, 1, 1},
  {&__pyx_kp_s_offset_i_size_i_is_bigger_than_s, __pyx_k_offset_i_size_i_is_bigger_than_s, sizeof(__pyx_k_offset_i_size_i_is_bigger_than_s), 0, 0, 1, 0},
  {&__pyx_n_s_oldest_largest_seq_first, __pyx_k_oldest_largest_seq_first, sizeof(__pyx_k_oldest_largest_seq_first), 0, 0, 1, 1},
  {&__pyx_n_u_oldest_largest_seq_first, __pyx_k_oldest_largest_seq_first, sizeof(__pyx_k_oldest_largest_seq_first), 0, 1, 0, 1},
  {&__pyx_n_s_oldest_smallest_seq_first, __pyx_k_oldest_smallest_seq_first, sizeof(__pyx_k_oldest_smallest_seq_first), 0, 0, 1, 1},
  {&__pyx_n_u_oldest_smallest_seq_first, __pyx_k_oldest_smallest_seq_first, sizeof(__pyx_k_oldest_smallest_seq_first), 0, 1, 0, 1},
  {&__pyx_n_s_opts, __pyx_k_opts, sizeof(__pyx_k_opts), 0, 0, 1, 1},
  {&__pyx_n_s_parse_read_opts, __pyx_k_parse_read_opts, sizeof(__pyx_k_parse_read_opts), 0, 0, 1, 1},
  {&__pyx_n_s_partial_merge, __pyx_k_partial_merge, sizeof(__pyx_k_partial_merge), 0, 0, 1, 1},
  {&__pyx_n_s_plain, __pyx_k_plain, sizeof(__pyx_k_plain), 0, 0, 1, 1},
  {&__pyx_n_s_prefix, __pyx_k_prefix, sizeof(__pyx_k_prefix), 0, 0, 1, 1},
  {&__pyx_n_s_prefix_extractor, __pyx_k_prefix_extractor, sizeof(__pyx_k_prefix_extractor), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_read_only, __pyx_k_read_only, sizeof(__pyx_k_read_only), 0, 0, 1, 1},
  {&__pyx_n_s_read_tier, __pyx_k_read_tier, sizeof(__pyx_k_read_tier), 0, 0, 1, 1},
  {&__pyx_n_s_repair_db, __pyx_k_repair_db, sizeof(__pyx_k_repair_db), 0, 0, 1, 1},
  {&__pyx_n_s_rocksdb__rocksdb, __pyx_k_rocksdb__rocksdb, sizeof(__pyx_k_rocksdb__rocksdb), 0, 0, 1, 1},
  {&__pyx_kp_s_row_cache_must_be_a_Cache_object, __pyx_k_row_cache_must_be_a_Cache_object, sizeof(__pyx_k_row_cache_must_be_a_Cache_object), 0, 0, 1, 0},
  {&__pyx_kp_s_s_is_not_of_this_types_s, __pyx_k_s_is_not_of_this_types_s, sizeof(__pyx_k_s_is_not_of_this_types_s), 0, 0, 1, 0},
  {&__pyx_kp_s_s_is_not_of_type_s, __pyx_k_s_is_not_of_type_s, sizeof(__pyx_k_s_is_not_of_type_s), 0, 0, 1, 0},
  {&__pyx_n_s_seek, __pyx_k_seek, sizeof(__pyx_k_seek), 0, 0, 1, 1},
  {&__pyx_n_s_seek_for_prev, __pyx_k_seek_for_prev, sizeof(__pyx_k_seek_for_prev), 0, 0, 1, 1},
  {&__pyx_n_s_seek_to_first, __pyx_k_seek_to_first, sizeof(__pyx_k_seek_to_first), 0, 0, 1, 1},
  {&__pyx_n_s_seek_to_last, __pyx_k_seek_to_last, sizeof(__pyx_k_seek_to_last), 0, 0, 1, 1},
  {&__pyx_n_s_shard_bits, __pyx_k_shard_bits, sizeof(__pyx_k_shard_bits), 0, 0, 1, 1},
  {&__pyx_n_s_similar_size, __pyx_k_similar_size, sizeof(__pyx_k_similar_size), 0, 0, 1, 1},
  {&__pyx_n_s_size, __pyx_k_size, sizeof(__pyx_k_size), 0, 0, 1, 1},
  {&__pyx_n_s_size_ratio, __pyx_k_size_ratio, sizeof(__pyx_k_size_ratio), 0, 0, 1, 1},
  {&__pyx_n_s_skip, __pyx_k_skip, sizeof(__pyx_k_skip), 0, 0, 1, 1},
  {&__pyx_n_s_skiplist_branching_factor, __pyx_k_skiplist_branching_factor, sizeof(__pyx_k_skiplist_branching_factor), 0, 0, 1, 1},
  {&__pyx_n_s_skiplist_height, __pyx_k_skiplist_height, sizeof(__pyx_k_skiplist_height), 0, 0, 1, 1},
  {&__pyx_n_s_smallest_seqno, __pyx_k_smallest_seqno, sizeof(__pyx_k_smallest_seqno), 0, 0, 1, 1},
  {&__pyx_n_s_smallestkey, __pyx_k_smallestkey, sizeof(__pyx_k_smallestkey), 0, 0, 1, 1},
  {&__pyx_n_s_snappy_compression, __pyx_k_snappy_compression, sizeof(__pyx_k_snappy_compression), 0, 0, 1, 1},
  {&__pyx_n_u_snappy_compression, __pyx_k_snappy_compression, sizeof(__pyx_k_snappy_compression), 0, 1, 0, 1},
  {&__pyx_n_s_snapshot, __pyx_k_snapshot, sizeof(__pyx_k_snapshot), 0, 0, 1, 1},
  {&__pyx_n_s_st, __pyx_k_st, sizeof(__pyx_k_st), 0, 0, 1, 1},
  {&__pyx_n_s_staticmethod, __pyx_k_staticmethod, sizeof(__pyx_k_staticmethod), 0, 0, 1, 1},
  {&__pyx_n_s_stop_style, __pyx_k_stop_style, sizeof(__pyx_k_stop_style), 0, 0, 1, 1},
  {&__pyx_n_s_store_index_in_file, __pyx_k_store_index_in_file, sizeof(__pyx_k_store_index_in_file), 0, 0, 1, 1},
  {&__pyx_n_s_strategy, __pyx_k_strategy, sizeof(__pyx_k_strategy), 0, 0, 1, 1},
  {&__pyx_n_s_sync, __pyx_k_sync, sizeof(__pyx_k_sync), 0, 0, 1, 1},
  {&__pyx_n_s_sys, __pyx_k_sys, sizeof(__pyx_k_sys), 0, 0, 1, 1},
  {&__pyx_n_s_target_level, __pyx_k_target_level, sizeof(__pyx_k_target_level), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_timestamp, __pyx_k_timestamp, sizeof(__pyx_k_timestamp), 0, 0, 1, 1},
  {&__pyx_n_s_total_size, __pyx_k_total_size, sizeof(__pyx_k_total_size), 0, 0, 1, 1},
  {&__pyx_n_s_traceback, __pyx_k_traceback, sizeof(__pyx_k_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_transform, __pyx_k_transform, sizeof(__pyx_k_transform), 0, 0, 1, 1},
  {&__pyx_n_s_universal, __pyx_k_universal, sizeof(__pyx_k_universal), 0, 0, 1, 1},
  {&__pyx_n_s_user_key_len, __pyx_k_user_key_len, sizeof(__pyx_k_user_key_len), 0, 0, 1, 1},
  {&__pyx_n_s_value, __pyx_k_value, sizeof(__pyx_k_value), 0, 0, 1, 1},
  {&__pyx_n_s_verify_checksums, __pyx_k_verify_checksums, sizeof(__pyx_k_verify_checksums), 0, 0, 1, 1},
  {&__pyx_n_s_wal_dir, __pyx_k_wal_dir, sizeof(__pyx_k_wal_dir), 0, 0, 1, 1},
  {&__pyx_n_s_whole_key_filtering, __pyx_k_whole_key_filtering, sizeof(__pyx_k_whole_key_filtering), 0, 0, 1, 1},
  {&__pyx_n_s_window_bits, __pyx_k_window_bits, sizeof(__pyx_k_window_bits), 0, 0, 1, 1},
  {&__pyx_n_s_xpress_compression, __pyx_k_xpress_compression, sizeof(__pyx_k_xpress_compression), 0, 0, 1, 1},
  {&__pyx_n_u_xpress_compression, __pyx_k_xpress_compression, sizeof(__pyx_k_xpress_compression), 0, 1, 0, 1},
  {&__pyx_n_s_xxhash, __pyx_k_xxhash, sizeof(__pyx_k_xxhash), 0, 0, 1, 1},
  {&__pyx_n_s_zlib_compression, __pyx_k_zlib_compression, sizeof(__pyx_k_zlib_compression), 0, 0, 1, 1},
  {&__pyx_n_u_zlib_compression, __pyx_k_zlib_compression, sizeof(__pyx_k_zlib_compression), 0, 1, 0, 1},
  {&__pyx_n_s_zstd_compression, __pyx_k_zstd_compression, sizeof(__pyx_k_zstd_compression), 0, 0, 1, 1},
  {&__pyx_n_u_zstd_compression, __pyx_k_zstd_compression, sizeof(__pyx_k_zstd_compression), 0, 1, 0, 1},
  {&__pyx_n_s_zstdnotfinal_compression, __pyx_k_zstdnotfinal_compression, sizeof(__pyx_k_zstdnotfinal_compression), 0, 0, 1, 1},
  {&__pyx_n_u_zstdnotfinal_compression, __pyx_k_zstdnotfinal_compression, sizeof(__pyx_k_zstdnotfinal_compression), 0, 1, 0, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_staticmethod = __Pyx_GetBuiltinName(__pyx_n_s_staticmethod); if (!__pyx_builtin_staticmethod) __PYX_ERR(0, 1699, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(0, 116, __pyx_L1_error)
  __pyx_builtin_BaseException = __Pyx_GetBuiltinName(__pyx_n_s_BaseException); if (!__pyx_builtin_BaseException) __PYX_ERR(0, 195, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 253, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 591, __pyx_L1_error)
  __pyx_builtin_StopIteration = __Pyx_GetBuiltinName(__pyx_n_s_StopIteration); if (!__pyx_builtin_StopIteration) __PYX_ERR(0, 1390, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "rocksdb/_rocksdb.pyx":119
 * 
 * cdef object string_to_path(string path):
 *     fs_encoding = sys.getfilesystemencoding().encode('ascii')             # <<<<<<<<<<<<<<
 *     return PyUnicode_Decode(path.c_str(), path.size(), fs_encoding, "replace")
 * 
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_n_s_ascii); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "rocksdb/_rocksdb.pyx":1167
 *             if self.opts.compaction_style == kCompactionStyleNone:
 *                 return 'none'
 *             raise Exception("Unknown compaction_style")             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, str value):
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_Unknown_compaction_style); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 1167, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "rocksdb/_rocksdb.pyx":1179
 *                 self.opts.compaction_style = kCompactionStyleNone
 *             else:
 *                 raise Exception("Unknown compaction style")             # <<<<<<<<<<<<<<
 * 
 *     property compaction_options_universal:
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_s_Unknown_compaction_style_2); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 1179, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "rocksdb/_rocksdb.pyx":1199
 *                 ret_ob['stop_style'] = 'total_size'
 *             else:
 *                 raise Exception("Unknown compaction style")             # <<<<<<<<<<<<<<
 * 
 *             return ret_ob
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_s_Unknown_compaction_style_2); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 1199, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "rocksdb/_rocksdb.pyx":1228
 *                     uopts.stop_style = kCompactionStopStyleTotalSize
 *                 else:
 *                     raise Exception("Unknown compaction style")             # <<<<<<<<<<<<<<
 * 
 *     # Deprecate
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_s_Unknown_compaction_style_2); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(0, 1228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "rocksdb/_rocksdb.pyx":1315
 *                 self.opts.row_cache.reset()
 *             elif not isinstance(value, PyCache):
 *                 raise Exception("row_cache must be a Cache object")             # <<<<<<<<<<<<<<
 *             else:
 *                 self.py_row_cache = value
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_s_row_cache_must_be_a_Cache_object); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 1315, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "rocksdb/_rocksdb.pyx":1421
 * 
 *         if opts.in_use:
 *             raise Exception("Options object is already used by another DB")             # <<<<<<<<<<<<<<
 * 
 *         db_path = path_to_string(db_name)
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_s_Options_object_is_already_used_b); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(0, 1421, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "rocksdb/_rocksdb.pyx":1578
 *                     return (True, string_to_bytes(value))
 *                 else:
 *                     return (True, None)             # <<<<<<<<<<<<<<
 *             else:
 *                 return (False, None)
 */
  __pyx_tuple__8 = PyTuple_Pack(2, Py_True, Py_None); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(0, 1578, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "rocksdb/_rocksdb.pyx":1580
 *                     return (True, None)
 *             else:
 *                 return (False, None)             # <<<<<<<<<<<<<<
 *         else:
 *             with nogil:
 */
  __pyx_tuple__9 = PyTuple_Pack(2, Py_False, Py_None); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(0, 1580, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "rocksdb/_rocksdb.pyx":1676
 *             c_options.bottommost_level_compaction = options.blc_force
 *         else:
 *             raise ValueError("bottommost_level_compaction is not valid")             # <<<<<<<<<<<<<<
 * 
 *         cdef Status st
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_s_bottommost_level_compaction_is_n); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(0, 1676, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "rocksdb/_rocksdb.pyx":1721
 *             opts.read_tier = options.kBlockCacheTier
 *         else:
 *             raise ValueError("Invalid read_tier")             # <<<<<<<<<<<<<<
 * 
 *         return opts
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_s_Invalid_read_tier); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(0, 1721, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "rocksdb/_rocksdb.pyx":1700
 * 
 *     @staticmethod
 *     def __parse_read_opts(             # <<<<<<<<<<<<<<
 *         verify_checksums=False,
 *         fill_cache=True,
 */
  __pyx_tuple__12 = PyTuple_Pack(4, __pyx_n_s_verify_checksums, __pyx_n_s_fill_cache, __pyx_n_s_snapshot, __pyx_n_s_read_tier); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(0, 1700, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);
  __pyx_codeobj__13 = (PyObject*)__Pyx_PyCode_New(4, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__12, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_tumh_python_rocksdb_rocksd, __pyx_n_s_parse_read_opts, 1700, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__13)) __PYX_ERR(0, 1700, __pyx_L1_error)

  /* "rocksdb/_rocksdb.pyx":1730
 * 
 * 
 * def repair_db(db_name, Options opts):             # <<<<<<<<<<<<<<
 *     cdef Status st
 *     cdef string db_path
 */
  __pyx_tuple__14 = PyTuple_Pack(4, __pyx_n_s_db_name, __pyx_n_s_opts, __pyx_n_s_st, __pyx_n_s_db_path); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(0, 1730, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);
  __pyx_codeobj__15 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__14, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_tumh_python_rocksdb_rocksd, __pyx_n_s_repair_db, 1730, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__15)) __PYX_ERR(0, 1730, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  __pyx_umethod_PyDict_Type_items.type = (PyObject*)&PyDict_Type;
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_float_0_75 = PyFloat_FromDouble(0.75); if (unlikely(!__pyx_float_0_75)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4 = PyInt_FromLong(4); if (unlikely(!__pyx_int_4)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_10 = PyInt_FromLong(10); if (unlikely(!__pyx_int_10)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_50000 = PyInt_FromLong(50000L); if (unlikely(!__pyx_int_50000)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1000000 = PyInt_FromLong(1000000L); if (unlikely(!__pyx_int_1000000)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC init_rocksdb(void); /*proto*/
PyMODINIT_FUNC init_rocksdb(void)
#else
PyMODINIT_FUNC PyInit__rocksdb(void); /*proto*/
PyMODINIT_FUNC PyInit__rocksdb(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit__rocksdb(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("_rocksdb", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_rocksdb___rocksdb) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "rocksdb._rocksdb")) {
      if (unlikely(PyDict_SetItemString(modules, "rocksdb._rocksdb", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  __pyx_vtabptr_7rocksdb_8_rocksdb_PyComparator = &__pyx_vtable_7rocksdb_8_rocksdb_PyComparator;
  __pyx_vtable_7rocksdb_8_rocksdb_PyComparator.get_ob = (PyObject *(*)(struct __pyx_obj_7rocksdb_8_rocksdb_PyComparator *))__pyx_f_7rocksdb_8_rocksdb_12PyComparator_get_ob;
  __pyx_vtable_7rocksdb_8_rocksdb_PyComparator.get_comparator = (rocksdb::Comparator const *(*)(struct __pyx_obj_7rocksdb_8_rocksdb_PyComparator *))__pyx_f_7rocksdb_8_rocksdb_12PyComparator_get_comparator;
  __pyx_vtable_7rocksdb_8_rocksdb_PyComparator.set_info_log = (PyObject *(*)(struct __pyx_obj_7rocksdb_8_rocksdb_PyComparator *, std::shared_ptr<rocksdb::Logger> ))__pyx_f_7rocksdb_8_rocksdb_12PyComparator_set_info_log;
  if (PyType_Ready(&__pyx_type_7rocksdb_8_rocksdb_PyComparator) < 0) __PYX_ERR(0, 124, __pyx_L1_error)
  __pyx_type_7rocksdb_8_rocksdb_PyComparator.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_7rocksdb_8_rocksdb_PyComparator.tp_dict, __pyx_vtabptr_7rocksdb_8_rocksdb_PyComparator) < 0) __PYX_ERR(0, 124, __pyx_L1_error)
  __pyx_ptype_7rocksdb_8_rocksdb_PyComparator = &__pyx_type_7rocksdb_8_rocksdb_PyComparator;
  __pyx_vtabptr_7rocksdb_8_rocksdb_PyGenericComparator = &__pyx_vtable_7rocksdb_8_rocksdb_PyGenericComparator;
  __pyx_vtable_7rocksdb_8_rocksdb_PyGenericComparator.__pyx_base = *__pyx_vtabptr_7rocksdb_8_rocksdb_PyComparator;
  __pyx_vtable_7rocksdb_8_rocksdb_PyGenericComparator.__pyx_base.get_ob = (PyObject *(*)(struct __pyx_obj_7rocksdb_8_rocksdb_PyComparator *))__pyx_f_7rocksdb_8_rocksdb_19PyGenericComparator_get_ob;
  __pyx_vtable_7rocksdb_8_rocksdb_PyGenericComparator.__pyx_base.get_comparator = (rocksdb::Comparator const *(*)(struct __pyx_obj_7rocksdb_8_rocksdb_PyComparator *))__pyx_f_7rocksdb_8_rocksdb_19PyGenericComparator_get_comparator;
  __pyx_vtable_7rocksdb_8_rocksdb_PyGenericComparator.__pyx_base.set_info_log = (PyObject *(*)(struct __pyx_obj_7rocksdb_8_rocksdb_PyComparator *, std::shared_ptr<rocksdb::Logger> ))__pyx_f_7rocksdb_8_rocksdb_19PyGenericComparator_set_info_log;
  __pyx_type_7rocksdb_8_rocksdb_PyGenericComparator.tp_base = __pyx_ptype_7rocksdb_8_rocksdb_PyComparator;
  if (PyType_Ready(&__pyx_type_7rocksdb_8_rocksdb_PyGenericComparator) < 0) __PYX_ERR(0, 135, __pyx_L1_error)
  __pyx_type_7rocksdb_8_rocksdb_PyGenericComparator.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_7rocksdb_8_rocksdb_PyGenericComparator.tp_dict, __pyx_vtabptr_7rocksdb_8_rocksdb_PyGenericComparator) < 0) __PYX_ERR(0, 135, __pyx_L1_error)
  __pyx_ptype_7rocksdb_8_rocksdb_PyGenericComparator = &__pyx_type_7rocksdb_8_rocksdb_PyGenericComparator;
  __pyx_vtabptr_7rocksdb_8_rocksdb_PyBytewiseComparator = &__pyx_vtable_7rocksdb_8_rocksdb_PyBytewiseComparator;
  __pyx_vtable_7rocksdb_8_rocksdb_PyBytewiseComparator.__pyx_base = *__pyx_vtabptr_7rocksdb_8_rocksdb_PyComparator;
  __pyx_vtable_7rocksdb_8_rocksdb_PyBytewiseComparator.__pyx_base.get_ob = (PyObject *(*)(struct __pyx_obj_7rocksdb_8_rocksdb_PyComparator *))__pyx_f_7rocksdb_8_rocksdb_20PyBytewiseComparator_get_ob;
  __pyx_vtable_7rocksdb_8_rocksdb_PyBytewiseComparator.__pyx_base.get_comparator = (rocksdb::Comparator const *(*)(struct __pyx_obj_7rocksdb_8_rocksdb_PyComparator *))__pyx_f_7rocksdb_8_rocksdb_20PyBytewiseComparator_get_comparator;
  __pyx_type_7rocksdb_8_rocksdb_PyBytewiseComparator.tp_base = __pyx_ptype_7rocksdb_8_rocksdb_PyComparator;
  if (PyType_Ready(&__pyx_type_7rocksdb_8_rocksdb_PyBytewiseComparator) < 0) __PYX_ERR(0, 164, __pyx_L1_error)
  __pyx_type_7rocksdb_8_rocksdb_PyBytewiseComparator.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_7rocksdb_8_rocksdb_PyBytewiseComparator.tp_dict, __pyx_vtabptr_7rocksdb_8_rocksdb_PyBytewiseComparator) < 0) __PYX_ERR(0, 164, __pyx_L1_error)
  __pyx_ptype_7rocksdb_8_rocksdb_PyBytewiseComparator = &__pyx_type_7rocksdb_8_rocksdb_PyBytewiseComparator;
  __pyx_vtabptr_7rocksdb_8_rocksdb_PyFilterPolicy = &__pyx_vtable_7rocksdb_8_rocksdb_PyFilterPolicy;
  __pyx_vtable_7rocksdb_8_rocksdb_PyFilterPolicy.get_ob = (PyObject *(*)(struct __pyx_obj_7rocksdb_8_rocksdb_PyFilterPolicy *))__pyx_f_7rocksdb_8_rocksdb_14PyFilterPolicy_get_ob;
  __pyx_vtable_7rocksdb_8_rocksdb_PyFilterPolicy.get_policy = (std::shared_ptr<__pyx_t_7rocksdb_8_rocksdb_ConstFilterPolicy>  (*)(struct __pyx_obj_7rocksdb_8_rocksdb_PyFilterPolicy *))__pyx_f_7rocksdb_8_rocksdb_14PyFilterPolicy_get_policy;
  __pyx_vtable_7rocksdb_8_rocksdb_PyFilterPolicy.set_info_log = (PyObject *(*)(struct __pyx_obj_7rocksdb_8_rocksdb_PyFilterPolicy *, std::shared_ptr<rocksdb::Logger> ))__pyx_f_7rocksdb_8_rocksdb_14PyFilterPolicy_set_info_log;
  if (PyType_Ready(&__pyx_type_7rocksdb_8_rocksdb_PyFilterPolicy) < 0) __PYX_ERR(0, 207, __pyx_L1_error)
  __pyx_type_7rocksdb_8_rocksdb_PyFilterPolicy.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_7rocksdb_8_rocksdb_PyFilterPolicy.tp_dict, __pyx_vtabptr_7rocksdb_8_rocksdb_PyFilterPolicy) < 0) __PYX_ERR(0, 207, __pyx_L1_error)
  __pyx_ptype_7rocksdb_8_rocksdb_PyFilterPolicy = &__pyx_type_7rocksdb_8_rocksdb_PyFilterPolicy;
  __pyx_vtabptr_7rocksdb_8_rocksdb_PyGenericFilterPolicy = &__pyx_vtable_7rocksdb_8_rocksdb_PyGenericFilterPolicy;
  __pyx_vtable_7rocksdb_8_rocksdb_PyGenericFilterPolicy.__pyx_base = *__pyx_vtabptr_7rocksdb_8_rocksdb_PyFilterPolicy;
  __pyx_vtable_7rocksdb_8_rocksdb_PyGenericFilterPolicy.__pyx_base.get_ob = (PyObject *(*)(struct __pyx_obj_7rocksdb_8_rocksdb_PyFilterPolicy *))__pyx_f_7rocksdb_8_rocksdb_21PyGenericFilterPolicy_get_ob;
  __pyx_vtable_7rocksdb_8_rocksdb_PyGenericFilterPolicy.__pyx_base.get_policy = (std::shared_ptr<__pyx_t_7rocksdb_8_rocksdb_ConstFilterPolicy>  (*)(struct __pyx_obj_7rocksdb_8_rocksdb_PyFilterPolicy *))__pyx_f_7rocksdb_8_rocksdb_21PyGenericFilterPolicy_get_policy;
  __pyx_vtable_7rocksdb_8_rocksdb_PyGenericFilterPolicy.__pyx_base.set_info_log = (PyObject *(*)(struct __pyx_obj_7rocksdb_8_rocksdb_PyFilterPolicy *, std::shared_ptr<rocksdb::Logger> ))__pyx_f_7rocksdb_8_rocksdb_21PyGenericFilterPolicy_set_info_log;
  __pyx_type_7rocksdb_8_rocksdb_PyGenericFilterPolicy.tp_base = __pyx_ptype_7rocksdb_8_rocksdb_PyFilterPolicy;
  if (PyType_Ready(&__pyx_type_7rocksdb_8_rocksdb_PyGenericFilterPolicy) < 0) __PYX_ERR(0, 218, __pyx_L1_error)
  __pyx_type_7rocksdb_8_rocksdb_PyGenericFilterPolicy.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_7rocksdb_8_rocksdb_PyGenericFilterPolicy.tp_dict, __pyx_vtabptr_7rocksdb_8_rocksdb_PyGenericFilterPolicy) < 0) __PYX_ERR(0, 218, __pyx_L1_error)
  __pyx_ptype_7rocksdb_8_rocksdb_PyGenericFilterPolicy = &__pyx_type_7rocksdb_8_rocksdb_PyGenericFilterPolicy;
  __pyx_vtabptr_7rocksdb_8_rocksdb_PyBloomFilterPolicy = &__pyx_vtable_7rocksdb_8_rocksdb_PyBloomFilterPolicy;
  __pyx_vtable_7rocksdb_8_rocksdb_PyBloomFilterPolicy.__pyx_base = *__pyx_vtabptr_7rocksdb_8_rocksdb_PyFilterPolicy;
  __pyx_vtable_7rocksdb_8_rocksdb_PyBloomFilterPolicy.__pyx_base.get_ob = (PyObject *(*)(struct __pyx_obj_7rocksdb_8_rocksdb_PyFilterPolicy *))__pyx_f_7rocksdb_8_rocksdb_19PyBloomFilterPolicy_get_ob;
  __pyx_vtable_7rocksdb_8_rocksdb_PyBloomFilterPolicy.__pyx_base.get_policy = (std::shared_ptr<__pyx_t_7rocksdb_8_rocksdb_ConstFilterPolicy>  (*)(struct __pyx_obj_7rocksdb_8_rocksdb_PyFilterPolicy *))__pyx_f_7rocksdb_8_rocksdb_19PyBloomFilterPolicy_get_policy;
  __pyx_type_7rocksdb_8_rocksdb_PyBloomFilterPolicy.tp_base = __pyx_ptype_7rocksdb_8_rocksdb_PyFilterPolicy;
  if (PyType_Ready(&__pyx_type_7rocksdb_8_rocksdb_PyBloomFilterPolicy) < 0) __PYX_ERR(0, 277, __pyx_L1_error)
  __pyx_type_7rocksdb_8_rocksdb_PyBloomFilterPolicy.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_7rocksdb_8_rocksdb_PyBloomFilterPolicy.tp_dict, __pyx_vtabptr_7rocksdb_8_rocksdb_PyBloomFilterPolicy) < 0) __PYX_ERR(0, 277, __pyx_L1_error)
  __pyx_ptype_7rocksdb_8_rocksdb_PyBloomFilterPolicy = &__pyx_type_7rocksdb_8_rocksdb_PyBloomFilterPolicy;
  __pyx_vtabptr_7rocksdb_8_rocksdb_PyMergeOperator = &__pyx_vtable_7rocksdb_8_rocksdb_PyMergeOperator;
  __pyx_vtable_7rocksdb_8_rocksdb_PyMergeOperator.get_ob = (PyObject *(*)(struct __pyx_obj_7rocksdb_8_rocksdb_PyMergeOperator *))__pyx_f_7rocksdb_8_rocksdb_15PyMergeOperator_get_ob;
  __pyx_vtable_7rocksdb_8_rocksdb_PyMergeOperator.get_operator = (std::shared_ptr<rocksdb::MergeOperator>  (*)(struct __pyx_obj_7rocksdb_8_rocksdb_PyMergeOperator *))__pyx_f_7rocksdb_8_rocksdb_15PyMergeOperator_get_operator;
  if (PyType_Ready(&__pyx_type_7rocksdb_8_rocksdb_PyMergeOperator) < 0) __PYX_ERR(0, 318, __pyx_L1_error)
  __pyx_type_7rocksdb_8_rocksdb_PyMergeOperator.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_7rocksdb_8_rocksdb_PyMergeOperator.tp_dict, __pyx_vtabptr_7rocksdb_8_rocksdb_PyMergeOperator) < 0) __PYX_ERR(0, 318, __pyx_L1_error)
  __pyx_ptype_7rocksdb_8_rocksdb_PyMergeOperator = &__pyx_type_7rocksdb_8_rocksdb_PyMergeOperator;
  __pyx_vtabptr_7rocksdb_8_rocksdb_PyCache = &__pyx_vtable_7rocksdb_8_rocksdb_PyCache;
  __pyx_vtable_7rocksdb_8_rocksdb_PyCache.get_cache = (std::shared_ptr<rocksdb::Cache>  (*)(struct __pyx_obj_7rocksdb_8_rocksdb_PyCache *))__pyx_f_7rocksdb_8_rocksdb_7PyCache_get_cache;
  if (PyType_Ready(&__pyx_type_7rocksdb_8_rocksdb_PyCache) < 0) __PYX_ERR(0, 455, __pyx_L1_error)
  __pyx_type_7rocksdb_8_rocksdb_PyCache.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_7rocksdb_8_rocksdb_PyCache.tp_dict, __pyx_vtabptr_7rocksdb_8_rocksdb_PyCache) < 0) __PYX_ERR(0, 455, __pyx_L1_error)
  __pyx_ptype_7rocksdb_8_rocksdb_PyCache = &__pyx_type_7rocksdb_8_rocksdb_PyCache;
  __pyx_vtabptr_7rocksdb_8_rocksdb_PyLRUCache = &__pyx_vtable_7rocksdb_8_rocksdb_PyLRUCache;
  __pyx_vtable_7rocksdb_8_rocksdb_PyLRUCache.__pyx_base = *__pyx_vtabptr_7rocksdb_8_rocksdb_PyCache;
  __pyx_vtable_7rocksdb_8_rocksdb_PyLRUCache.__pyx_base.get_cache = (std::shared_ptr<rocksdb::Cache>  (*)(struct __pyx_obj_7rocksdb_8_rocksdb_PyCache *))__pyx_f_7rocksdb_8_rocksdb_10PyLRUCache_get_cache;
  __pyx_type_7rocksdb_8_rocksdb_PyLRUCache.tp_base = __pyx_ptype_7rocksdb_8_rocksdb_PyCache;
  if (PyType_Ready(&__pyx_type_7rocksdb_8_rocksdb_PyLRUCache) < 0) __PYX_ERR(0, 460, __pyx_L1_error)
  __pyx_type_7rocksdb_8_rocksdb_PyLRUCache.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_7rocksdb_8_rocksdb_PyLRUCache.tp_dict, __pyx_vtabptr_7rocksdb_8_rocksdb_PyLRUCache) < 0) __PYX_ERR(0, 460, __pyx_L1_error)
  __pyx_ptype_7rocksdb_8_rocksdb_PyLRUCache = &__pyx_type_7rocksdb_8_rocksdb_PyLRUCache;
  __pyx_vtabptr_7rocksdb_8_rocksdb_PySliceTransform = &__pyx_vtable_7rocksdb_8_rocksdb_PySliceTransform;
  __pyx_vtable_7rocksdb_8_rocksdb_PySliceTransform.get_ob = (PyObject *(*)(struct __pyx_obj_7rocksdb_8_rocksdb_PySliceTransform *))__pyx_f_7rocksdb_8_rocksdb_16PySliceTransform_get_ob;
  __pyx_vtable_7rocksdb_8_rocksdb_PySliceTransform.get_transformer = (std::shared_ptr<rocksdb::SliceTransform>  (*)(struct __pyx_obj_7rocksdb_8_rocksdb_PySliceTransform *))__pyx_f_7rocksdb_8_rocksdb_16PySliceTransform_get_transformer;
  __pyx_vtable_7rocksdb_8_rocksdb_PySliceTransform.set_info_log = (PyObject *(*)(struct __pyx_obj_7rocksdb_8_rocksdb_PySliceTransform *, std::shared_ptr<rocksdb::Logger> ))__pyx_f_7rocksdb_8_rocksdb_16PySliceTransform_set_info_log;
  if (PyType_Ready(&__pyx_type_7rocksdb_8_rocksdb_PySliceTransform) < 0) __PYX_ERR(0, 477, __pyx_L1_error)
  __pyx_type_7rocksdb_8_rocksdb_PySliceTransform.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_7rocksdb_8_rocksdb_PySliceTransform.tp_dict, __pyx_vtabptr_7rocksdb_8_rocksdb_PySliceTransform) < 0) __PYX_ERR(0, 477, __pyx_L1_error)
  __pyx_ptype_7rocksdb_8_rocksdb_PySliceTransform = &__pyx_type_7rocksdb_8_rocksdb_PySliceTransform;
  __pyx_vtabptr_7rocksdb_8_rocksdb_PyTableFactory = &__pyx_vtable_7rocksdb_8_rocksdb_PyTableFactory;
  __pyx_vtable_7rocksdb_8_rocksdb_PyTableFactory.get_table_factory = (std::shared_ptr<rocksdb::TableFactory>  (*)(struct __pyx_obj_7rocksdb_8_rocksdb_PyTableFactory *))__pyx_f_7rocksdb_8_rocksdb_14PyTableFactory_get_table_factory;
  __pyx_vtable_7rocksdb_8_rocksdb_PyTableFactory.set_info_log = (PyObject *(*)(struct __pyx_obj_7rocksdb_8_rocksdb_PyTableFactory *, std::shared_ptr<rocksdb::Logger> ))__pyx_f_7rocksdb_8_rocksdb_14PyTableFactory_set_info_log;
  if (PyType_Ready(&__pyx_type_7rocksdb_8_rocksdb_PyTableFactory) < 0) __PYX_ERR(0, 559, __pyx_L1_error)
  __pyx_type_7rocksdb_8_rocksdb_PyTableFactory.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_7rocksdb_8_rocksdb_PyTableFactory.tp_dict, __pyx_vtabptr_7rocksdb_8_rocksdb_PyTableFactory) < 0) __PYX_ERR(0, 559, __pyx_L1_error)
  __pyx_ptype_7rocksdb_8_rocksdb_PyTableFactory = &__pyx_type_7rocksdb_8_rocksdb_PyTableFactory;
  __pyx_vtabptr_7rocksdb_8_rocksdb_BlockBasedTableFactory = &__pyx_vtable_7rocksdb_8_rocksdb_BlockBasedTableFactory;
  __pyx_vtable_7rocksdb_8_rocksdb_BlockBasedTableFactory.__pyx_base = *__pyx_vtabptr_7rocksdb_8_rocksdb_PyTableFactory;
  __pyx_vtable_7rocksdb_8_rocksdb_BlockBasedTableFactory.__pyx_base.set_info_log = (PyObject *(*)(struct __pyx_obj_7rocksdb_8_rocksdb_PyTableFactory *, std::shared_ptr<rocksdb::Logger> ))__pyx_f_7rocksdb_8_rocksdb_22BlockBasedTableFactory_set_info_log;
  __pyx_type_7rocksdb_8_rocksdb_BlockBasedTableFactory.tp_base = __pyx_ptype_7rocksdb_8_rocksdb_PyTableFactory;
  if (PyType_Ready(&__pyx_type_7rocksdb_8_rocksdb_BlockBasedTableFactory) < 0) __PYX_ERR(0, 568, __pyx_L1_error)
  __pyx_type_7rocksdb_8_rocksdb_BlockBasedTableFactory.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_7rocksdb_8_rocksdb_BlockBasedTableFactory.tp_dict, __pyx_vtabptr_7rocksdb_8_rocksdb_BlockBasedTableFactory) < 0) __PYX_ERR(0, 568, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "BlockBasedTableFactory", (PyObject *)&__pyx_type_7rocksdb_8_rocksdb_BlockBasedTableFactory) < 0) __PYX_ERR(0, 568, __pyx_L1_error)
  __pyx_ptype_7rocksdb_8_rocksdb_BlockBasedTableFactory = &__pyx_type_7rocksdb_8_rocksdb_BlockBasedTableFactory;
  __pyx_vtabptr_7rocksdb_8_rocksdb_PlainTableFactory = &__pyx_vtable_7rocksdb_8_rocksdb_PlainTableFactory;
  __pyx_vtable_7rocksdb_8_rocksdb_PlainTableFactory.__pyx_base = *__pyx_vtabptr_7rocksdb_8_rocksdb_PyTableFactory;
  __pyx_type_7rocksdb_8_rocksdb_PlainTableFactory.tp_base = __pyx_ptype_7rocksdb_8_rocksdb_PyTableFactory;
  if (PyType_Ready(&__pyx_type_7rocksdb_8_rocksdb_PlainTableFactory) < 0) __PYX_ERR(0, 650, __pyx_L1_error)
  __pyx_type_7rocksdb_8_rocksdb_PlainTableFactory.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_7rocksdb_8_rocksdb_PlainTableFactory.tp_dict, __pyx_vtabptr_7rocksdb_8_rocksdb_PlainTableFactory) < 0) __PYX_ERR(0, 650, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "PlainTableFactory", (PyObject *)&__pyx_type_7rocksdb_8_rocksdb_PlainTableFactory) < 0) __PYX_ERR(0, 650, __pyx_L1_error)
  __pyx_ptype_7rocksdb_8_rocksdb_PlainTableFactory = &__pyx_type_7rocksdb_8_rocksdb_PlainTableFactory;
  __pyx_vtabptr_7rocksdb_8_rocksdb_PyMemtableFactory = &__pyx_vtable_7rocksdb_8_rocksdb_PyMemtableFactory;
  __pyx_vtable_7rocksdb_8_rocksdb_PyMemtableFactory.get_memtable_factory = (std::shared_ptr<rocksdb::MemTableRepFactory>  (*)(struct __pyx_obj_7rocksdb_8_rocksdb_PyMemtableFactory *))__pyx_f_7rocksdb_8_rocksdb_17PyMemtableFactory_get_memtable_factory;
  if (PyType_Ready(&__pyx_type_7rocksdb_8_rocksdb_PyMemtableFactory) < 0) __PYX_ERR(0, 685, __pyx_L1_error)
  __pyx_type_7rocksdb_8_rocksdb_PyMemtableFactory.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_7rocksdb_8_rocksdb_PyMemtableFactory.tp_dict, __pyx_vtabptr_7rocksdb_8_rocksdb_PyMemtableFactory) < 0) __PYX_ERR(0, 685, __pyx_L1_error)
  __pyx_ptype_7rocksdb_8_rocksdb_PyMemtableFactory = &__pyx_type_7rocksdb_8_rocksdb_PyMemtableFactory;
  __pyx_vtabptr_7rocksdb_8_rocksdb_SkipListMemtableFactory = &__pyx_vtable_7rocksdb_8_rocksdb_SkipListMemtableFactory;
  __pyx_vtable_7rocksdb_8_rocksdb_SkipListMemtableFactory.__pyx_base = *__pyx_vtabptr_7rocksdb_8_rocksdb_PyMemtableFactory;
  __pyx_type_7rocksdb_8_rocksdb_SkipListMemtableFactory.tp_base = __pyx_ptype_7rocksdb_8_rocksdb_PyMemtableFactory;
  if (PyType_Ready(&__pyx_type_7rocksdb_8_rocksdb_SkipListMemtableFactory) < 0) __PYX_ERR(0, 691, __pyx_L1_error)
  __pyx_type_7rocksdb_8_rocksdb_SkipListMemtableFactory.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_7rocksdb_8_rocksdb_SkipListMemtableFactory.tp_dict, __pyx_vtabptr_7rocksdb_8_rocksdb_SkipListMemtableFactory) < 0) __PYX_ERR(0, 691, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "SkipListMemtableFactory", (PyObject *)&__pyx_type_7rocksdb_8_rocksdb_SkipListMemtableFactory) < 0) __PYX_ERR(0, 691, __pyx_L1_error)
  __pyx_ptype_7rocksdb_8_rocksdb_SkipListMemtableFactory = &__pyx_type_7rocksdb_8_rocksdb_SkipListMemtableFactory;
  __pyx_vtabptr_7rocksdb_8_rocksdb_VectorMemtableFactory = &__pyx_vtable_7rocksdb_8_rocksdb_VectorMemtableFactory;
  __pyx_vtable_7rocksdb_8_rocksdb_VectorMemtableFactory.__pyx_base = *__pyx_vtabptr_7rocksdb_8_rocksdb_PyMemtableFactory;
  __pyx_type_7rocksdb_8_rocksdb_VectorMemtableFactory.tp_base = __pyx_ptype_7rocksdb_8_rocksdb_PyMemtableFactory;
  if (PyType_Ready(&__pyx_type_7rocksdb_8_rocksdb_VectorMemtableFactory) < 0) __PYX_ERR(0, 695, __pyx_L1_error)
  __pyx_type_7rocksdb_8_rocksdb_VectorMemtableFactory.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_7rocksdb_8_rocksdb_VectorMemtableFactory.tp_dict, __pyx_vtabptr_7rocksdb_8_rocksdb_VectorMemtableFactory) < 0) __PYX_ERR(0, 695, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "VectorMemtableFactory", (PyObject *)&__pyx_type_7rocksdb_8_rocksdb_VectorMemtableFactory) < 0) __PYX_ERR(0, 695, __pyx_L1_error)
  __pyx_ptype_7rocksdb_8_rocksdb_VectorMemtableFactory = &__pyx_type_7rocksdb_8_rocksdb_VectorMemtableFactory;
  __pyx_vtabptr_7rocksdb_8_rocksdb_HashSkipListMemtableFactory = &__pyx_vtable_7rocksdb_8_rocksdb_HashSkipListMemtableFactory;
  __pyx_vtable_7rocksdb_8_rocksdb_HashSkipListMemtableFactory.__pyx_base = *__pyx_vtabptr_7rocksdb_8_rocksdb_PyMemtableFactory;
  __pyx_type_7rocksdb_8_rocksdb_HashSkipListMemtableFactory.tp_base = __pyx_ptype_7rocksdb_8_rocksdb_PyMemtableFactory;
  if (PyType_Ready(&__pyx_type_7rocksdb_8_rocksdb_HashSkipListMemtableFactory) < 0) __PYX_ERR(0, 699, __pyx_L1_error)
  __pyx_type_7rocksdb_8_rocksdb_HashSkipListMemtableFactory.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_7rocksdb_8_rocksdb_HashSkipListMemtableFactory.tp_dict, __pyx_vtabptr_7rocksdb_8_rocksdb_HashSkipListMemtableFactory) < 0) __PYX_ERR(0, 699, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "HashSkipListMemtableFactory", (PyObject *)&__pyx_type_7rocksdb_8_rocksdb_HashSkipListMemtableFactory) < 0) __PYX_ERR(0, 699, __pyx_L1_error)
  __pyx_ptype_7rocksdb_8_rocksdb_HashSkipListMemtableFactory = &__pyx_type_7rocksdb_8_rocksdb_HashSkipListMemtableFactory;
  __pyx_vtabptr_7rocksdb_8_rocksdb_HashLinkListMemtableFactory = &__pyx_vtable_7rocksdb_8_rocksdb_HashLinkListMemtableFactory;
  __pyx_vtable_7rocksdb_8_rocksdb_HashLinkListMemtableFactory.__pyx_base = *__pyx_vtabptr_7rocksdb_8_rocksdb_PyMemtableFactory;
  __pyx_type_7rocksdb_8_rocksdb_HashLinkListMemtableFactory.tp_base = __pyx_ptype_7rocksdb_8_rocksdb_PyMemtableFactory;
  if (PyType_Ready(&__pyx_type_7rocksdb_8_rocksdb_HashLinkListMemtableFactory) < 0) __PYX_ERR(0, 712, __pyx_L1_error)
  __pyx_type_7rocksdb_8_rocksdb_HashLinkListMemtableFactory.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_7rocksdb_8_rocksdb_HashLinkListMemtableFactory.tp_dict, __pyx_vtabptr_7rocksdb_8_rocksdb_HashLinkListMemtableFactory) < 0) __PYX_ERR(0, 712, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "HashLinkListMemtableFactory", (PyObject *)&__pyx_type_7rocksdb_8_rocksdb_HashLinkListMemtableFactory) < 0) __PYX_ERR(0, 712, __pyx_L1_error)
  __pyx_ptype_7rocksdb_8_rocksdb_HashLinkListMemtableFactory = &__pyx_type_7rocksdb_8_rocksdb_HashLinkListMemtableFactory;
  if (PyType_Ready(&__pyx_type_7rocksdb_8_rocksdb_CompressionType) < 0) __PYX_ERR(0, 718, __pyx_L1_error)
  __pyx_type_7rocksdb_8_rocksdb_CompressionType.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "CompressionType", (PyObject *)&__pyx_type_7rocksdb_8_rocksdb_CompressionType) < 0) __PYX_ERR(0, 718, __pyx_L1_error)
  __pyx_ptype_7rocksdb_8_rocksdb_CompressionType = &__pyx_type_7rocksdb_8_rocksdb_CompressionType;
  if (PyType_Ready(&__pyx_type_7rocksdb_8_rocksdb_CompactionPri) < 0) __PYX_ERR(0, 730, __pyx_L1_error)
  __pyx_type_7rocksdb_8_rocksdb_CompactionPri.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "CompactionPri", (PyObject *)&__pyx_type_7rocksdb_8_rocksdb_CompactionPri) < 0) __PYX_ERR(0, 730, __pyx_L1_error)
  __pyx_ptype_7rocksdb_8_rocksdb_CompactionPri = &__pyx_type_7rocksdb_8_rocksdb_CompactionPri;
  if (PyType_Ready(&__pyx_type_7rocksdb_8_rocksdb_Options) < 0) __PYX_ERR(0, 736, __pyx_L1_error)
  __pyx_type_7rocksdb_8_rocksdb_Options.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "Options", (PyObject *)&__pyx_type_7rocksdb_8_rocksdb_Options) < 0) __PYX_ERR(0, 736, __pyx_L1_error)
  __pyx_ptype_7rocksdb_8_rocksdb_Options = &__pyx_type_7rocksdb_8_rocksdb_Options;
  if (PyType_Ready(&__pyx_type_7rocksdb_8_rocksdb_Snapshot) < 0) __PYX_ERR(0, 1741, __pyx_L1_error)
  __pyx_type_7rocksdb_8_rocksdb_Snapshot.tp_print = 0;
  __pyx_ptype_7rocksdb_8_rocksdb_Snapshot = &__pyx_type_7rocksdb_8_rocksdb_Snapshot;
  __pyx_vtabptr_7rocksdb_8_rocksdb_BaseIterator = &__pyx_vtable_7rocksdb_8_rocksdb_BaseIterator;
  __pyx_vtable_7rocksdb_8_rocksdb_BaseIterator.seek_to_first = (PyObject *(*)(struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *, int __pyx_skip_dispatch))__pyx_f_7rocksdb_8_rocksdb_12BaseIterator_seek_to_first;
  __pyx_vtable_7rocksdb_8_rocksdb_BaseIterator.seek_to_last = (PyObject *(*)(struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *, int __pyx_skip_dispatch))__pyx_f_7rocksdb_8_rocksdb_12BaseIterator_seek_to_last;
  __pyx_vtable_7rocksdb_8_rocksdb_BaseIterator.seek = (PyObject *(*)(struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *, PyObject *, int __pyx_skip_dispatch))__pyx_f_7rocksdb_8_rocksdb_12BaseIterator_seek;
  __pyx_vtable_7rocksdb_8_rocksdb_BaseIterator.seek_for_prev = (PyObject *(*)(struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *, PyObject *, int __pyx_skip_dispatch))__pyx_f_7rocksdb_8_rocksdb_12BaseIterator_seek_for_prev;
  __pyx_vtable_7rocksdb_8_rocksdb_BaseIterator.get_ob = (PyObject *(*)(struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *))__pyx_f_7rocksdb_8_rocksdb_12BaseIterator_get_ob;
  if (PyType_Ready(&__pyx_type_7rocksdb_8_rocksdb_BaseIterator) < 0) __PYX_ERR(0, 1758, __pyx_L1_error)
  __pyx_type_7rocksdb_8_rocksdb_BaseIterator.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_7rocksdb_8_rocksdb_BaseIterator.tp_dict, __pyx_vtabptr_7rocksdb_8_rocksdb_BaseIterator) < 0) __PYX_ERR(0, 1758, __pyx_L1_error)
  __pyx_ptype_7rocksdb_8_rocksdb_BaseIterator = &__pyx_type_7rocksdb_8_rocksdb_BaseIterator;
  __pyx_vtabptr_7rocksdb_8_rocksdb_KeysIterator = &__pyx_vtable_7rocksdb_8_rocksdb_KeysIterator;
  __pyx_vtable_7rocksdb_8_rocksdb_KeysIterator.__pyx_base = *__pyx_vtabptr_7rocksdb_8_rocksdb_BaseIterator;
  __pyx_vtable_7rocksdb_8_rocksdb_KeysIterator.__pyx_base.get_ob = (PyObject *(*)(struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *))__pyx_f_7rocksdb_8_rocksdb_12KeysIterator_get_ob;
  __pyx_type_7rocksdb_8_rocksdb_KeysIterator.tp_base = __pyx_ptype_7rocksdb_8_rocksdb_BaseIterator;
  if (PyType_Ready(&__pyx_type_7rocksdb_8_rocksdb_KeysIterator) < 0) __PYX_ERR(0, 1816, __pyx_L1_error)
  __pyx_type_7rocksdb_8_rocksdb_KeysIterator.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_7rocksdb_8_rocksdb_KeysIterator.tp_dict, __pyx_vtabptr_7rocksdb_8_rocksdb_KeysIterator) < 0) __PYX_ERR(0, 1816, __pyx_L1_error)
  __pyx_ptype_7rocksdb_8_rocksdb_KeysIterator = &__pyx_type_7rocksdb_8_rocksdb_KeysIterator;
  __pyx_vtabptr_7rocksdb_8_rocksdb_ValuesIterator = &__pyx_vtable_7rocksdb_8_rocksdb_ValuesIterator;
  __pyx_vtable_7rocksdb_8_rocksdb_ValuesIterator.__pyx_base = *__pyx_vtabptr_7rocksdb_8_rocksdb_BaseIterator;
  __pyx_vtable_7rocksdb_8_rocksdb_ValuesIterator.__pyx_base.get_ob = (PyObject *(*)(struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *))__pyx_f_7rocksdb_8_rocksdb_14ValuesIterator_get_ob;
  __pyx_type_7rocksdb_8_rocksdb_ValuesIterator.tp_base = __pyx_ptype_7rocksdb_8_rocksdb_BaseIterator;
  if (PyType_Ready(&__pyx_type_7rocksdb_8_rocksdb_ValuesIterator) < 0) __PYX_ERR(0, 1825, __pyx_L1_error)
  __pyx_type_7rocksdb_8_rocksdb_ValuesIterator.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_7rocksdb_8_rocksdb_ValuesIterator.tp_dict, __pyx_vtabptr_7rocksdb_8_rocksdb_ValuesIterator) < 0) __PYX_ERR(0, 1825, __pyx_L1_error)
  __pyx_ptype_7rocksdb_8_rocksdb_ValuesIterator = &__pyx_type_7rocksdb_8_rocksdb_ValuesIterator;
  __pyx_vtabptr_7rocksdb_8_rocksdb_ItemsIterator = &__pyx_vtable_7rocksdb_8_rocksdb_ItemsIterator;
  __pyx_vtable_7rocksdb_8_rocksdb_ItemsIterator.__pyx_base = *__pyx_vtabptr_7rocksdb_8_rocksdb_BaseIterator;
  __pyx_vtable_7rocksdb_8_rocksdb_ItemsIterator.__pyx_base.get_ob = (PyObject *(*)(struct __pyx_obj_7rocksdb_8_rocksdb_BaseIterator *))__pyx_f_7rocksdb_8_rocksdb_13ItemsIterator_get_ob;
  __pyx_type_7rocksdb_8_rocksdb_ItemsIterator.tp_base = __pyx_ptype_7rocksdb_8_rocksdb_BaseIterator;
  if (PyType_Ready(&__pyx_type_7rocksdb_8_rocksdb_ItemsIterator) < 0) __PYX_ERR(0, 1834, __pyx_L1_error)
  __pyx_type_7rocksdb_8_rocksdb_ItemsIterator.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_7rocksdb_8_rocksdb_ItemsIterator.tp_dict, __pyx_vtabptr_7rocksdb_8_rocksdb_ItemsIterator) < 0) __PYX_ERR(0, 1834, __pyx_L1_error)
  __pyx_ptype_7rocksdb_8_rocksdb_ItemsIterator = &__pyx_type_7rocksdb_8_rocksdb_ItemsIterator;
  if (PyType_Ready(&__pyx_type_7rocksdb_8_rocksdb_ReversedIterator) < 0) __PYX_ERR(0, 1845, __pyx_L1_error)
  __pyx_type_7rocksdb_8_rocksdb_ReversedIterator.tp_print = 0;
  __pyx_ptype_7rocksdb_8_rocksdb_ReversedIterator = &__pyx_type_7rocksdb_8_rocksdb_ReversedIterator;
  if (PyType_Ready(&__pyx_type_7rocksdb_8_rocksdb_WriteBatchIterator) < 0) __PYX_ERR(0, 1369, __pyx_L1_error)
  __pyx_type_7rocksdb_8_rocksdb_WriteBatchIterator.tp_print = 0;
  __pyx_ptype_7rocksdb_8_rocksdb_WriteBatchIterator = &__pyx_type_7rocksdb_8_rocksdb_WriteBatchIterator;
  if (PyType_Ready(&__pyx_type_7rocksdb_8_rocksdb_WriteBatch) < 0) __PYX_ERR(0, 1332, __pyx_L1_error)
  __pyx_type_7rocksdb_8_rocksdb_WriteBatch.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "WriteBatch", (PyObject *)&__pyx_type_7rocksdb_8_rocksdb_WriteBatch) < 0) __PYX_ERR(0, 1332, __pyx_L1_error)
  __pyx_ptype_7rocksdb_8_rocksdb_WriteBatch = &__pyx_type_7rocksdb_8_rocksdb_WriteBatch;
  __pyx_vtabptr_7rocksdb_8_rocksdb_DB = &__pyx_vtable_7rocksdb_8_rocksdb_DB;
  __pyx_vtable_7rocksdb_8_rocksdb_DB.build_read_opts = (rocksdb::ReadOptions (*)(struct __pyx_obj_7rocksdb_8_rocksdb_DB *, PyObject *))__pyx_f_7rocksdb_8_rocksdb_2DB_build_read_opts;
  if (PyType_Ready(&__pyx_type_7rocksdb_8_rocksdb_DB) < 0) __PYX_ERR(0, 1410, __pyx_L1_error)
  __pyx_type_7rocksdb_8_rocksdb_DB.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_7rocksdb_8_rocksdb_DB.tp_dict, __pyx_vtabptr_7rocksdb_8_rocksdb_DB) < 0) __PYX_ERR(0, 1410, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "DB", (PyObject *)&__pyx_type_7rocksdb_8_rocksdb_DB) < 0) __PYX_ERR(0, 1410, __pyx_L1_error)
  __pyx_ptype_7rocksdb_8_rocksdb_DB = &__pyx_type_7rocksdb_8_rocksdb_DB;
  if (PyType_Ready(&__pyx_type_7rocksdb_8_rocksdb_BackupEngine) < 0) __PYX_ERR(0, 1882, __pyx_L1_error)
  __pyx_type_7rocksdb_8_rocksdb_BackupEngine.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "BackupEngine", (PyObject *)&__pyx_type_7rocksdb_8_rocksdb_BackupEngine) < 0) __PYX_ERR(0, 1882, __pyx_L1_error)
  __pyx_ptype_7rocksdb_8_rocksdb_BackupEngine = &__pyx_type_7rocksdb_8_rocksdb_BackupEngine;
  /*--- Type import code ---*/
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "type", 
  #if CYTHON_COMPILING_IN_PYPY
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  0); if (unlikely(!__pyx_ptype_7cpython_4type_type)) __PYX_ERR(2, 9, __pyx_L1_error)
  __pyx_ptype_7cpython_4bool_bool = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "bool", sizeof(PyBoolObject), 0); if (unlikely(!__pyx_ptype_7cpython_4bool_bool)) __PYX_ERR(3, 8, __pyx_L1_error)
  __pyx_ptype_7cpython_7complex_complex = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "complex", sizeof(PyComplexObject), 0); if (unlikely(!__pyx_ptype_7cpython_7complex_complex)) __PYX_ERR(4, 15, __pyx_L1_error)
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "rocksdb/_rocksdb.pyx":45
 * from status cimport Status
 * 
 * import sys             # <<<<<<<<<<<<<<
 * from interfaces import MergeOperator as IMergeOperator
 * from interfaces import AssociativeMergeOperator as IAssociativeMergeOperator
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_sys, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 45, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sys, __pyx_t_1) < 0) __PYX_ERR(0, 45, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":46
 * 
 * import sys
 * from interfaces import MergeOperator as IMergeOperator             # <<<<<<<<<<<<<<
 * from interfaces import AssociativeMergeOperator as IAssociativeMergeOperator
 * from interfaces import FilterPolicy as IFilterPolicy
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_MergeOperator);
  __Pyx_GIVEREF(__pyx_n_s_MergeOperator);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_MergeOperator);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_interfaces, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_MergeOperator); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMergeOperator, __pyx_t_1) < 0) __PYX_ERR(0, 46, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "rocksdb/_rocksdb.pyx":47
 * import sys
 * from interfaces import MergeOperator as IMergeOperator
 * from interfaces import AssociativeMergeOperator as IAssociativeMergeOperator             # <<<<<<<<<<<<<<
 * from interfaces import FilterPolicy as IFilterPolicy
 * from interfaces import Comparator as IComparator
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_AssociativeMergeOperator);
  __Pyx_GIVEREF(__pyx_n_s_AssociativeMergeOperator);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_AssociativeMergeOperator);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_interfaces, __pyx_t_2, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_AssociativeMergeOperator); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IAssociativeMergeOperator, __pyx_t_2) < 0) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":48
 * from interfaces import MergeOperator as IMergeOperator
 * from interfaces import AssociativeMergeOperator as IAssociativeMergeOperator
 * from interfaces import FilterPolicy as IFilterPolicy             # <<<<<<<<<<<<<<
 * from interfaces import Comparator as IComparator
 * from interfaces import SliceTransform as ISliceTransform
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_FilterPolicy);
  __Pyx_GIVEREF(__pyx_n_s_FilterPolicy);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_FilterPolicy);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_interfaces, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_FilterPolicy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IFilterPolicy, __pyx_t_1) < 0) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "rocksdb/_rocksdb.pyx":49
 * from interfaces import AssociativeMergeOperator as IAssociativeMergeOperator
 * from interfaces import FilterPolicy as IFilterPolicy
 * from interfaces import Comparator as IComparator             # <<<<<<<<<<<<<<
 * from interfaces import SliceTransform as ISliceTransform
 * import traceback
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 49, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_Comparator);
  __Pyx_GIVEREF(__pyx_n_s_Comparator);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_Comparator);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_interfaces, __pyx_t_2, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 49, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_Comparator); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 49, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IComparator, __pyx_t_2) < 0) __PYX_ERR(0, 49, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "rocksdb/_rocksdb.pyx":50
 * from interfaces import FilterPolicy as IFilterPolicy
 * from interfaces import Comparator as IComparator
 * from interfaces import SliceTransform as ISliceTransform             # <<<<<<<<<<<<<<
 * import traceback
 * import errors
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_SliceTransform);
  __Pyx_GIVEREF(__pyx_n_s_SliceTransform);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_SliceTransform);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_interfaces, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_SliceTransform); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ISliceTransform, __pyx_t_1) < 0) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "rocksdb/_rocksdb.pyx":51
 * from interfaces import Comparator as IComparator
 * from interfaces import SliceTransform as ISliceTransform
 * import traceback             # <<<<<<<<<<<<<<
 * import errors
 * 
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_traceback, 0, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 51, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_traceback, __pyx_t_2) < 0) __PYX_ERR(0, 51, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "rocksdb/_rocksdb.pyx":52
 * from interfaces import SliceTransform as ISliceTransform
 * import traceback
 * import errors             # <<<<<<<<<<<<<<
 * 
 * ctypedef const filter_policy.FilterPolicy ConstFilterPolicy
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_errors, 0, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_errors, __pyx_t_2) < 0) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "rocksdb/_rocksdb.pyx":64
 * cdef extern from "Python.h":
 *     void PyEval_InitThreads()
 * PyEval_InitThreads()             # <<<<<<<<<<<<<<
 * 
 * ## Here comes the stuff to wrap the status to exception
 */
  PyEval_InitThreads();

  /* "rocksdb/_rocksdb.pyx":200
 *         error_msg.assign(<bytes>str(error))
 * 
 * BytewiseComparator = PyBytewiseComparator             # <<<<<<<<<<<<<<
 * #########################################
 * 
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_BytewiseComparator, ((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_PyBytewiseComparator)) < 0) __PYX_ERR(0, 200, __pyx_L1_error)

  /* "rocksdb/_rocksdb.pyx":311
 *         return self.policy
 * 
 * BloomFilterPolicy = PyBloomFilterPolicy             # <<<<<<<<<<<<<<
 * #############################################
 * 
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_BloomFilterPolicy, ((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_PyBloomFilterPolicy)) < 0) __PYX_ERR(0, 311, __pyx_L1_error)

  /* "rocksdb/_rocksdb.pyx":472
 *         return self.cache_ob
 * 
 * LRUCache = PyLRUCache             # <<<<<<<<<<<<<<
 * ###############################
 * 
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LRUCache, ((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_PyLRUCache)) < 0) __PYX_ERR(0, 472, __pyx_L1_error)

  /* "rocksdb/_rocksdb.pyx":719
 * 
 * cdef class CompressionType(object):
 *     no_compression = u'no_compression'             # <<<<<<<<<<<<<<
 *     snappy_compression = u'snappy_compression'
 *     zlib_compression = u'zlib_compression'
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_CompressionType->tp_dict, __pyx_n_s_no_compression, __pyx_n_u_no_compression) < 0) __PYX_ERR(0, 719, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_CompressionType);

  /* "rocksdb/_rocksdb.pyx":720
 * cdef class CompressionType(object):
 *     no_compression = u'no_compression'
 *     snappy_compression = u'snappy_compression'             # <<<<<<<<<<<<<<
 *     zlib_compression = u'zlib_compression'
 *     bzip2_compression = u'bzip2_compression'
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_CompressionType->tp_dict, __pyx_n_s_snappy_compression, __pyx_n_u_snappy_compression) < 0) __PYX_ERR(0, 720, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_CompressionType);

  /* "rocksdb/_rocksdb.pyx":721
 *     no_compression = u'no_compression'
 *     snappy_compression = u'snappy_compression'
 *     zlib_compression = u'zlib_compression'             # <<<<<<<<<<<<<<
 *     bzip2_compression = u'bzip2_compression'
 *     lz4_compression = u'lz4_compression'
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_CompressionType->tp_dict, __pyx_n_s_zlib_compression, __pyx_n_u_zlib_compression) < 0) __PYX_ERR(0, 721, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_CompressionType);

  /* "rocksdb/_rocksdb.pyx":722
 *     snappy_compression = u'snappy_compression'
 *     zlib_compression = u'zlib_compression'
 *     bzip2_compression = u'bzip2_compression'             # <<<<<<<<<<<<<<
 *     lz4_compression = u'lz4_compression'
 *     lz4hc_compression = u'lz4hc_compression'
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_CompressionType->tp_dict, __pyx_n_s_bzip2_compression, __pyx_n_u_bzip2_compression) < 0) __PYX_ERR(0, 722, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_CompressionType);

  /* "rocksdb/_rocksdb.pyx":723
 *     zlib_compression = u'zlib_compression'
 *     bzip2_compression = u'bzip2_compression'
 *     lz4_compression = u'lz4_compression'             # <<<<<<<<<<<<<<
 *     lz4hc_compression = u'lz4hc_compression'
 *     xpress_compression = u'xpress_compression'
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_CompressionType->tp_dict, __pyx_n_s_lz4_compression, __pyx_n_u_lz4_compression) < 0) __PYX_ERR(0, 723, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_CompressionType);

  /* "rocksdb/_rocksdb.pyx":724
 *     bzip2_compression = u'bzip2_compression'
 *     lz4_compression = u'lz4_compression'
 *     lz4hc_compression = u'lz4hc_compression'             # <<<<<<<<<<<<<<
 *     xpress_compression = u'xpress_compression'
 *     zstd_compression = u'zstd_compression'
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_CompressionType->tp_dict, __pyx_n_s_lz4hc_compression, __pyx_n_u_lz4hc_compression) < 0) __PYX_ERR(0, 724, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_CompressionType);

  /* "rocksdb/_rocksdb.pyx":725
 *     lz4_compression = u'lz4_compression'
 *     lz4hc_compression = u'lz4hc_compression'
 *     xpress_compression = u'xpress_compression'             # <<<<<<<<<<<<<<
 *     zstd_compression = u'zstd_compression'
 *     zstdnotfinal_compression = u'zstdnotfinal_compression'
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_CompressionType->tp_dict, __pyx_n_s_xpress_compression, __pyx_n_u_xpress_compression) < 0) __PYX_ERR(0, 725, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_CompressionType);

  /* "rocksdb/_rocksdb.pyx":726
 *     lz4hc_compression = u'lz4hc_compression'
 *     xpress_compression = u'xpress_compression'
 *     zstd_compression = u'zstd_compression'             # <<<<<<<<<<<<<<
 *     zstdnotfinal_compression = u'zstdnotfinal_compression'
 *     disable_compression = u'disable_compression'
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_CompressionType->tp_dict, __pyx_n_s_zstd_compression, __pyx_n_u_zstd_compression) < 0) __PYX_ERR(0, 726, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_CompressionType);

  /* "rocksdb/_rocksdb.pyx":727
 *     xpress_compression = u'xpress_compression'
 *     zstd_compression = u'zstd_compression'
 *     zstdnotfinal_compression = u'zstdnotfinal_compression'             # <<<<<<<<<<<<<<
 *     disable_compression = u'disable_compression'
 * 
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_CompressionType->tp_dict, __pyx_n_s_zstdnotfinal_compression, __pyx_n_u_zstdnotfinal_compression) < 0) __PYX_ERR(0, 727, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_CompressionType);

  /* "rocksdb/_rocksdb.pyx":728
 *     zstd_compression = u'zstd_compression'
 *     zstdnotfinal_compression = u'zstdnotfinal_compression'
 *     disable_compression = u'disable_compression'             # <<<<<<<<<<<<<<
 * 
 * cdef class CompactionPri(object):
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_CompressionType->tp_dict, __pyx_n_s_disable_compression, __pyx_n_u_disable_compression) < 0) __PYX_ERR(0, 728, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_CompressionType);

  /* "rocksdb/_rocksdb.pyx":731
 * 
 * cdef class CompactionPri(object):
 *     by_compensated_size = u'by_compensated_size'             # <<<<<<<<<<<<<<
 *     oldest_largest_seq_first = u'oldest_largest_seq_first'
 *     oldest_smallest_seq_first = u'oldest_smallest_seq_first'
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_CompactionPri->tp_dict, __pyx_n_s_by_compensated_size, __pyx_n_u_by_compensated_size) < 0) __PYX_ERR(0, 731, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_CompactionPri);

  /* "rocksdb/_rocksdb.pyx":732
 * cdef class CompactionPri(object):
 *     by_compensated_size = u'by_compensated_size'
 *     oldest_largest_seq_first = u'oldest_largest_seq_first'             # <<<<<<<<<<<<<<
 *     oldest_smallest_seq_first = u'oldest_smallest_seq_first'
 *     min_overlapping_ratio = u'min_overlapping_ratio'
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_CompactionPri->tp_dict, __pyx_n_s_oldest_largest_seq_first, __pyx_n_u_oldest_largest_seq_first) < 0) __PYX_ERR(0, 732, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_CompactionPri);

  /* "rocksdb/_rocksdb.pyx":733
 *     by_compensated_size = u'by_compensated_size'
 *     oldest_largest_seq_first = u'oldest_largest_seq_first'
 *     oldest_smallest_seq_first = u'oldest_smallest_seq_first'             # <<<<<<<<<<<<<<
 *     min_overlapping_ratio = u'min_overlapping_ratio'
 * 
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_CompactionPri->tp_dict, __pyx_n_s_oldest_smallest_seq_first, __pyx_n_u_oldest_smallest_seq_first) < 0) __PYX_ERR(0, 733, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_CompactionPri);

  /* "rocksdb/_rocksdb.pyx":734
 *     oldest_largest_seq_first = u'oldest_largest_seq_first'
 *     oldest_smallest_seq_first = u'oldest_smallest_seq_first'
 *     min_overlapping_ratio = u'min_overlapping_ratio'             # <<<<<<<<<<<<<<
 * 
 * cdef class Options(object):
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_CompactionPri->tp_dict, __pyx_n_s_min_overlapping_ratio, __pyx_n_u_min_overlapping_ratio) < 0) __PYX_ERR(0, 734, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_CompactionPri);

  /* "rocksdb/_rocksdb.pyx":1700
 * 
 *     @staticmethod
 *     def __parse_read_opts(             # <<<<<<<<<<<<<<
 *         verify_checksums=False,
 *         fill_cache=True,
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_7rocksdb_8_rocksdb_2DB_33__parse_read_opts, NULL, __pyx_n_s_rocksdb__rocksdb); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1700, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "rocksdb/_rocksdb.pyx":1699
 *         check_status(st)
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def __parse_read_opts(
 *         verify_checksums=False,
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1699, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1699, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_DB->tp_dict, __pyx_n_s_parse_read_opts, __pyx_t_2) < 0) __PYX_ERR(0, 1700, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_DB);

  /* "rocksdb/_rocksdb.pyx":1700
 * 
 *     @staticmethod
 *     def __parse_read_opts(             # <<<<<<<<<<<<<<
 *         verify_checksums=False,
 *         fill_cache=True,
 */
  __pyx_t_2 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_DB, __pyx_n_s_parse_read_opts); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1700, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "rocksdb/_rocksdb.pyx":1699
 *         check_status(st)
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def __parse_read_opts(
 *         verify_checksums=False,
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1699, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1699, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7rocksdb_8_rocksdb_DB->tp_dict, __pyx_n_s_parse_read_opts, __pyx_t_2) < 0) __PYX_ERR(0, 1700, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_7rocksdb_8_rocksdb_DB);

  /* "rocksdb/_rocksdb.pyx":1730
 * 
 * 
 * def repair_db(db_name, Options opts):             # <<<<<<<<<<<<<<
 *     cdef Status st
 *     cdef string db_path
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_7rocksdb_8_rocksdb_1repair_db, NULL, __pyx_n_s_rocksdb__rocksdb); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1730, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_repair_db, __pyx_t_2) < 0) __PYX_ERR(0, 1730, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "rocksdb/_rocksdb.pyx":1
 * import cython             # <<<<<<<<<<<<<<
 * from libcpp.string cimport string
 * from libcpp.deque cimport deque
 */
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vector.from_py":49
 * 
 * @cname("__pyx_convert_vector_from_py_int")
 * cdef vector[X] __pyx_convert_vector_from_py_int(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init rocksdb._rocksdb", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init rocksdb._rocksdb");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* GetModuleGlobalName */
static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
    result = PyDict_GetItem(__pyx_d, name);
    if (likely(result)) {
        Py_INCREF(result);
    } else {
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

/* PyCFunctionFastCall */
  #if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    return (*((__Pyx_PyCFunctionFast)meth)) (self, args, nargs, NULL);
}
#endif  // CYTHON_FAST_PYCCALL

/* PyFunctionFastCall */
  #if CYTHON_FAST_PYCALL
#include "frameobject.h"
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = PyThreadState_GET();
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = f->f_localsplus;
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif  // CPython < 3.6
#endif  // CYTHON_FAST_PYCALL

/* PyObjectCall */
  #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallMethO */
  #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
  #if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* PyErrFetchRestore */
    #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
    #if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
#if PY_VERSION_HEX >= 0x03030000
    if (cause) {
#else
    if (cause && cause != Py_None) {
#endif
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* PyObjectCallNoArg */
      #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* RaiseDoubleKeywords */
        static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
        static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* RaiseArgTupleInvalid */
        static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* KeywordStringCheck */
        static CYTHON_INLINE int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* SaveResetException */
        #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* PyErrExceptionMatches */
        #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    return PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* GetException */
        #if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb) {
#endif
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* WriteUnraisableException */
          static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* GetItemInt */
          static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (wraparound & unlikely(i < 0)) i += PyList_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (wraparound & unlikely(i < 0)) i += PyTuple_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely((n >= 0) & (n < PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely((n >= 0) & (n < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* ArgTypeTest */
          static void __Pyx_RaiseArgumentTypeInvalid(const char* name, PyObject *obj, PyTypeObject *type) {
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
}
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (likely(Py_TYPE(obj) == type)) return 1;
        #if PY_MAJOR_VERSION == 2
        else if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(PyObject_TypeCheck(obj, type))) return 1;
    }
    __Pyx_RaiseArgumentTypeInvalid(name, obj, type);
    return 0;
}

/* BytesEquals */
          static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
          static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* ExtTypeTest */
          static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(PyObject_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* UnpackUnboundCMethod */
          static int __Pyx_TryUnpackUnboundCMethod(__Pyx_CachedCFunction* target) {
    PyObject *method;
    method = __Pyx_PyObject_GetAttrStr(target->type, *target->method_name);
    if (unlikely(!method))
        return -1;
    target->method = method;
#if CYTHON_COMPILING_IN_CPYTHON
    #if PY_MAJOR_VERSION >= 3
    if (likely(PyObject_TypeCheck(method, &PyMethodDescr_Type)))
    #endif
    {
        PyMethodDescrObject *descr = (PyMethodDescrObject*) method;
        target->func = descr->d_method->ml_meth;
        target->flag = descr->d_method->ml_flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST);
    }
#endif
    return 0;
}

/* CallUnboundCMethod0 */
          static PyObject* __Pyx__CallUnboundCMethod0(__Pyx_CachedCFunction* cfunc, PyObject* self) {
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_ASSUME_SAFE_MACROS
    args = PyTuple_New(1);
    if (unlikely(!args)) goto bad;
    Py_INCREF(self);
    PyTuple_SET_ITEM(args, 0, self);
#else
    args = PyTuple_Pack(1, self);
    if (unlikely(!args)) goto bad;
#endif
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    Py_DECREF(args);
bad:
    return result;
}

/* py_dict_items */
          static CYTHON_INLINE PyObject* __Pyx_PyDict_Items(PyObject* d) {
    if (PY_MAJOR_VERSION >= 3)
        return __Pyx_CallUnboundCMethod0(&__pyx_umethod_PyDict_Type_items, d);
    else
        return PyDict_Items(d);
}

/* RaiseTooManyValuesToUnpack */
          static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
          static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* IterFinish */
          static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = PyThreadState_GET();
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(exc_type == PyExc_StopIteration) || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* UnpackItemEndCheck */
          static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* None */
          static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname) {
    PyErr_Format(PyExc_UnboundLocalError, "local variable '%s' referenced before assignment", varname);
}

/* dict_getitem_default */
          static PyObject* __Pyx_PyDict_GetItemDefault(PyObject* d, PyObject* key, PyObject* default_value) {
    PyObject* value;
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (unlikely(PyErr_Occurred()))
            return NULL;
        value = default_value;
    }
    Py_INCREF(value);
#else
    if (PyString_CheckExact(key) || PyUnicode_CheckExact(key) || PyInt_CheckExact(key)) {
        value = PyDict_GetItem(d, key);
        if (unlikely(!value)) {
            value = default_value;
        }
        Py_INCREF(value);
    } else {
        if (default_value == Py_None)
            default_value = NULL;
        value = PyObject_CallMethodObjArgs(
            d, __pyx_n_s_get, key, default_value, NULL);
    }
#endif
    return value;
}

/* CallNextTpTraverse */
          static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_traverse != current_tp_traverse)
        type = type->tp_base;
    while (type && type->tp_traverse == current_tp_traverse)
        type = type->tp_base;
    if (type && type->tp_traverse)
        return type->tp_traverse(obj, v, a);
    return 0;
}

/* CallNextTpClear */
          static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_clear) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_clear != current_tp_clear)
        type = type->tp_base;
    while (type && type->tp_clear == current_tp_clear)
        type = type->tp_base;
    if (type && type->tp_clear)
        type->tp_clear(obj);
}

/* SetVTable */
          static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* Import */
          static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_VERSION_HEX < 0x03030000
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                #if PY_VERSION_HEX < 0x03030000
                PyObject *py_level = PyInt_FromLong(1);
                if (!py_level)
                    goto bad;
                module = PyObject_CallFunctionObjArgs(py_import,
                    name, global_dict, empty_dict, list, py_level, NULL);
                Py_DECREF(py_level);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                #endif
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_VERSION_HEX < 0x03030000
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_VERSION_HEX < 0x03030000
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
          static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* GetNameInClass */
          static PyObject *__Pyx_GetNameInClass(PyObject *nmspace, PyObject *name) {
    PyObject *result;
    result = __Pyx_PyObject_GetAttrStr(nmspace, name);
    if (!result)
        result = __Pyx_GetModuleGlobalName(name);
    return result;
}

/* CodeObjectCache */
          static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
          #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        __pyx_d,      /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
          #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
          static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
          static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
          static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint64_t(uint64_t value) {
    const uint64_t neg_one = (uint64_t) -1, const_zero = (uint64_t) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(uint64_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(uint64_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(uint64_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(uint64_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(uint64_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(uint64_t),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
          static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint32_t(uint32_t value) {
    const uint32_t neg_one = (uint32_t) -1, const_zero = (uint32_t) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(uint32_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(uint32_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(uint32_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(uint32_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(uint32_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(uint32_t),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
          static CYTHON_INLINE PyObject* __Pyx_PyInt_From_rocksdb_3a__3a_CompressionType(rocksdb::CompressionType value) {
    const rocksdb::CompressionType neg_one = (rocksdb::CompressionType) -1, const_zero = (rocksdb::CompressionType) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(rocksdb::CompressionType) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(rocksdb::CompressionType) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(rocksdb::CompressionType) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(rocksdb::CompressionType) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(rocksdb::CompressionType) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(rocksdb::CompressionType),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
          static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value) {
    const unsigned int neg_one = (unsigned int) -1, const_zero = (unsigned int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(unsigned int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(unsigned int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(unsigned int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
          static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int64_t(int64_t value) {
    const int64_t neg_one = (int64_t) -1, const_zero = (int64_t) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int64_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int64_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int64_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int64_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int64_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int64_t),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
          static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
          static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
    const size_t neg_one = (size_t) -1, const_zero = (size_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* CIntFromPy */
          static CYTHON_INLINE uint32_t __Pyx_PyInt_As_uint32_t(PyObject *x) {
    const uint32_t neg_one = (uint32_t) -1, const_zero = (uint32_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(uint32_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(uint32_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (uint32_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (uint32_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(uint32_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(uint32_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32_t) >= 2 * PyLong_SHIFT) {
                            return (uint32_t) (((((uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(uint32_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32_t) >= 3 * PyLong_SHIFT) {
                            return (uint32_t) (((((((uint32_t)digits[2]) << PyLong_SHIFT) | (uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(uint32_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32_t) >= 4 * PyLong_SHIFT) {
                            return (uint32_t) (((((((((uint32_t)digits[3]) << PyLong_SHIFT) | (uint32_t)digits[2]) << PyLong_SHIFT) | (uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (uint32_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(uint32_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint32_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(uint32_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint32_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (uint32_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(uint32_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(uint32_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(uint32_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32_t) - 1 > 2 * PyLong_SHIFT) {
                            return (uint32_t) (((uint32_t)-1)*(((((uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(uint32_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32_t) - 1 > 2 * PyLong_SHIFT) {
                            return (uint32_t) ((((((uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(uint32_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32_t) - 1 > 3 * PyLong_SHIFT) {
                            return (uint32_t) (((uint32_t)-1)*(((((((uint32_t)digits[2]) << PyLong_SHIFT) | (uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(uint32_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32_t) - 1 > 3 * PyLong_SHIFT) {
                            return (uint32_t) ((((((((uint32_t)digits[2]) << PyLong_SHIFT) | (uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(uint32_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32_t) - 1 > 4 * PyLong_SHIFT) {
                            return (uint32_t) (((uint32_t)-1)*(((((((((uint32_t)digits[3]) << PyLong_SHIFT) | (uint32_t)digits[2]) << PyLong_SHIFT) | (uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(uint32_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32_t) - 1 > 4 * PyLong_SHIFT) {
                            return (uint32_t) ((((((((((uint32_t)digits[3]) << PyLong_SHIFT) | (uint32_t)digits[2]) << PyLong_SHIFT) | (uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(uint32_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint32_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(uint32_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint32_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            uint32_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (uint32_t) -1;
        }
    } else {
        uint32_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (uint32_t) -1;
        val = __Pyx_PyInt_As_uint32_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to uint32_t");
    return (uint32_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to uint32_t");
    return (uint32_t) -1;
}

/* CIntFromPy */
          static CYTHON_INLINE int32_t __Pyx_PyInt_As_int32_t(PyObject *x) {
    const int32_t neg_one = (int32_t) -1, const_zero = (int32_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int32_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int32_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int32_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int32_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int32_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(int32_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int32_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int32_t) >= 2 * PyLong_SHIFT) {
                            return (int32_t) (((((int32_t)digits[1]) << PyLong_SHIFT) | (int32_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int32_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int32_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int32_t) >= 3 * PyLong_SHIFT) {
                            return (int32_t) (((((((int32_t)digits[2]) << PyLong_SHIFT) | (int32_t)digits[1]) << PyLong_SHIFT) | (int32_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int32_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int32_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int32_t) >= 4 * PyLong_SHIFT) {
                            return (int32_t) (((((((((int32_t)digits[3]) << PyLong_SHIFT) | (int32_t)digits[2]) << PyLong_SHIFT) | (int32_t)digits[1]) << PyLong_SHIFT) | (int32_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int32_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int32_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int32_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int32_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int32_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int32_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int32_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int32_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int32_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int32_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int32_t) - 1 > 2 * PyLong_SHIFT) {
                            return (int32_t) (((int32_t)-1)*(((((int32_t)digits[1]) << PyLong_SHIFT) | (int32_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int32_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int32_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int32_t) - 1 > 2 * PyLong_SHIFT) {
                            return (int32_t) ((((((int32_t)digits[1]) << PyLong_SHIFT) | (int32_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int32_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int32_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int32_t) - 1 > 3 * PyLong_SHIFT) {
                            return (int32_t) (((int32_t)-1)*(((((((int32_t)digits[2]) << PyLong_SHIFT) | (int32_t)digits[1]) << PyLong_SHIFT) | (int32_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int32_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int32_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int32_t) - 1 > 3 * PyLong_SHIFT) {
                            return (int32_t) ((((((((int32_t)digits[2]) << PyLong_SHIFT) | (int32_t)digits[1]) << PyLong_SHIFT) | (int32_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int32_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int32_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int32_t) - 1 > 4 * PyLong_SHIFT) {
                            return (int32_t) (((int32_t)-1)*(((((((((int32_t)digits[3]) << PyLong_SHIFT) | (int32_t)digits[2]) << PyLong_SHIFT) | (int32_t)digits[1]) << PyLong_SHIFT) | (int32_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int32_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int32_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int32_t) - 1 > 4 * PyLong_SHIFT) {
                            return (int32_t) ((((((((((int32_t)digits[3]) << PyLong_SHIFT) | (int32_t)digits[2]) << PyLong_SHIFT) | (int32_t)digits[1]) << PyLong_SHIFT) | (int32_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int32_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int32_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int32_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int32_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int32_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int32_t) -1;
        }
    } else {
        int32_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int32_t) -1;
        val = __Pyx_PyInt_As_int32_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int32_t");
    return (int32_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int32_t");
    return (int32_t) -1;
}

/* CIntFromPy */
          static CYTHON_INLINE uint64_t __Pyx_PyInt_As_uint64_t(PyObject *x) {
    const uint64_t neg_one = (uint64_t) -1, const_zero = (uint64_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(uint64_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(uint64_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (uint64_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (uint64_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(uint64_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(uint64_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) >= 2 * PyLong_SHIFT) {
                            return (uint64_t) (((((uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(uint64_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) >= 3 * PyLong_SHIFT) {
                            return (uint64_t) (((((((uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(uint64_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) >= 4 * PyLong_SHIFT) {
                            return (uint64_t) (((((((((uint64_t)digits[3]) << PyLong_SHIFT) | (uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (uint64_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(uint64_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint64_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(uint64_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint64_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (uint64_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(uint64_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(uint64_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(uint64_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) - 1 > 2 * PyLong_SHIFT) {
                            return (uint64_t) (((uint64_t)-1)*(((((uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(uint64_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) - 1 > 2 * PyLong_SHIFT) {
                            return (uint64_t) ((((((uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(uint64_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) - 1 > 3 * PyLong_SHIFT) {
                            return (uint64_t) (((uint64_t)-1)*(((((((uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(uint64_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) - 1 > 3 * PyLong_SHIFT) {
                            return (uint64_t) ((((((((uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(uint64_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) - 1 > 4 * PyLong_SHIFT) {
                            return (uint64_t) (((uint64_t)-1)*(((((((((uint64_t)digits[3]) << PyLong_SHIFT) | (uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(uint64_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) - 1 > 4 * PyLong_SHIFT) {
                            return (uint64_t) ((((((((((uint64_t)digits[3]) << PyLong_SHIFT) | (uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(uint64_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint64_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(uint64_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint64_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            uint64_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (uint64_t) -1;
        }
    } else {
        uint64_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (uint64_t) -1;
        val = __Pyx_PyInt_As_uint64_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to uint64_t");
    return (uint64_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to uint64_t");
    return (uint64_t) -1;
}

/* CIntFromPy */
          static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *x) {
    const unsigned int neg_one = (unsigned int) -1, const_zero = (unsigned int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(unsigned int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(unsigned int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (unsigned int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(unsigned int, digit, digits[0])
                case 2:
                    if (8 * sizeof(unsigned int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 2 * PyLong_SHIFT) {
                            return (unsigned int) (((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 3 * PyLong_SHIFT) {
                            return (unsigned int) (((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 4 * PyLong_SHIFT) {
                            return (unsigned int) (((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (unsigned int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(unsigned int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(unsigned int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(unsigned int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(unsigned int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(unsigned int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(unsigned int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned int) ((((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned int) ((((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned int) ((((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(unsigned int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(unsigned int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            unsigned int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (unsigned int) -1;
        }
    } else {
        unsigned int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (unsigned int) -1;
        val = __Pyx_PyInt_As_unsigned_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to unsigned int");
    return (unsigned int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to unsigned int");
    return (unsigned int) -1;
}

/* CIntFromPy */
          static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CheckBinaryVersion */
          static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* ModuleImport */
          #ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

/* TypeImport */
          #ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    size_t size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    py_name = __Pyx_PyIdentifier_FromString(class_name);
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (!strict && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. Expected %zd, got %zd",
            module_name, class_name, basicsize, size);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    else if ((size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s has the wrong size, try recompiling. Expected %zd, got %zd",
            module_name, class_name, basicsize, size);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return NULL;
}
#endif

/* InitStrings */
          static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if CYTHON_COMPILING_IN_CPYTHON && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else
        if (__Pyx_PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_LENGTH(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else
        return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
  #else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
  #endif
#else
  res = PyNumber_Int(x);
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(x);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
